var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/entities/Admin.html",[0,1.476,1,2.392]],["body/entities/Admin.html",[0,2.163,1,3.507,2,2.252,3,0.123,4,0.111,5,0.111,6,4.139,7,0.326,8,1.028,9,4.327,10,1.441,11,7.006,12,4.327,13,2.585,14,0.614,15,0.011,16,1.194,17,1.315,18,3.358,19,4.861,20,4.861,21,5.487,22,0.771,23,4.711,24,1.216,25,3.616,26,4.711,27,6.245,28,4.711,29,2.149,30,3.257,31,6.245,32,4.711,33,3.257,34,6.245,35,4.711,36,0.275,37,3.767,38,4.318,39,4.318,40,3.257,41,1.731,42,2.338,43,2.91,44,2.338,45,3.763,46,0.123,47,0.187,48,0.007,49,0.007]],["title/controllers/AppController.html",[50,1.566,51,3.149]],["body/controllers/AppController.html",[3,0.149,4,0.134,5,0.134,7,0.396,15,0.01,16,1.133,17,0.97,22,0.569,36,0.261,46,0.149,47,0.228,48,0.008,49,0.008,50,2.601,51,5.231,52,2.105,53,5.033,54,2.188,55,8.024,56,3.217,57,6.22,58,7.05,59,5.729,60,5.729,61,5.729,62,1.821,63,1.21,64,3.807,65,3.807,66,3.081,67,1.146,68,5.729,69,3.081,70,4.576,71,1.984,72,5.729,73,5.729,74,1.543,75,3.368]],["title/modules/AppModule.html",[76,1.246,77,3.149]],["body/modules/AppModule.html",[3,0.1,4,0.09,5,0.09,15,0.011,29,1.464,36,0.315,46,0.1,47,0.153,48,0.006,49,0.006,51,4.658,52,1.997,63,0.813,76,1.843,77,6.537,78,1.601,79,1.655,80,1.773,81,1.773,82,1.655,83,1.773,84,1.773,85,3.379,86,3.379,87,5.186,88,4.888,89,5.186,90,4.888,91,4.888,92,4.888,93,5.186,94,5.186,95,5.186,96,4.888,97,4.888,98,4.41,99,4.888,100,2.506,101,1.773,102,1.773,103,3.846,104,2.598,105,3.846,106,3.846,107,3.072,108,2.375,109,5.435,110,2.506,111,3.846,112,2.659,113,3.846,114,3.379,115,2.842,116,3.379,117,3.379,118,3.846,119,3.379,120,3.379,121,3.379,122,2.659,123,3.846,124,3.379,125,3.846,126,3.846,127,3.846,128,0.981]],["title/controllers/AuthController.html",[50,1.566,129,3.149]],["body/controllers/AuthController.html",[3,0.108,4,0.097,5,0.097,7,0.287,13,1.771,14,0.634,15,0.011,17,0.971,22,0.569,36,0.283,46,0.108,47,0.165,48,0.007,49,0.007,50,1.525,52,1.525,54,1.771,56,3.219,62,1.822,63,0.877,64,3.531,65,3.531,66,2.232,67,0.831,69,3.082,71,2.453,74,1.544,129,4.236,130,3.647,131,2.331,132,2.564,133,2.662,134,1.874,135,5.769,136,3.647,137,4.631,138,4.151,139,3.996,140,5.656,141,5.732,142,3.963,143,3.963,144,5.732,145,4.151,146,4.151,147,1.349,148,1.086,149,1.211,150,2.045,151,3.647,152,5.445,153,4.151,154,3.735,155,5.732,156,4.151,157,4.151,158,2.331,159,2.331,160,4.056,161,4.279,162,3.647,163,4.056,164,6.566,165,3.315,166,2.869,167,4.853,168,4.151,169,3.647,170,4.151,171,4.151,172,2.06,173,1.572,174,3.647,175,4.151,176,3.315,177,2.045,178,4.151,179,4.151,180,4.151,181,1.319,182,4.151,183,1.283,184,4.151]],["title/classes/AuthDto.html",[47,0.169,167,3.149]],["body/classes/AuthDto.html",[3,0.15,4,0.135,5,0.135,7,0.397,8,1.168,14,0.606,15,0.01,16,1.363,17,0.973,22,0.704,36,0.212,46,0.15,47,0.228,48,0.008,49,0.008,67,1.15,71,1.99,139,4.58,147,1.352,148,1.088,149,1.214,167,5.241,185,1.389,186,5.048,187,1.634,188,7.091,189,7.091,190,4.589,191,4.903,192,2.254,193,5.745]],["title/modules/AuthModule.html",[76,1.246,87,2.945]],["body/modules/AuthModule.html",[3,0.113,4,0.102,5,0.102,15,0.011,36,0.306,46,0.113,47,0.173,48,0.007,49,0.007,52,2.176,63,0.919,76,1.967,78,1.811,79,1.872,80,2.006,81,2.006,82,1.872,83,3.103,84,3.103,87,5.981,92,5.08,99,5.516,100,2.729,101,2.006,102,2.006,104,2.83,108,2.687,110,2.835,119,3.822,121,3.822,128,1.11,129,4.973,161,5.516,162,3.822,194,3.822,195,4.35,196,3.822,197,3.822,198,5.08,199,4.926,200,4.35,201,6.729,202,4.35,203,5.92,204,3.008,205,4.994,206,2.687,207,4.35,208,4.728,209,4.35,210,4.35,211,3.475,212,3.008,213,4.35,214,4.35,215,4.35,216,4.35,217,3.475]],["title/injectables/AuthService.html",[161,2.776,218,1.179]],["body/injectables/AuthService.html",[3,0.091,4,0.082,5,0.082,7,0.241,10,0.716,13,2.455,14,0.525,15,0.011,22,0.69,36,0.288,42,1.728,46,0.091,47,0.138,48,0.006,49,0.006,54,1.564,62,2.08,63,0.736,74,1.763,133,2.708,135,4.447,137,3.848,139,1.872,142,2.407,143,2.407,147,1.636,148,1.317,149,1.469,150,2.127,151,4.447,152,5.406,160,4.295,161,3.298,165,2.781,166,2.407,169,3.059,173,2.259,174,4.447,177,2.67,181,2.379,183,2.023,187,1.44,204,2.407,218,1.401,219,1.55,220,3.059,221,3.605,222,5.061,223,5.061,224,3.059,225,4.265,226,5.979,227,4.879,228,3.482,229,5.061,230,3.482,231,3.482,232,5.061,233,3.482,234,2.573,235,5.061,236,3.482,237,3.059,238,4.447,239,2.512,240,2.573,241,1.955,242,3.482,243,5.061,244,3.482,245,2.639,246,3.249,247,3.129,248,5.061,249,3.482,250,3.482,251,3.482,252,4.042,253,3.482,254,3.482,255,3.482,256,3.482,257,3.482,258,3.482,259,1.955,260,3.482,261,3.059,262,5.061,263,3.482,264,3.482,265,3.482,266,3.059,267,1.872,268,3.059,269,3.482,270,3.482,271,1.872,272,2.781,273,3.482]],["title/entities/Comment.html",[0,1.476,274,2.291]],["body/entities/Comment.html",[0,2.126,2,2.195,3,0.12,4,0.108,5,0.108,7,0.317,8,1.011,10,1.422,13,2.571,14,0.611,15,0.011,16,0.982,17,1.304,18,2.469,19,4.001,20,4.001,22,0.786,24,1.195,25,3.57,29,2.241,36,0.255,37,3.719,41,1.687,42,2.279,43,2.836,46,0.12,47,0.183,48,0.007,49,0.007,274,3.301,275,4.034,276,5.524,277,3.884,278,3.884,279,2.475,280,4.591,281,3.447,282,2.992,283,4.537,284,4.591,285,4.591,286,4.244,287,6.139,288,4.903,289,4.244,290,4.591,291,6.139,292,4.591,293,6.139,294,4.591,295,4.782,296,1.59,297,4.591,298,3.393]],["title/classes/CommentDto.html",[47,0.169,299,3.149]],["body/classes/CommentDto.html",[3,0.108,4,0.097,5,0.097,7,0.286,8,0.941,10,1.578,13,2.185,14,0.649,15,0.011,16,1.228,17,1.257,22,0.796,24,1.494,36,0.26,42,2.051,46,0.108,47,0.227,48,0.007,49,0.007,67,0.827,74,1.54,147,0.973,148,0.783,149,0.873,185,0.999,187,1.176,192,2.5,274,2.223,276,5.233,277,3.679,278,4.167,279,2.85,281,3.969,299,4.224,300,3.632,301,5.716,302,6.552,303,6.552,304,3.074,305,4.23,306,4.133,307,2.678,308,5.716,309,4.133,310,3.952,311,4.133,312,4.133,313,4.133,314,4.842,315,4.133,316,4.133,317,4.133,318,4.133,319,4.133,320,3.301,321,5.757,322,2.553,323,2.223,324,2.244,325,3.725,326,3.632,327,4.133,328,4.133,329,3.209,330,4.133]],["title/modules/CommentsModule.html",[76,1.246,88,2.776]],["body/modules/CommentsModule.html",[3,0.146,4,0.131,5,0.131,15,0.01,36,0.293,46,0.146,47,0.223,48,0.008,49,0.008,63,1.183,76,2.223,78,2.332,79,2.41,80,2.582,81,2.582,82,2.41,83,3.506,84,3.506,88,5.52,100,3.218,101,2.582,102,2.582,104,2.677,274,3.011,320,4.473,331,4.92,332,4.92,333,4.92,334,5.723,335,5.6,336,5.6,337,3.011,338,2.121,339,5.6]],["title/injectables/CommentsService.html",[218,1.179,334,2.776]],["body/injectables/CommentsService.html",[3,0.071,4,0.064,5,0.064,7,0.188,10,1.502,13,2.2,14,0.52,15,0.011,22,0.684,24,1.66,29,1.383,36,0.262,41,0.998,42,1.348,43,1.678,46,0.071,47,0.108,48,0.005,49,0.005,54,1.298,57,2.387,62,2.1,63,0.574,74,1.856,128,1.939,133,2.829,147,1.622,148,1.305,149,1.456,150,2.357,173,1.029,177,2.458,181,2.19,183,2.042,187,1.195,218,1.163,219,1.209,221,2.665,245,2.071,246,2.549,259,2.884,274,4.147,276,4.992,279,2.071,320,2.17,334,2.737,338,1.029,340,2.387,341,4.201,342,5.136,343,3.691,344,4.201,345,4.201,346,5.136,347,2.716,348,3.108,349,2.716,350,4.201,351,4.201,352,5.806,353,2.716,354,5.835,355,2.716,356,4.49,357,2.716,358,5.078,359,4.201,360,2.716,361,4.201,362,2.716,363,2.17,364,4.201,365,2.716,366,2.716,367,4.763,368,2.716,369,2.47,370,2.762,371,2.007,372,1.525,373,1.252,374,3.355,375,1.597,376,2.716,377,2.387,378,2.716,379,2.387,380,5.136,381,1.878,382,2.716,383,3.355,384,2.387,385,3.355,386,3.104,387,3.104,388,2.387,389,2.716,390,2.716,391,2.716,392,4.201,393,2.387,394,2.716,395,2.387,396,2.716,397,4.201,398,2.716,399,4.201,400,4.201,401,4.201,402,2.716,403,2.17,404,2.716,405,2.387,406,2.387,407,3.355,408,1.678]],["title/classes/CreateCommentDto.html",[47,0.169,356,2.776]],["body/classes/CreateCommentDto.html",[3,0.159,4,0.143,5,0.143,7,0.42,8,1.209,14,0.595,15,0.01,16,1.31,17,1.03,22,0.603,36,0.224,46,0.159,47,0.242,48,0.009,49,0.009,67,1.216,185,1.47,192,2.333,278,4.708,307,2.303,324,1.777,356,4.783,409,6.449,410,4.855,411,6.079]],["title/classes/CreateFileDto.html",[47,0.169,412,3.149]],["body/classes/CreateFileDto.html",[3,0.157,4,0.141,5,0.191,7,0.415,8,1.2,14,0.55,15,0.01,16,1.166,17,1.017,22,0.596,36,0.221,46,0.157,47,0.239,48,0.009,49,0.009,67,1.202,128,1.859,185,1.452,192,2.316,412,5.385,413,6.402,414,5.277,415,5.385,416,3.531,417,5.82,418,6.402,419,4.748,420,6.005]],["title/classes/CreateImageDto.html",[47,0.169,421,3.149]],["body/classes/CreateImageDto.html",[3,0.159,4,0.143,5,0.185,7,0.421,8,1.211,14,0.46,15,0.01,16,0.976,17,1.033,22,0.605,36,0.224,46,0.159,47,0.242,48,0.009,49,0.009,128,1.556,185,1.474,412,6.058,415,4.506,416,3.585,417,4.87,418,5.358,419,3.974,421,5.434,422,5.358,423,5.358,424,3.954,425,4.506,426,6.097,427,6.097,428,6.097]],["title/classes/CreateLanguageDto.html",[47,0.169,429,2.632]],["body/classes/CreateLanguageDto.html",[3,0.147,4,0.132,5,0.132,7,0.389,8,1.153,14,0.631,15,0.01,16,1.371,17,1.187,22,0.695,36,0.207,46,0.147,47,0.224,48,0.008,49,0.008,67,1.127,185,1.362,192,2.423,307,2.653,324,2.479,429,4.326,430,6.698,431,4.498,432,5.346,433,3.216,434,5.631,435,5.631]],["title/classes/CreatePlaceCategoryDto.html",[47,0.169,436,2.776]],["body/classes/CreatePlaceCategoryDto.html",[3,0.14,4,0.126,5,0.126,7,0.372,8,1.122,14,0.624,15,0.01,16,1.256,17,1.154,22,0.676,24,1.528,29,2.262,36,0.198,46,0.14,47,0.214,48,0.008,49,0.008,67,1.078,149,1.439,185,1.303,192,2.374,307,2.581,324,2.455,419,4.439,436,4.439,437,3.326,438,6.564,439,3.981,440,6.564,441,5.801,442,2.581,443,3.141,444,5.387,445,5.387]],["title/classes/CreatePlaceDto.html",[47,0.169,446,2.776]],["body/classes/CreatePlaceDto.html",[3,0.095,4,0.085,5,0.085,7,0.251,8,0.86,9,4.368,10,1.073,14,0.649,15,0.01,16,1.392,17,1.339,22,0.784,24,1.597,29,2.297,36,0.134,46,0.095,47,0.145,48,0.006,49,0.006,67,0.727,71,3.006,128,1.704,149,1.103,185,0.879,192,2.549,324,2.068,416,4.646,419,3.402,443,2.407,446,3.402,447,7.047,448,2.686,449,5.368,450,4.609,451,5.368,452,5.368,453,3.592,454,4.368,455,3.635,456,3.225,457,5.867,458,3.079,459,3.635,460,3.858,461,3.635,462,3.635,463,2.931,464,3.194,465,3.635,466,3.591,467,3.225,468,3.635,469,3.635,470,3.635]],["title/classes/CreatePlaceTypeDto.html",[47,0.169,471,2.776]],["body/classes/CreatePlaceTypeDto.html",[3,0.123,4,0.111,5,0.111,7,0.326,8,1.028,14,0.657,15,0.01,16,1.121,17,1.187,22,0.695,24,1.452,29,2.275,36,0.23,46,0.123,47,0.248,48,0.007,49,0.007,67,0.943,149,1.319,185,1.139,192,2.371,279,3.008,296,2.163,307,2.654,324,2.416,419,4.07,437,3.321,440,6.156,442,2.366,443,2.879,471,4.07,472,6.555,473,3.481,474,5.736,475,4.711,476,4.711,477,4.711,478,3.358,479,4.711,480,4.711,481,4.711,482,6.245,483,6.245,484,6.245,485,4.711,486,4.711,487,4.139,488,4.711,489,4.711,490,4.711]],["title/classes/CreateRoleDto.html",[47,0.169,491,2.776]],["body/classes/CreateRoleDto.html",[3,0.153,4,0.138,5,0.138,7,0.405,8,1.182,14,0.443,15,0.01,17,0.993,22,0.582,36,0.264,44,3.564,46,0.153,47,0.233,48,0.008,49,0.008,67,1.173,148,1.572,185,1.418,192,2.282,296,2.487,307,2.221,324,1.714,491,4.68,492,6.31,493,4.684,494,4.284,495,5.152,496,6.31,497,5.864,498,3.821,499,3.293,500,5.152]],["title/classes/CreateTranslationDto.html",[47,0.169,501,2.945]],["body/classes/CreateTranslationDto.html",[3,0.129,4,0.116,5,0.116,7,0.341,8,1.06,10,1.562,14,0.652,15,0.01,16,1.215,17,1.287,22,0.754,24,1.625,36,0.182,46,0.129,47,0.196,48,0.008,49,0.008,67,0.987,185,1.193,192,2.504,278,4.621,279,3.062,296,2.23,307,2.877,324,2.221,433,3.062,443,2.968,501,4.45,502,6.923,503,3.94,504,4.213,505,5.823,506,5.295,507,4.933,508,4.933,509,4.933,510,4.933]],["title/classes/CreateUserDto.html",[47,0.169,137,2.505]],["body/classes/CreateUserDto.html",[3,0.126,4,0.113,5,0.113,7,0.333,8,1.043,14,0.649,15,0.01,16,1.401,17,1.275,22,0.747,36,0.177,46,0.126,47,0.191,48,0.007,49,0.007,67,0.963,137,3.724,148,1.425,185,1.164,192,2.484,247,3.737,267,4.4,296,2.876,307,2.85,324,2.2,386,5.233,387,5.233,511,6.868,512,3.845,513,5.06,514,4.814,515,5.566,516,5.566,517,4.814,518,5.06,519,5.566,520,4.814,521,4.814]],["title/modules/DatabaseModule.html",[76,1.246,89,2.945]],["body/modules/DatabaseModule.html",[2,2.669,3,0.146,4,0.131,5,0.131,14,0.422,15,0.011,36,0.293,46,0.146,47,0.222,48,0.008,49,0.008,63,1.18,76,2.037,78,2.325,89,4.817,104,3.331,107,5.565,108,3.449,110,3.639,128,1.938,205,5.498,211,4.46,217,4.46,267,3.003,326,4.906,337,3.003,338,2.115,522,5.584,523,3.449,524,5.584,525,4.906,526,3.86,527,5.584,528,5.584,529,5.584,530,3.86,531,5.584,532,5.584,533,5.584,534,5.584,535,5.584,536,5.584,537,5.584]],["title/classes/FileDto.html",[47,0.169,538,2.945]],["body/classes/FileDto.html",[3,0.161,4,0.145,5,0.145,7,0.428,8,1.222,14,0.56,15,0.01,16,1.318,17,1.049,22,0.615,36,0.228,46,0.161,47,0.246,48,0.009,49,0.009,67,1.239,185,1.497,192,2.359,416,3.641,538,5.131,539,5.441,540,6.984,541,6.192]],["title/interfaces/IDatabaseConfig.html",[523,2.632,542,2.392]],["body/interfaces/IDatabaseConfig.html",[3,0.124,4,0.112,5,0.112,7,0.329,8,1.035,13,2.406,14,0.565,15,0.011,16,1.415,46,0.203,48,0.007,49,0.007,74,1.281,148,1.475,191,3.288,206,2.938,212,4.345,247,3.004,267,4.187,296,1.647,523,3.882,526,5.383,530,3.288,542,4.205,543,3.288,544,3.288,545,3.515,546,3.515,547,3.099,548,3.288,549,3.515,550,4.345,551,3.515,552,4.644,553,3.515,554,4.644,555,3.515,556,4.345,557,3.515,558,3.515,559,3.515,560,3.515,561,3.515,562,3.515,563,4.644,564,3.515,565,3.515,566,3.515,567,4.644,568,3.515,569,2.796,570,2.938]],["title/interfaces/IGoogleCloudConfig.html",[542,2.392,569,2.505]],["body/interfaces/IGoogleCloudConfig.html",[3,0.124,4,0.112,5,0.112,7,0.329,8,1.035,13,1.942,14,0.565,15,0.011,16,1.415,46,0.203,48,0.007,49,0.007,74,1.281,148,1.19,191,3.288,206,2.938,212,4.345,247,3.004,267,3.38,296,1.647,523,2.938,526,4.345,530,3.288,542,4.205,543,3.288,544,3.288,545,3.515,546,3.515,547,3.099,548,3.288,549,3.515,550,5.383,551,3.515,552,5.754,553,3.515,554,5.754,555,3.515,556,5.383,557,3.515,558,3.515,559,3.515,560,3.515,561,3.515,562,3.515,563,4.644,564,3.515,565,3.515,566,3.515,567,4.644,568,3.515,569,3.695,570,2.938]],["title/interfaces/IJwtConfig.html",[206,2.632,542,2.392]],["body/interfaces/IJwtConfig.html",[3,0.128,4,0.115,5,0.115,7,0.34,8,1.058,13,1.986,14,0.485,15,0.011,16,1.404,46,0.205,48,0.008,49,0.008,74,1.325,148,1.217,191,3.402,206,3.97,212,5.443,247,3.072,267,3.456,296,1.704,523,3.039,526,4.443,530,3.402,542,4.261,543,3.402,544,3.402,545,3.637,546,3.637,547,3.207,548,3.402,549,3.637,550,4.443,551,3.637,552,4.75,553,3.637,554,4.75,555,3.637,556,4.443,557,3.637,558,3.637,559,3.637,560,3.637,561,3.637,562,3.637,563,5.818,564,3.637,565,3.637,566,3.637,567,4.75,568,3.637,569,2.893,570,3.039]],["title/interfaces/IMailerConfig.html",[542,2.392,570,2.632]],["body/interfaces/IMailerConfig.html",[3,0.128,4,0.115,5,0.115,7,0.34,8,1.058,13,1.986,14,0.485,15,0.011,16,1.404,46,0.205,48,0.008,49,0.008,74,1.325,148,1.217,191,3.402,206,3.039,212,4.443,247,3.763,267,3.456,296,1.704,523,3.039,526,4.443,530,3.402,542,4.261,543,3.402,544,3.402,545,3.637,546,3.637,547,3.207,548,3.402,549,3.637,550,4.443,551,3.637,552,4.75,553,3.637,554,4.75,555,3.637,556,4.443,557,3.637,558,3.637,559,3.637,560,3.637,561,3.637,562,3.637,563,4.75,564,3.637,565,3.637,566,3.637,567,5.818,568,3.637,569,2.893,570,3.97]],["title/entities/Image.html",[0,1.476,442,1.614]],["body/entities/Image.html",[0,1.952,2,1.936,3,0.106,4,0.095,5,0.095,7,0.28,8,0.928,10,1.333,13,2.504,14,0.612,15,0.011,16,0.902,17,1.351,18,2.177,22,0.792,24,1.364,25,3.345,29,2.233,33,3.896,36,0.271,37,3.961,38,4.48,41,1.488,42,2.01,43,2.501,46,0.106,47,0.161,48,0.007,49,0.007,277,3.639,281,3.164,282,2.639,283,4.164,286,3.896,288,4.501,289,3.896,295,4.48,296,2.245,408,3.48,442,2.135,466,3.485,571,3.558,572,3.873,573,3.873,574,4.789,575,4.049,576,4.049,577,4.951,578,4.049,579,4.951,580,4.049,581,4.951,582,4.049,583,5.635,584,4.049,585,4.049,586,5.635,587,4.049,588,2.381,589,2.274,590,2.381,591,2.274]],["title/classes/ImageDto.html",[47,0.169,592,3.149]],["body/classes/ImageDto.html",[3,0.124,4,0.112,5,0.112,7,0.33,8,1.036,10,1.602,14,0.652,15,0.01,16,1.199,17,1.27,22,0.774,24,1.613,36,0.232,46,0.124,47,0.19,48,0.007,49,0.007,67,0.954,147,1.122,148,0.903,149,1.007,185,1.153,187,1.356,192,2.477,277,3.957,281,4.209,304,3.385,305,4.19,307,2.839,310,4.352,323,2.564,324,2.191,442,3.092,466,4.19,574,5.759,592,4.652,593,4.189,594,6.295,595,4.767,596,4.767,597,4.767,598,3.808]],["title/controllers/ImagesController.html",[50,1.566,599,3.149]],["body/controllers/ImagesController.html",[3,0.085,4,0.077,5,0.149,7,0.226,10,1.458,14,0.511,15,0.011,17,0.973,22,0.57,24,1.118,36,0.296,46,0.085,47,0.13,48,0.006,49,0.006,50,1.2,52,1.2,54,1.492,56,3.226,62,1.826,63,0.69,64,3.089,65,3.413,66,1.756,67,0.653,69,3.089,71,1.672,74,1.71,128,1.232,131,1.833,132,2.982,133,2.664,134,2.215,147,1.136,148,1.088,149,1.02,150,1.722,154,2.128,158,2.711,159,2.711,173,1.829,177,2.264,181,1.534,183,2.093,187,0.929,221,2.226,239,3.15,241,1.833,245,1.316,369,2.838,373,1.505,415,4.245,421,4.691,442,2.914,443,1.505,458,2.226,463,3.226,494,1.685,499,1.833,538,3.338,592,4.691,599,3.568,600,2.869,601,3.034,602,3.338,603,3.265,604,3.66,605,3.265,606,3.265,607,3.265,608,3.265,609,2.596,610,3.265,611,2.869,612,3.265,613,2.017,614,3.971,615,3.265,616,3.265,617,3.265,618,3.265,619,2.128,620,2.017,621,3.146,622,4.242,623,3.146,624,3.548,625,2.869,626,3.265,627,3.265,628,2.982,629,3.265,630,2.869,631,2.869,632,4.828,633,3.265,634,3.548,635,2.869,636,3.265,637,2.413,638,2.608,639,2.608,640,2.257,641,2.608,642,3.265,643,3.265,644,3.265,645,2.413,646,3.265,647,2.869,648,3.265,649,3.265,650,3.265,651,3.265,652,3.265,653,3.265,654,2.413,655,4.828,656,3.265,657,3.265,658,3.265,659,3.265,660,3.265,661,3.265,662,2.128,663,3.265,664,2.608,665,3.265,666,3.265,667,3.265,668,3.265,669,3.265,670,3.265,671,3.265,672,2.608,673,2.869,674,2.257,675,2.257,676,3.265]],["title/modules/ImagesModule.html",[76,1.246,90,2.776]],["body/modules/ImagesModule.html",[3,0.137,4,0.123,5,0.123,15,0.01,36,0.302,46,0.137,47,0.209,48,0.008,49,0.008,52,2.461,63,1.108,76,2.157,78,2.184,79,2.257,80,2.418,81,2.418,82,2.257,83,3.402,84,3.402,90,5.562,97,5.352,100,3.088,101,2.418,102,2.418,104,3.202,116,4.609,337,2.821,338,1.987,442,1.987,598,4.189,599,5.453,624,5.377,625,4.609,677,4.609,678,4.609,679,4.609,680,5.245,681,5.245,682,5.245,683,5.245]],["title/injectables/ImagesService.html",[218,1.179,624,2.632]],["body/injectables/ImagesService.html",[3,0.098,4,0.088,5,0.088,7,0.26,10,1.532,13,1.655,14,0.512,15,0.011,16,0.997,22,0.712,24,1.45,36,0.282,41,1.384,42,1.869,46,0.098,47,0.15,48,0.006,49,0.006,54,1.655,62,2.157,63,0.796,74,1.931,133,2.86,134,1.751,147,1.597,148,1.285,149,1.434,150,1.91,173,2.028,177,2.734,181,2.157,183,1.655,187,1.523,218,1.482,219,1.677,221,2.469,239,3.368,241,2.114,245,1.518,338,1.426,348,3.649,370,2.879,372,2.114,385,3.008,442,2.716,463,2.114,466,2.025,574,2.783,598,3.008,601,3.244,602,3.702,604,3.216,609,2.879,613,3.307,624,3.307,634,4.734,635,3.309,640,2.603,684,3.309,685,5.354,686,3.765,687,3.765,688,5.354,689,5.354,690,3.765,691,5.354,692,3.765,693,3.765,694,5.354,695,3.765,696,3.765,697,3.765,698,3.765,699,3.765,700,3.309,701,3.765,702,3.008,703,3.765,704,3.765,705,3.765,706,3.765,707,3.765,708,3.765,709,5.354,710,3.765,711,4.276,712,3.765,713,3.765,714,3.765]],["title/guards/JwtAuthGuard.html",[715,2.945,716,3.403]],["body/guards/JwtAuthGuard.html",[3,0.117,4,0.106,5,0.106,7,0.311,8,0.741,14,0.457,15,0.011,22,0.601,36,0.27,46,0.117,47,0.179,48,0.007,49,0.007,54,1.871,62,1.43,63,0.95,74,1.212,128,1.148,139,3.938,147,1.425,148,1.147,149,1.279,154,2.931,160,4.523,172,2.232,173,1.704,181,2.429,183,2.115,187,1.279,204,3.11,218,1.676,226,6.287,239,2.232,240,3.324,241,2.526,245,2.76,246,3.005,279,2.441,408,2.778,604,3.125,609,3.256,654,3.324,664,3.593,715,3.11,716,4.836,717,3.593,718,6.014,719,3.952,720,5.32,721,5.059,722,6.434,723,3.952,724,4.498,725,5.32,726,5.849,727,4.498,728,3.593,729,3.593,730,3.952,731,3.324,732,4.498,733,3.952,734,2.526,735,3.952,736,3.952,737,6.014,738,5.32,739,3.11,740,3.952,741,4.498,742,2.526,743,4.024,744,3.952,745,3.324]],["title/entities/Language.html",[0,1.476,433,1.718]],["body/entities/Language.html",[0,2.281,2,2.443,3,0.133,4,0.12,5,0.12,7,0.353,8,1.084,10,1.499,14,0.616,15,0.011,16,1.232,17,1.304,18,3.542,19,5.017,20,5.017,22,0.764,24,1.282,25,3.762,30,3.533,36,0.242,37,3.919,39,4.554,41,1.878,46,0.133,47,0.203,48,0.008,49,0.008,324,2.131,432,4.749,433,2.656,547,4.292,746,4.49,747,3.917,748,5.11,749,5.11,750,6.586,751,5.11,752,5.787,753,5.11,754,3.777]],["title/classes/LanguageDto.html",[47,0.169,755,3.149]],["body/classes/LanguageDto.html",[3,0.14,4,0.126,5,0.126,7,0.372,8,1.122,10,1.665,14,0.634,15,0.01,16,1.256,17,1.266,22,0.742,24,1.528,36,0.251,46,0.14,47,0.214,48,0.008,49,0.008,67,1.078,134,1.761,185,1.303,192,2.165,307,2.83,324,2.295,424,3.663,425,5.034,429,5.001,432,4.868,433,3.165,755,5.034,756,4.734,757,5.387,758,5.387,759,5.387,760,3.981]],["title/controllers/LanguagesController.html",[50,1.566,761,3.149]],["body/controllers/LanguagesController.html",[3,0.075,4,0.068,5,0.068,7,0.199,10,1.737,14,0.64,15,0.011,17,1.087,22,0.637,24,1.571,36,0.249,46,0.075,47,0.114,48,0.005,49,0.005,50,1.057,52,1.057,54,1.357,62,2.039,63,0.608,64,3.636,65,3.636,66,1.547,67,0.576,69,3.45,71,2.838,74,1.728,75,4.456,128,0.734,131,1.616,133,2.795,134,2.097,147,1.402,148,1.332,149,1.259,150,1.899,158,2.99,159,2.465,163,2.712,172,1.428,173,1.09,177,2.288,181,0.915,259,2.99,370,3.782,373,1.327,375,1.692,429,4.344,433,3.279,458,2.024,601,2.848,602,3.036,609,3.203,613,1.777,614,3.681,620,1.777,621,3.882,628,3.68,674,1.989,675,1.989,755,4.997,760,3.245,761,3.245,762,2.528,763,3.507,764,2.861,765,3.602,766,2.528,767,6.415,768,2.877,769,2.127,770,2.877,771,2.877,772,2.877,773,2.877,774,2.877,775,1.875,776,4.391,777,5.324,778,5.324,779,2.877,780,2.877,781,2.877,782,2.877,783,2.877,784,1.692,785,5.013,786,2.877,787,2.877,788,2.877,789,3.289,790,2.528,791,4.402,792,2.298,793,2.877,794,2.877,795,2.877,796,2.877,797,2.877,798,2.298,799,2.877,800,2.877,801,2.298,802,1.989,803,2.877,804,2.877,805,4.391,806,2.877]],["title/modules/LanguagesModule.html",[76,1.246,91,2.776]],["body/modules/LanguagesModule.html",[3,0.142,4,0.128,5,0.128,15,0.01,36,0.299,46,0.142,47,0.217,48,0.008,49,0.008,52,2.525,63,1.154,76,2.198,78,2.274,79,2.35,80,2.518,81,2.518,82,2.35,83,3.466,84,3.466,91,5.49,100,3.168,101,2.518,102,2.518,104,2.611,337,2.937,338,2.069,433,2.202,761,5.556,789,5.407,790,4.799,807,4.799,808,4.799,809,4.799,810,5.461,811,5.461,812,4.799,813,5.461]],["title/injectables/LanguagesService.html",[218,1.179,789,2.632]],["body/injectables/LanguagesService.html",[3,0.094,4,0.084,5,0.084,7,0.248,10,1.665,14,0.531,15,0.011,22,0.728,24,1.534,36,0.27,41,1.319,46,0.094,47,0.143,48,0.006,49,0.006,54,1.599,62,2.401,63,0.758,74,1.895,133,2.902,134,1.691,147,1.656,148,1.333,149,1.487,150,2.51,177,2.164,181,1.928,183,2.051,187,1.471,218,1.432,219,1.598,221,1.655,245,2.446,259,3.406,324,1.049,338,1.36,348,3.57,370,1.93,372,2.015,373,1.655,375,2.11,403,2.866,407,2.866,429,4.346,432,2.339,433,3.329,601,3.173,602,3.576,613,3.195,734,2.015,742,2.015,760,3.823,763,2.866,764,3.371,765,2.905,766,4.545,775,3.371,784,3.041,785,5.346,789,3.195,812,3.153,814,3.153,815,3.589,816,3.589,817,4.545,818,3.589,819,3.589,820,3.589,821,3.589,822,3.589,823,3.153,824,4.865,825,3.153,826,3.589,827,3.589,828,3.589,829,3.589,830,3.589,831,3.589,832,2.652,833,6.066,834,2.652,835,3.589,836,3.589,837,2.652,838,3.589]],["title/entities/Like.html",[0,1.847]],["body/entities/Like.html",[0,2.332,2,2.527,3,0.138,4,0.124,5,0.124,7,0.365,8,1.108,10,1.523,13,2.641,14,0.559,15,0.011,17,1.255,22,0.735,24,1.311,25,3.822,29,2.302,36,0.273,41,1.943,42,2.624,46,0.138,47,0.21,48,0.008,49,0.008,286,4.654,288,5.376,289,4.654,295,5.12,839,4.645,840,5.287,841,6.731,842,5.287,843,6.731,844,5.287,845,5.287]],["title/classes/LoginDto.html",[47,0.169,152,2.945]],["body/classes/LoginDto.html",[3,0.146,4,0.132,5,0.132,7,0.388,8,1.151,14,0.631,15,0.01,16,1.371,17,1.184,22,0.694,36,0.207,46,0.146,47,0.223,48,0.008,49,0.008,67,1.124,152,4.834,185,1.358,192,2.42,247,3.919,267,4.558,296,2.76,307,2.649,324,2.044,513,5.584,846,4.934,847,5.615,848,5.615]],["title/modules/MailingModule.html",[76,1.246,92,2.776]],["body/modules/MailingModule.html",[3,0.128,4,0.115,5,0.115,12,3.039,15,0.011,36,0.297,46,0.128,47,0.196,48,0.008,49,0.008,63,1.04,76,2.092,78,2.049,79,2.118,80,2.269,81,2.269,82,2.118,83,3.3,84,3.3,92,5.36,100,2.963,101,2.269,102,2.269,104,3.072,107,5.133,108,3.039,110,3.207,183,1.521,205,5.246,211,3.93,217,3.93,227,5.622,570,3.039,849,4.324,850,4.324,851,4.324,852,4.921,853,4.921,854,5.133,855,3.93,856,6.427,857,4.921,858,4.921,859,4.921,860,4.921,861,4.921,862,4.921,863,4.921,864,4.921,865,4.921,866,3.93,867,4.921,868,4.324,869,4.921,870,4.921,871,3.93,872,4.921]],["title/injectables/MailingService.html",[218,1.179,227,2.776]],["body/injectables/MailingService.html",[3,0.123,4,0.111,5,0.111,7,0.326,14,0.472,15,0.011,16,1.242,22,0.62,36,0.275,46,0.183,47,0.187,48,0.007,49,0.007,54,1.93,62,1.497,63,0.995,74,1.269,133,2.427,137,4.386,147,1.47,148,1.183,149,1.319,165,3.763,166,3.257,172,2.338,173,1.785,177,1.68,181,1.985,187,1.34,218,1.729,219,2.097,227,4.07,247,2.985,467,3.857,728,3.763,854,3.763,855,3.763,868,5.487,871,3.763,873,3.763,874,6.245,875,4.711,876,7.977,877,4.711,878,6.245,879,7.46,880,4.711,881,3.257,882,3.763,883,4.711,884,3.763,885,4.139,886,4.711,887,4.139,888,4.711,889,4.711,890,4.711,891,3.763,892,4.139,893,4.139,894,4.139,895,4.711,896,4.711,897,4.711,898,4.711,899,6.245,900,4.139,901,4.711,902,4.711,903,4.711,904,4.711,905,4.711,906,4.711,907,4.711,908,4.711]],["title/injectables/PayloadFromTokenPipe.html",[198,2.776,218,1.179]],["body/injectables/PayloadFromTokenPipe.html",[3,0.132,4,0.119,5,0.119,7,0.35,14,0.494,15,0.011,16,1.16,22,0.65,36,0.267,46,0.132,47,0.201,48,0.008,49,0.008,54,2.022,62,1.608,63,1.069,74,1.954,133,2.512,139,3.519,147,1.54,148,1.239,149,1.382,150,1.804,172,2.511,173,1.916,181,1.608,187,1.439,198,4.264,204,3.497,218,1.811,219,2.252,226,6.497,239,2.511,240,3.738,241,2.84,329,4.459,604,3.377,723,4.445,731,3.738,734,2.84,740,4.445,742,2.84,743,2.974,909,6.373,910,4.04,911,4.264,912,5.058,913,6.543,914,6.373,915,6.738,916,5.058,917,5.749]],["title/entities/Place.html",[0,1.476,29,1.148]],["body/entities/Place.html",[0,1.435,1,4.081,2,1.276,3,0.07,4,0.063,5,0.063,7,0.351,8,0.682,9,3.137,10,1.044,13,2.027,14,0.643,15,0.011,16,1.05,17,1.396,18,2.731,22,0.818,24,1.495,25,2.622,29,1.542,30,3.512,36,0.261,37,4.233,39,3.958,40,2.865,41,0.981,42,1.325,46,0.07,47,0.106,48,0.005,49,0.005,71,1.759,128,2.114,274,3.528,277,2.852,279,2.309,281,3.215,282,4.04,283,3.062,286,3.512,289,4.536,295,3.958,296,2.147,324,1.485,325,3.31,381,3.512,393,3.641,408,3.537,442,2.485,443,1.911,450,3.31,453,2.986,454,3.137,456,3.137,463,2.852,572,3.136,573,2.737,588,1.569,589,1.499,590,1.569,591,1.499,918,2.345,919,4.057,920,4.057,921,3.512,922,3.754,923,3.754,924,3.754,925,4.848,926,4.892,927,2.669,928,4.144,929,2.669,930,4.144,931,2.669,932,2.669,933,4.144,934,2.669,935,1.972,936,2.669,937,2.669,938,2.669,939,2.669,940,2.669,941,2.669,942,2.669,943,4.144,944,2.669,945,3.641,946,2.669,947,2.669,948,2.669,949,2.345,950,2.669,951,2.669,952,2.669,953,4.144,954,2.669,955,2.669,956,2.669,957,3.641,958,1.972,959,1.435,960,2.669,961,2.345,962,2.7,963,2.669]],["title/controllers/PlaceCategoriesController.html",[50,1.566,964,3.149]],["body/controllers/PlaceCategoriesController.html",[3,0.078,4,0.07,5,0.07,7,0.206,10,1.705,14,0.629,15,0.011,16,0.722,17,0.922,22,0.54,24,1.631,29,2.06,36,0.24,46,0.078,47,0.119,48,0.005,49,0.005,50,1.096,52,1.096,54,1.394,56,3.055,62,1.729,63,0.63,64,3.262,65,3.262,66,1.603,67,0.596,69,2.926,71,2.692,74,1.755,75,4.03,122,4.194,128,0.761,131,1.674,133,2.599,134,2.13,147,1.28,148,1.348,149,1.149,150,1.609,158,3.055,159,2.533,163,2.786,173,1.129,177,1.941,181,1.433,183,1.394,187,0.848,221,1.374,370,2.425,373,1.374,433,2.87,436,4.89,437,2.701,441,4.483,456,3.361,458,2.08,504,4.412,572,1.425,601,2.601,609,2.425,619,1.943,620,1.841,621,4.246,623,1.943,628,2.786,662,2.939,674,2.061,675,2.061,764,3.545,765,1.674,769,2.203,775,1.943,791,3.333,798,2.381,801,2.381,802,3.118,964,3.333,965,2.619,966,3.963,967,1.943,968,2.981,969,2.981,970,5.066,971,2.981,972,2.981,973,2.061,974,3.602,975,4.025,976,2.381,977,2.381,978,2.981,979,2.981,980,2.381,981,2.981,982,2.619,983,2.981,984,2.381,985,3.545,986,2.619,987,3.118,988,4.845,989,2.061,990,2.619,991,2.981,992,4.345,993,2.981,994,2.981,995,2.981,996,2.981,997,2.981,998,2.619,999,3.761,1000,2.981,1001,2.981]],["title/modules/PlaceCategoriesModule.html",[76,1.246,93,2.945]],["body/modules/PlaceCategoriesModule.html",[3,0.139,4,0.125,5,0.125,15,0.01,29,1.822,36,0.304,46,0.139,47,0.212,48,0.008,49,0.008,52,2.486,63,1.126,76,2.173,78,2.219,79,2.294,80,2.457,81,2.457,82,2.294,83,3.427,84,2.457,93,5.862,98,4.849,100,3.119,101,2.457,102,2.457,104,3.234,115,3.939,122,3.685,337,2.866,338,2.019,437,2.373,572,2.548,591,2.993,964,5.493,985,5.374,986,4.683,1002,4.683,1003,5.33,1004,4.683,1005,5.33,1006,5.33,1007,3.473,1008,5.33]],["title/injectables/PlaceCategoriesService.html",[218,1.179,985,2.776]],["body/injectables/PlaceCategoriesService.html",[3,0.087,4,0.078,5,0.078,7,0.23,10,1.557,14,0.483,15,0.011,22,0.636,24,1.599,29,1.318,36,0.279,41,1.222,46,0.087,47,0.132,48,0.006,49,0.006,54,1.512,62,1.845,63,0.702,74,1.838,122,4.718,128,0.848,133,2.677,134,1.6,147,1.507,148,1.213,149,1.353,150,2.071,177,2.434,181,2.035,183,1.794,187,1.392,218,1.354,219,1.48,221,2.256,245,1.341,259,1.867,324,0.972,338,1.26,348,3.443,370,2.631,372,1.867,373,1.533,433,1.341,436,4.809,437,3.038,441,2.457,442,2.426,504,4.74,572,3.528,579,2.921,591,1.867,601,2.339,613,2.054,747,2.256,764,3.189,775,3.189,784,1.955,824,3.383,834,2.457,837,2.457,959,1.788,967,3.189,973,3.383,975,3.586,985,3.189,987,3.383,989,2.299,998,2.921,999,3.383,1007,2.167,1009,2.921,1010,3.325,1011,4.144,1012,3.325,1013,4.299,1014,3.325,1015,3.325,1016,3.325,1017,2.656,1018,2.921,1019,2.656,1020,2.457,1021,3.325,1022,3.325,1023,3.908,1024,4.893,1025,3.325,1026,3.325,1027,2.656,1028,3.908,1029,3.325,1030,4.893,1031,4.893,1032,4.893,1033,4.299,1034,6.403,1035,4.299,1036,4.299,1037,4.299,1038,2.457,1039,3.325,1040,2.656]],["title/entities/PlaceCategory.html",[0,1.476,572,2.037]],["body/entities/PlaceCategory.html",[0,2.212,2,2.329,3,0.127,4,0.114,5,0.114,7,0.337,8,1.051,10,1.465,12,4.4,14,0.593,15,0.011,17,1.281,18,2.62,22,0.75,24,1.472,25,3.676,29,2.169,33,3.369,36,0.262,37,3.434,38,4.415,40,4.415,41,1.791,43,3.01,46,0.127,47,0.194,48,0.008,49,0.008,128,1.629,324,2.082,437,3.494,442,3.189,572,3.053,590,4.614,711,3.892,925,4.719,926,4.415,935,3.601,959,2.62,1041,4.281,1042,4.873,1043,4.281,1044,4.873,1045,5.611,1046,4.873,1047,4.873,1048,4.281,1049,5.1]],["title/classes/PlaceCategoryDto.html",[47,0.169,975,2.632]],["body/classes/PlaceCategoryDto.html",[3,0.113,4,0.102,5,0.102,7,0.299,8,0.972,10,1.551,14,0.628,15,0.011,16,1.275,17,1.137,22,0.716,24,1.404,29,1.942,36,0.278,46,0.113,47,0.235,48,0.007,49,0.007,67,0.867,128,1.105,147,1.019,148,0.82,149,0.915,185,1.047,187,1.232,192,2.291,304,3.174,305,4.284,307,2.543,322,2.675,323,2.329,324,2.37,329,3.314,437,3.359,439,3.201,441,5.328,442,2.949,466,3.174,478,3.877,572,2.071,591,2.432,911,4.375,959,2.329,962,3.846,975,3.646,1007,2.823,1050,5.575,1051,5.902,1052,4.331,1053,3.201,1054,3.806,1055,5.186,1056,4.331,1057,2.994,1058,4.331,1059,3.46]],["title/classes/PlaceDto.html",[47,0.169,1060,3.149]],["body/classes/PlaceDto.html",[3,0.058,4,0.052,5,0.052,7,0.153,8,0.588,9,3.186,10,1.164,13,1.105,14,0.649,15,0.011,16,1.331,17,1.344,22,0.793,24,1.425,29,2.232,36,0.259,46,0.058,47,0.142,48,0.004,49,0.004,67,0.443,71,2.933,128,1.444,147,0.521,148,0.419,149,0.949,183,1.105,185,0.535,187,0.63,192,2.479,274,1.922,277,2.523,279,2.833,281,3.945,304,1.922,305,3.863,307,0.839,310,2.471,314,4.705,322,1.368,323,1.191,324,1.655,329,3.178,381,3.107,416,4.492,442,1.354,450,3.688,453,2.642,454,3.496,456,3.496,458,1.648,460,2.641,463,2.523,466,2.774,467,2.208,478,3.936,572,1.059,573,1.059,588,1.302,589,1.243,590,1.302,591,1.243,747,1.021,754,1.636,911,4.149,919,3.589,920,5.085,921,3.913,922,3.321,923,3.321,924,3.321,959,1.191,962,3.361,975,3.496,987,1.531,1050,1.636,1053,1.636,1060,2.641,1061,1.946,1062,3.949,1063,3.574,1064,1.946,1065,2.214,1066,3.14,1067,2.214,1068,2.214,1069,2.214,1070,2.214,1071,2.214,1072,2.214,1073,2.214,1074,2.214,1075,1.946,1076,2.214,1077,3.574,1078,2.214,1079,2.214,1080,4.532,1081,2.214,1082,2.214,1083,2.214,1084,1.946,1085,2.214,1086,3.496,1087,1.946,1088,2.214,1089,3.14,1090,2.214,1091,2.214,1092,1.636,1093,1.531,1094,1.531,1095,1.769,1096,3.589,1097,1.946,1098,1.946,1099,1.946,1100,2.214,1101,2.214,1102,2.214]],["title/classes/PlaceSlugDto.html",[47,0.169,1103,3.149]],["body/classes/PlaceSlugDto.html",[3,0.146,4,0.131,5,0.131,7,0.387,8,1.149,10,1.684,14,0.618,15,0.01,16,1.274,17,1.182,22,0.693,24,1.55,29,2.144,36,0.206,46,0.146,47,0.223,48,0.008,49,0.008,67,1.12,71,2.417,185,1.354,192,2.417,307,2.121,324,1.637,416,3.292,453,4.471,466,3.753,467,4.311,1103,5.158,1104,6.681,1105,4.92,1106,5.6,1107,5.6]],["title/entities/PlaceType.html",[0,1.476,573,2.037]],["body/entities/PlaceType.html",[0,2.146,2,2.226,3,0.121,4,0.109,5,0.109,7,0.322,8,1.02,10,1.432,12,4.302,14,0.6,15,0.011,17,1.31,18,2.504,22,0.768,24,1.446,25,3.595,29,2.141,30,3.219,33,3.219,36,0.256,37,3.745,38,4.284,39,4.284,41,1.711,43,2.876,46,0.121,47,0.185,48,0.007,49,0.007,128,1.581,279,2.498,282,3.034,296,1.613,324,2.036,437,3.54,442,3.161,443,2.857,474,5.147,573,2.962,588,4.674,711,3.719,925,4.579,926,4.284,959,2.504,1043,4.091,1048,4.091,1049,4.949,1108,4.091,1109,4.656,1110,4.656,1111,4.656,1112,5.445,1113,4.656,1114,4.656]],["title/classes/PlaceTypeDto.html",[47,0.169,1086,2.632]],["body/classes/PlaceTypeDto.html",[3,0.106,4,0.095,5,0.095,7,0.28,8,0.929,10,1.516,14,0.655,15,0.011,16,1.252,17,1.188,22,0.732,24,1.365,29,2.055,36,0.271,46,0.106,47,0.224,48,0.007,49,0.007,67,0.812,128,1.035,147,0.955,148,0.769,149,0.857,185,0.981,187,1.154,192,2.343,279,2.828,296,1.954,304,3.034,305,4.209,307,2.657,322,2.506,323,2.182,324,2.37,329,3.169,437,3.397,442,2.89,443,2.602,466,3.034,473,2.999,474,5.447,478,3.771,573,1.94,589,2.278,747,1.871,754,2.999,911,4.228,959,2.182,962,3.677,1007,2.644,1053,2.999,1054,3.565,1055,3.565,1059,3.241,1086,3.485,1092,5.639,1096,3.241,1115,5.643,1116,4.057,1117,4.057,1118,4.057]],["title/controllers/PlaceTypesController.html",[50,1.566,1119,3.149]],["body/controllers/PlaceTypesController.html",[3,0.075,4,0.068,5,0.068,7,0.199,10,1.696,14,0.642,15,0.011,17,0.904,22,0.529,24,1.645,29,2.043,36,0.249,46,0.075,47,0.115,48,0.005,49,0.005,50,1.061,52,1.061,54,1.36,56,2.995,62,1.695,63,0.61,64,3.208,65,3.208,66,1.552,67,0.577,69,2.868,71,2.709,74,1.73,75,3.98,112,4.125,128,0.736,131,1.62,133,2.576,134,2.1,147,1.255,148,1.333,149,1.127,150,1.57,158,2.995,159,2.471,163,2.718,172,1.432,173,1.093,177,1.903,181,1.399,183,1.36,370,2.366,373,1.331,433,2.838,437,2.656,458,2.029,471,4.846,504,4.46,573,1.38,601,2.55,609,2.366,619,1.881,620,1.782,621,4.729,623,1.881,628,2.718,662,2.868,674,1.995,675,1.995,764,3.476,765,1.62,769,2.133,775,1.881,791,3.252,798,2.305,801,2.305,802,3.042,967,1.881,970,5.002,973,1.995,974,3.515,976,2.305,977,2.305,980,2.305,982,2.536,984,2.305,988,4.765,989,1.995,990,2.536,992,4.765,1086,3.967,1093,3.042,1119,3.252,1120,2.536,1121,2.536,1122,2.886,1123,2.886,1124,3.515,1125,3.866,1126,2.886,1127,2.886,1128,2.886,1129,5.966,1130,2.886,1131,2.886,1132,2.886,1133,2.886,1134,3.476,1135,2.536,1136,3.515,1137,3.042,1138,2.886,1139,2.886,1140,2.886,1141,2.886,1142,2.886,1143,2.886,1144,2.886,1145,2.886,1146,2.536,1147,3.687,1148,2.886,1149,2.886]],["title/modules/PlaceTypesModule.html",[76,1.246,94,2.945]],["body/modules/PlaceTypesModule.html",[3,0.139,4,0.125,5,0.125,15,0.01,29,1.822,36,0.304,46,0.139,47,0.212,48,0.008,49,0.008,52,2.486,63,1.126,76,2.173,78,2.219,79,2.294,80,2.457,81,2.457,82,2.294,83,3.427,84,2.457,94,5.862,98,4.849,100,3.119,101,2.457,102,2.457,104,3.234,112,3.685,115,3.939,337,2.866,338,2.019,437,2.373,573,2.548,589,2.993,1007,3.473,1119,5.493,1134,5.374,1135,4.683,1150,4.683,1151,4.683,1152,5.33,1153,5.33,1154,5.33,1155,5.33]],["title/injectables/PlaceTypesService.html",[218,1.179,1134,2.776]],["body/injectables/PlaceTypesService.html",[3,0.084,4,0.076,5,0.076,7,0.223,10,1.576,14,0.509,15,0.011,22,0.626,24,1.603,29,1.288,36,0.276,41,1.184,46,0.084,47,0.128,48,0.006,49,0.006,54,1.478,62,1.812,63,0.681,74,1.814,112,4.657,128,0.822,133,2.655,134,1.864,147,1.484,148,1.195,149,1.332,150,2.033,177,2.403,181,2.004,183,1.949,187,1.36,218,1.323,219,1.435,221,2.205,245,1.299,259,1.809,324,0.942,338,1.221,348,3.391,370,2.571,372,1.809,373,1.486,433,1.928,437,2.999,442,2.389,471,4.761,474,2.381,504,4.759,573,3.587,581,2.831,589,1.809,601,2.286,613,1.99,747,2.628,764,3.116,775,3.116,784,1.895,824,4.36,825,2.831,834,2.381,837,2.381,959,1.733,967,3.116,973,3.306,989,2.228,1007,2.1,1011,4.102,1017,2.574,1019,2.574,1020,2.381,1023,3.819,1027,2.574,1028,3.819,1033,4.201,1035,4.201,1036,4.201,1037,4.201,1038,2.381,1040,2.574,1086,3.521,1093,3.306,1121,2.831,1134,3.116,1146,2.831,1147,3.306,1156,2.831,1157,3.222,1158,3.222,1159,4.201,1160,3.222,1161,3.222,1162,3.222,1163,2.831,1164,3.222,1165,3.222,1166,2.831,1167,3.222,1168,3.222,1169,4.781,1170,3.222,1171,3.222,1172,3.222,1173,3.222,1174,4.781,1175,4.781,1176,4.781,1177,6.307,1178,3.222]],["title/controllers/PlacesController.html",[50,1.566,1179,3.149]],["body/controllers/PlacesController.html",[3,0.034,4,0.031,5,0.031,7,0.091,10,1.691,12,2.845,13,1.71,14,0.636,15,0.011,16,0.67,17,1.042,22,0.611,24,1.638,29,1.608,36,0.265,42,0.651,46,0.034,47,0.052,48,0.003,49,0.003,50,0.482,52,0.482,54,0.71,56,3.454,62,1.955,63,0.277,64,3.396,65,3.396,66,0.705,67,0.262,69,3.308,71,2.766,74,1.657,75,4.225,128,0.782,131,0.736,132,3.065,133,2.745,134,1.622,139,1.648,147,1.405,148,1.4,149,1.261,150,2.056,158,2.586,159,1.29,163,1.893,173,0.87,177,2.352,181,1.832,183,1.71,187,0.373,198,0.854,199,0.81,208,1.834,221,1.059,239,3.603,241,0.736,245,1.236,246,1.521,274,3.308,299,3.404,325,0.854,329,2.586,334,1.997,343,2.693,352,6.244,356,3.433,367,4.559,369,1.802,373,0.604,374,1.834,375,0.771,381,1.588,388,1.152,433,2.124,446,3.606,453,3.253,458,2.124,494,0.677,499,0.736,504,3.617,604,3.929,614,2.893,619,0.854,620,0.81,621,4.115,623,0.854,628,3.561,637,0.969,638,1.047,639,1.047,640,0.906,641,1.047,662,3.001,672,1.834,673,2.018,702,2.94,765,3.107,769,1.697,784,0.771,792,1.047,802,2.545,967,0.854,970,3.893,974,1.047,976,1.047,977,1.047,984,1.047,988,3.343,989,0.906,992,2.448,1060,1.697,1094,0.906,1103,2.265,1136,2.448,1179,1.697,1180,1.152,1181,3.065,1182,3.065,1183,2.693,1184,3.065,1185,1.834,1186,3.065,1187,3.065,1188,3.234,1189,3.065,1190,1.311,1191,3.681,1192,4.185,1193,1.311,1194,2.297,1195,1.311,1196,1.311,1197,1.311,1198,1.311,1199,2.297,1200,1.311,1201,1.311,1202,1.311,1203,1.311,1204,2.297,1205,1.311,1206,1.311,1207,1.311,1208,1.311,1209,2.297,1210,1.311,1211,1.311,1212,1.311,1213,1.311,1214,1.311,1215,1.311,1216,1.311,1217,1.311,1218,1.311,1219,1.311,1220,1.311,1221,1.311,1222,2.265,1223,1.311,1224,1.311,1225,1.311,1226,2.297,1227,1.311,1228,1.311,1229,1.311,1230,1.311,1231,1.311,1232,1.311,1233,2.297,1234,1.311,1235,1.311,1236,1.311,1237,1.311,1238,1.311,1239,3.825,1240,1.152,1241,1.311,1242,1.311,1243,1.311,1244,1.311,1245,1.311,1246,1.311,1247,1.311,1248,4.606,1249,1.152,1250,1.997,1251,1.152,1252,1.311,1253,3.065,1254,1.311,1255,2.448,1256,1.152,1257,1.311,1258,1.311,1259,1.311,1260,1.311,1261,1.311,1262,1.311,1263,1.311,1264,1.311,1265,1.311,1266,1.311,1267,2.297,1268,1.311,1269,1.311,1270,1.311,1271,1.311,1272,1.311,1273,1.311,1274,3.065,1275,1.311,1276,1.311,1277,2.297,1278,1.311,1279,1.311,1280,2.297,1281,1.311,1282,1.311,1283,1.152,1284,2.297,1285,1.311,1286,3.065,1287,1.311,1288,1.311,1289,1.311,1290,1.311,1291,1.311,1292,1.152,1293,1.311,1294,1.311,1295,1.311,1296,3.065,1297,1.311,1298,3.681,1299,3.681,1300,2.297,1301,1.834,1302,2.297,1303,1.311,1304,1.311,1305,2.297,1306,1.311]],["title/modules/PlacesModule.html",[76,1.246,95,2.945]],["body/modules/PlacesModule.html",[3,0.125,4,0.112,5,0.112,15,0.011,29,1.9,36,0.314,46,0.125,47,0.19,48,0.007,49,0.007,52,2.317,63,1.01,76,2.063,78,1.99,79,2.057,80,2.203,81,2.203,82,2.057,83,3.253,84,2.203,88,5.219,90,5.219,95,5.939,98,4.709,100,2.907,101,2.203,102,2.203,104,3.014,115,3.532,117,4.199,124,4.199,337,2.57,338,1.81,572,3.014,573,3.014,588,2.81,589,2.683,590,2.81,591,2.683,1094,3.304,1095,3.817,1179,5.214,1250,5.219,1251,4.199,1307,4.199,1308,4.199,1309,4.779,1310,4.779,1311,4.779,1312,4.779]],["title/injectables/PlacesService.html",[218,1.179,1250,2.776]],["body/injectables/PlacesService.html",[1,3.192,3,0.033,4,0.03,5,0.03,7,0.088,9,0.784,10,1.411,13,1.507,14,0.518,15,0.011,16,0.723,22,0.66,24,1.553,29,1.757,36,0.235,41,0.467,42,0.63,46,0.033,47,0.05,48,0.003,49,0.003,54,0.69,62,2.074,63,0.268,71,0.44,74,1.79,128,1.391,133,2.762,134,0.73,142,0.878,143,0.878,147,1.504,148,1.21,149,1.35,150,2.101,154,0.828,177,2.714,181,2.311,183,1.684,187,0.635,218,0.618,219,0.565,221,3.53,234,3.03,239,1.786,241,0.713,245,2.09,246,2.421,259,1.679,266,1.116,278,0.713,279,1.205,296,0.774,324,0.371,325,2.672,329,2.302,338,0.481,348,3.356,354,3.895,358,5.483,363,1.014,369,2.867,370,1.608,371,0.938,372,0.713,373,0.585,375,0.747,379,2.627,383,1.014,384,3.972,385,1.014,408,0.784,442,1.712,446,4.405,450,0.828,453,3.048,454,0.784,456,1.847,463,0.713,478,1.201,504,4.615,572,0.607,573,2.478,574,1.651,577,1.962,588,0.747,589,0.713,590,0.747,591,0.713,601,1.068,604,1.543,609,1.201,624,3.012,640,0.878,645,0.938,702,1.014,734,0.713,739,1.544,742,0.713,745,0.938,747,2.513,765,0.713,832,2.209,921,1.544,922,0.938,923,0.938,924,1.651,945,1.116,958,0.938,966,3.972,967,1.455,973,1.544,1011,2.738,1013,2.627,1017,1.014,1018,1.116,1019,2.388,1020,2.209,1023,1.014,1027,2.388,1028,1.014,1038,1.651,1040,1.014,1045,1.116,1062,1.116,1094,0.878,1095,1.014,1112,1.116,1159,2.627,1163,1.116,1183,1.962,1188,3.162,1239,4.744,1250,1.455,1255,1.784,1292,1.116,1313,1.116,1314,2.233,1315,2.233,1316,2.233,1317,3.599,1318,2.99,1319,2.99,1320,2.233,1321,2.99,1322,2.233,1323,2.233,1324,2.233,1325,1.27,1326,2.99,1327,1.27,1328,2.233,1329,2.233,1330,1.27,1331,2.233,1332,1.27,1333,2.233,1334,1.27,1335,2.233,1336,1.27,1337,1.27,1338,1.27,1339,1.27,1340,3.162,1341,1.27,1342,1.27,1343,1.27,1344,1.27,1345,1.27,1346,2.233,1347,1.27,1348,1.27,1349,1.27,1350,1.27,1351,2.233,1352,1.27,1353,2.233,1354,1.27,1355,2.233,1356,1.27,1357,1.27,1358,1.27,1359,1.27,1360,1.27,1361,2.99,1362,1.27,1363,2.99,1364,1.27,1365,1.27,1366,1.27,1367,1.27,1368,1.27,1369,1.27,1370,1.27,1371,1.27,1372,1.27,1373,1.27,1374,2.99,1375,1.27,1376,2.233,1377,1.27,1378,2.233,1379,1.27,1380,1.27,1381,3.599,1382,2.233,1383,1.27,1384,1.784,1385,1.27,1386,1.27,1387,2.233,1388,4.1,1389,2.233,1390,2.99,1391,2.233,1392,4.1,1393,2.233,1394,1.27,1395,1.27,1396,2.233,1397,1.27,1398,1.116,1399,3.599,1400,3.599,1401,2.99,1402,2.233,1403,2.233,1404,6.389,1405,1.27,1406,1.27,1407,1.27,1408,1.27,1409,3.599,1410,2.233,1411,2.233,1412,3.599,1413,2.233,1414,2.233,1415,3.599,1416,2.233,1417,2.233,1418,2.233,1419,3.599,1420,2.233,1421,2.233,1422,2.233,1423,2.233,1424,2.233,1425,2.233,1426,2.233,1427,2.233,1428,2.233,1429,1.27,1430,4.1,1431,2.99,1432,1.27,1433,1.27,1434,1.27,1435,1.116,1436,1.116,1437,1.27,1438,1.27,1439,1.27,1440,1.27,1441,1.27,1442,1.27,1443,1.27,1444,1.27,1445,1.27,1446,1.27,1447,1.27,1448,1.27,1449,1.27,1450,1.27,1451,1.27,1452,1.116,1453,1.27,1454,2.233,1455,1.27,1456,1.27,1457,1.27,1458,1.27,1459,1.27,1460,1.27,1461,1.27,1462,1.27,1463,2.233,1464,1.27,1465,1.27,1466,1.27,1467,1.27,1468,1.27,1469,1.27,1470,1.27,1471,1.27,1472,1.27,1473,1.27,1474,1.27,1475,1.27]],["title/entities/Role.html",[0,1.476,44,2.115]],["body/entities/Role.html",[0,2.308,2,2.488,3,0.136,4,0.122,5,0.122,7,0.36,8,1.097,10,1.512,13,2.533,14,0.585,15,0.011,17,1.245,18,2.798,19,4.343,20,4.343,21,5.855,22,0.73,24,1.297,25,3.794,36,0.271,37,3.583,40,4.607,41,1.912,42,2.583,44,3.307,46,0.136,47,0.207,48,0.008,49,0.008,128,1.7,148,1.392,252,5.871,272,5.322,443,3.072,494,3.794,498,3.391,499,2.922,926,4.607,935,3.846,962,4.343,1476,4.573,1477,5.204,1478,5.204,1479,5.204]],["title/classes/RoleDto.html",[47,0.169,1480,2.945]],["body/classes/RoleDto.html",[3,0.14,4,0.126,5,0.126,7,0.37,8,1.118,10,1.662,14,0.563,15,0.011,17,1.15,22,0.74,24,1.322,36,0.274,44,4.012,46,0.14,47,0.213,48,0.008,49,0.008,67,1.072,147,1.261,148,1.564,149,1.132,185,1.296,187,1.524,192,2.368,304,3.651,305,4.347,307,2.572,323,2.881,324,1.985,494,3.846,498,3.492,499,3.009,1480,4.693,1481,4.708,1482,6.789,1483,5.358,1484,4.28]],["title/controllers/RolesController.html",[50,1.566,1485,3.149]],["body/controllers/RolesController.html",[3,0.103,4,0.093,5,0.093,7,0.274,14,0.599,15,0.011,17,1.085,22,0.636,36,0.286,44,3.938,46,0.103,47,0.157,48,0.007,49,0.007,50,1.455,52,1.455,54,1.715,56,3.115,62,2.035,63,0.837,64,3.444,65,3.444,66,2.13,67,0.792,69,2.984,71,2.53,74,1.725,75,4.08,131,2.224,132,2.446,133,2.218,134,2.269,142,3.836,143,2.738,147,1.306,148,1.547,149,1.172,150,1.413,158,2.224,159,3.115,163,3.427,172,1.966,173,1.5,176,3.163,177,1.413,181,1.259,183,1.715,245,1.597,271,2.13,370,3.444,373,1.826,491,5.067,494,3.908,496,4.875,498,2.581,499,2.224,601,3.317,620,2.446,628,3.427,637,2.927,672,3.163,791,4.1,980,3.163,1136,4.432,1480,4.427,1485,4.1,1486,3.48,1487,4.875,1488,3.48,1489,3.96,1490,3.96,1491,3.96,1492,3.96,1493,3.96,1494,3.96,1495,3.96,1496,3.96,1497,3.96,1498,3.96,1499,3.96,1500,3.956,1501,3.48,1502,3.163,1503,3.96,1504,3.96,1505,3.96,1506,3.96,1507,3.96,1508,3.96,1509,3.96,1510,3.96,1511,3.96]],["title/guards/RolesGuard.html",[715,2.945,1512,3.403]],["body/guards/RolesGuard.html",[3,0.116,4,0.104,5,0.104,7,0.307,8,0.731,14,0.453,15,0.011,22,0.596,36,0.28,46,0.116,47,0.176,48,0.007,49,0.007,54,1.854,62,1.41,63,0.938,74,1.616,128,1.132,139,3.227,147,1.412,148,1.137,149,1.268,154,2.892,160,4.498,172,2.203,173,1.681,181,2.315,183,2.101,187,1.262,218,1.661,245,2.741,246,2.978,279,2.419,408,2.741,494,2.29,498,2.892,499,2.492,604,3.097,609,3.227,654,3.28,664,3.544,715,3.068,717,3.544,720,5.272,721,5.024,722,6.399,725,5.272,726,5.817,728,3.544,729,3.544,730,3.899,731,3.28,733,3.899,734,2.492,742,2.492,743,3.997,744,3.899,745,3.28,1301,5.43,1512,4.793,1513,3.899,1514,4.438,1515,7.841,1516,4.438,1517,4.438,1518,3.899,1519,4.793,1520,4.438,1521,4.438,1522,6,1523,4.438,1524,4.438,1525,4.438,1526,4.438,1527,4.438,1528,4.438,1529,4.438,1530,4.438,1531,4.438]],["title/modules/RolesModule.html",[76,1.246,96,2.776]],["body/modules/RolesModule.html",[3,0.142,4,0.128,5,0.128,15,0.01,36,0.299,44,2.711,46,0.142,47,0.217,48,0.008,49,0.008,52,2.525,63,1.154,76,2.198,78,2.274,79,2.35,80,2.518,81,2.518,82,2.35,83,3.466,84,3.466,96,5.49,100,3.168,101,2.518,102,2.518,104,2.611,337,2.937,338,2.069,1484,4.362,1485,5.556,1500,5.407,1501,4.799,1532,4.799,1533,4.799,1534,4.799,1535,5.461,1536,5.461,1537,5.461]],["title/injectables/RolesService.html",[218,1.179,1500,2.632]],["body/injectables/RolesService.html",[3,0.117,4,0.105,5,0.105,7,0.31,14,0.516,15,0.011,16,0.716,22,0.726,36,0.289,41,1.646,44,3.39,46,0.117,47,0.178,48,0.007,49,0.007,54,1.866,62,2.323,63,0.946,74,1.839,133,2.723,134,1.974,142,3.096,143,3.096,147,1.607,148,1.385,149,1.443,150,2.153,177,2.153,181,1.423,183,1.384,187,1.717,218,1.671,219,1.994,221,2.065,245,1.805,246,2.222,271,2.408,338,1.696,348,3.93,369,3.549,371,3.309,372,2.514,373,2.065,491,4.973,494,3.773,498,2.918,499,2.514,601,3.494,734,2.514,742,2.514,824,3.096,832,3.309,1484,3.576,1487,5.304,1488,5.304,1500,3.729,1502,3.576,1538,3.934,1539,4.478,1540,4.478,1541,6.037,1542,4.478,1543,4.478,1544,6.037,1545,4.478,1546,4.478,1547,4.478,1548,4.478,1549,4.478,1550,4.478,1551,4.478]],["title/classes/SearchPlaceDto.html",[47,0.169,1222,3.149]],["body/classes/SearchPlaceDto.html",[3,0.062,4,0.056,5,0.056,7,0.164,8,0.621,9,3.31,10,1.203,14,0.647,15,0.011,16,1.333,17,1.327,22,0.785,24,1.451,29,2.234,36,0.258,46,0.062,47,0.15,48,0.004,49,0.004,67,0.474,71,2.915,128,1.493,147,0.557,148,0.714,149,0.993,183,1.165,185,0.572,187,0.673,192,2.465,277,2.639,279,2.514,281,4.027,304,2.028,305,3.857,307,0.897,310,2.607,314,4.325,321,3.313,322,1.462,323,1.273,324,1.711,329,3.286,416,4.449,442,1.78,448,1.749,450,3.814,453,2.763,454,3.615,456,3.615,458,1.739,460,2.787,463,2.639,464,2.08,466,2.882,467,2.329,478,3.857,572,1.132,573,1.132,588,1.392,589,1.329,590,1.392,591,1.329,747,1.091,754,1.749,911,4.063,919,3.753,920,5.224,921,2.607,922,3.473,923,3.473,924,3.473,959,1.273,962,3.492,975,3.615,987,1.637,1050,1.749,1053,1.749,1059,1.891,1064,2.08,1066,3.313,1075,2.08,1080,4.709,1084,2.08,1086,3.615,1087,2.08,1089,3.313,1092,1.749,1093,1.637,1094,1.637,1096,3.012,1097,2.08,1098,2.08,1099,2.08,1222,2.787,1552,7.004,1553,3.771,1554,2.367,1555,2.367,1556,2.367,1557,2.367,1558,2.367,1559,2.367,1560,2.367,1561,2.367,1562,2.367,1563,2.367,1564,2.367,1565,2.367,1566,2.367,1567,2.367,1568,2.367]],["title/modules/StorageModule.html",[76,1.246,97,2.776]],["body/modules/StorageModule.html",[3,0.151,4,0.136,5,0.136,15,0.01,36,0.262,46,0.151,47,0.23,48,0.008,49,0.008,63,1.224,76,2.258,78,2.413,79,2.494,80,2.672,81,2.672,82,2.494,83,3.56,84,3.56,97,5.56,100,3.287,101,2.672,102,2.672,634,5.449,1569,5.092,1570,5.092,1571,5.092,1572,5.795,1573,5.795]],["title/injectables/StorageService.html",[218,1.179,634,2.632]],["body/injectables/StorageService.html",[3,0.085,4,0.076,5,0.149,7,0.225,8,0.793,14,0.553,15,0.011,16,1.298,22,0.747,36,0.261,46,0.085,47,0.129,48,0.006,49,0.006,54,1.488,62,2.014,63,0.688,74,1.707,108,2.01,110,2.121,133,2.453,147,1.592,148,1.281,149,1.429,172,1.615,173,2.172,177,1.718,181,2.15,183,2.189,187,0.926,205,4.896,218,1.333,219,1.449,221,3.802,245,1.942,296,1.127,369,1.913,415,5.234,467,2.01,478,1.75,538,2.25,540,2.859,556,2.25,569,1.913,609,3.408,622,5.038,634,2.975,647,6.439,721,4.683,734,2.704,742,2.704,743,2.832,1574,2.859,1575,7.082,1576,4.816,1577,4.816,1578,4.816,1579,5.733,1580,3.254,1581,4.816,1582,4.816,1583,3.254,1584,5.733,1585,4.816,1586,3.254,1587,6.764,1588,4.816,1589,3.254,1590,3.254,1591,3.254,1592,3.254,1593,4.816,1594,4.232,1595,3.254,1596,2.599,1597,2.859,1598,3.254,1599,3.254,1600,3.254,1601,3.254,1602,3.254,1603,3.254,1604,3.254,1605,7.082,1606,4.816,1607,3.254,1608,3.254,1609,3.254,1610,3.254,1611,3.254,1612,3.254,1613,3.254,1614,3.254,1615,3.254,1616,3.254,1617,3.254,1618,4.816,1619,3.254,1620,3.254,1621,3.254,1622,4.816,1623,3.254,1624,3.254,1625,3.254,1626,3.254,1627,3.254,1628,3.254,1629,3.254]],["title/classes/TokenPayloadDto.html",[47,0.169,239,2.115]],["body/classes/TokenPayloadDto.html",[3,0.146,4,0.132,5,0.132,7,0.388,8,1.151,10,1.566,14,0.602,15,0.01,16,1.119,22,0.791,24,1.361,36,0.207,44,3.779,45,4.485,46,0.146,47,0.223,48,0.008,49,0.008,147,1.322,148,1.064,149,1.186,185,1.358,187,1.597,239,3.47,247,3.64,271,4.094,304,3.76,305,4.408,323,3.02,1630,7.202,1631,4.934,1632,6.992,1633,5.615,1634,5.615]],["title/entities/Translation.html",[0,1.476,747,1.964]],["body/entities/Translation.html",[0,2.212,2,2.329,3,0.127,4,0.114,5,0.114,7,0.492,8,1.051,10,1.465,14,0.62,15,0.011,16,1.022,17,1.329,18,2.62,19,4.161,20,4.161,22,0.779,24,1.472,25,3.676,36,0.235,37,4.065,41,1.791,46,0.127,47,0.194,48,0.008,49,0.008,278,4,279,2.575,282,3.175,286,3.369,295,4.415,296,1.688,433,3.394,443,3.284,505,5.264,506,5.264,548,4.415,747,2.944,925,4.719,926,3.369,949,4.281,1635,4.281,1636,4.873,1637,6.385,1638,4.873,1639,4.873,1640,4.873,1641,4.873,1642,4.873,1643,3.892]],["title/classes/TranslationDto.html",[47,0.169,1057,2.945]],["body/classes/TranslationDto.html",[3,0.119,4,0.107,5,0.107,7,0.315,8,1.006,10,1.66,14,0.657,15,0.011,16,1.178,17,1.301,22,0.785,24,1.661,36,0.225,46,0.119,47,0.181,48,0.007,49,0.007,67,0.912,147,1.073,148,0.864,149,0.963,185,1.102,187,1.297,192,2.512,278,4.311,279,2.969,304,3.286,305,4.129,307,2.909,323,2.452,324,2.245,433,3.096,505,5.674,506,5.674,747,3.178,1057,4.225,1644,4.006,1645,6.111,1646,4.56,1647,4.56,1648,4.56,1649,4.56,1650,3.642]],["title/controllers/TranslationsController.html",[50,1.566,1651,3.149]],["body/controllers/TranslationsController.html",[3,0.085,4,0.077,5,0.077,7,0.226,10,1.684,14,0.631,15,0.011,17,1.076,22,0.631,24,1.467,36,0.261,46,0.085,47,0.13,48,0.006,49,0.006,50,1.202,52,1.202,54,1.494,56,3.567,62,2.019,63,0.691,64,3.645,65,3.645,66,1.759,67,0.654,69,3.416,71,2.61,74,1.711,75,4.431,128,0.834,131,1.836,133,2.783,134,2.077,147,1.353,148,1.284,149,1.215,150,2.266,158,2.714,159,2.714,163,3.552,172,1.623,173,1.239,176,2.612,177,2.266,181,2.019,183,1.494,373,1.508,375,1.923,458,2.229,501,5.075,611,2.873,614,4.686,619,2.131,620,2.02,621,3.747,623,2.131,628,3.552,662,2.131,747,3.474,765,3.806,784,1.923,792,2.612,802,2.261,1011,3.229,1020,2.417,1057,4.391,1185,5.073,1240,4.247,1249,2.873,1384,4.593,1651,3.572,1652,2.873,1653,3.27,1654,5.75,1655,3.27,1656,3.27,1657,3.27,1658,3.27,1659,3.27,1660,3.27,1661,4.834,1662,3.27,1663,3.27,1664,5.32,1665,3.27,1666,3.27,1667,3.27,1668,2.873,1669,3.861,1670,3.27,1671,3.27,1672,3.27,1673,3.27,1674,3.27,1675,3.27,1676,3.27,1677,3.27,1678,4.834,1679,3.27,1680,3.27,1681,3.27,1682,3.27,1683,3.27,1684,3.27,1685,3.27,1686,3.27]],["title/modules/TranslationsModule.html",[76,1.246,98,2.505]],["body/modules/TranslationsModule.html",[3,0.135,4,0.121,5,0.121,15,0.011,36,0.306,46,0.135,47,0.205,48,0.008,49,0.008,52,2.437,63,1.091,76,2.141,78,2.15,79,2.222,80,2.381,81,2.381,82,2.222,83,3.377,84,3.377,91,5.33,98,5.004,100,3.057,101,2.381,102,2.381,104,3.17,114,4.537,337,2.777,338,1.956,433,2.673,747,2.381,1011,4.878,1643,4.124,1650,4.124,1651,5.412,1668,4.537,1687,4.537,1688,4.537,1689,4.537,1690,5.163,1691,5.163,1692,5.163,1693,5.163]],["title/injectables/TranslationsService.html",[218,1.179,1011,2.392]],["body/injectables/TranslationsService.html",[3,0.062,4,0.056,5,0.056,7,0.164,8,0.622,10,1.476,14,0.494,15,0.011,16,1.242,22,0.713,24,1.553,36,0.264,41,0.872,46,0.062,47,0.094,48,0.004,49,0.004,54,1.167,62,2.081,63,0.501,74,1.763,108,1.466,110,1.546,128,0.605,133,2.818,134,0.776,147,1.469,148,1.182,149,1.319,150,1.679,173,1.783,177,2.736,181,2.226,183,2.023,187,1.075,205,4.526,218,1.046,219,1.056,221,3.491,245,1.523,278,4.115,296,1.309,338,0.899,348,3.52,363,3.017,369,2.221,372,1.332,375,1.395,403,3.017,407,1.895,433,2.639,443,2.17,478,2.031,504,2.767,505,4.613,506,5.595,518,1.895,550,1.64,569,1.395,609,3.356,614,1.64,721,3.966,734,1.332,739,2.612,742,1.332,747,3.133,752,2.085,763,1.895,765,2.643,784,2.221,789,4.044,817,4.136,823,2.085,832,1.754,970,3.478,1011,2.121,1038,1.754,1125,2.085,1185,4.286,1340,3.319,1384,1.895,1594,3.319,1596,3.017,1643,1.895,1650,1.895,1664,4.526,1669,1.895,1694,2.085,1695,4.707,1696,4.707,1697,3.778,1698,5.366,1699,4.715,1700,2.373,1701,3.778,1702,3.778,1703,2.373,1704,2.373,1705,3.778,1706,2.373,1707,2.373,1708,2.373,1709,2.373,1710,5.366,1711,5.366,1712,2.373,1713,3.778,1714,6.241,1715,2.373,1716,2.373,1717,3.778,1718,4.707,1719,2.373,1720,2.373,1721,2.085,1722,2.373,1723,2.373,1724,2.373,1725,2.373,1726,2.373,1727,2.373,1728,3.778,1729,2.373,1730,2.373,1731,2.373,1732,2.373,1733,2.373,1734,2.373,1735,2.373,1736,2.373,1737,2.373,1738,2.373,1739,2.373,1740,2.373,1741,2.373,1742,2.373,1743,2.373,1744,2.373,1745,2.373,1746,2.373,1747,2.373,1748,2.373,1749,2.373,1750,2.373,1751,2.373,1752,3.778,1753,2.373,1754,2.373,1755,2.373,1756,2.373,1757,2.373,1758,2.373,1759,2.373,1760,2.373,1761,2.373,1762,2.373,1763,2.373,1764,2.373,1765,2.373,1766,2.373,1767,2.373]],["title/classes/UpdateCommentDto.html",[47,0.169,367,2.945]],["body/classes/UpdateCommentDto.html",[3,0.16,4,0.144,5,0.144,7,0.424,8,1.215,14,0.557,15,0.01,16,1.181,17,1.039,22,0.609,36,0.226,46,0.16,47,0.244,48,0.009,49,0.009,134,2.006,185,1.483,278,4.445,307,2.324,356,5.353,367,5.103,374,4.9,410,4.9,424,3.969,425,4.534,1768,5.391,1769,6.135]],["title/classes/UpdateLanguageDto.html",[47,0.169,785,2.945]],["body/classes/UpdateLanguageDto.html",[3,0.168,4,0.151,5,0.151,15,0.01,36,0.279,46,0.168,47,0.256,48,0.009,49,0.009,67,1.287,134,2.103,185,1.555,424,3.459,429,3.973,431,5.138,760,4.754,785,5.249,1770,5.652,1771,4.192,1772,6.433]],["title/classes/UpdatePlaceCategoryDto.html",[47,0.169,999,2.945]],["body/classes/UpdatePlaceCategoryDto.html",[3,0.166,4,0.149,5,0.149,15,0.01,29,2.033,36,0.278,46,0.166,47,0.253,48,0.009,49,0.009,67,1.275,134,2.083,185,1.54,424,3.426,436,4.152,437,2.837,439,4.708,987,4.405,999,5.219,1771,4.152,1773,5.598,1774,6.371]],["title/classes/UpdatePlaceDto.html",[47,0.169,1239,2.945]],["body/classes/UpdatePlaceDto.html",[3,0.103,4,0.093,5,0.093,7,0.274,8,0.915,9,3.96,10,0.816,14,0.629,15,0.01,16,1.334,17,1.384,22,0.811,24,1.475,29,2.173,36,0.205,46,0.103,47,0.158,48,0.007,49,0.007,67,0.794,71,2.929,128,1.418,134,1.298,149,1.174,185,0.959,192,1.766,279,2.8,296,1.924,324,1.874,416,4.804,419,2.586,424,2.988,425,5.961,443,2.956,446,5.432,448,2.933,449,4.882,450,4.178,451,4.882,452,4.882,453,3.267,454,3.96,456,2.451,457,4.882,458,2.562,460,2.933,463,2.228,466,2.988,467,2.451,1239,3.841,1255,3.17,1699,4.882,1775,4.882,1776,6.411,1777,5.556,1778,3.968,1779,3.968,1780,3.968,1781,3.968,1782,3.968,1783,3.968,1784,3.968,1785,3.968,1786,3.968,1787,3.968]],["title/classes/UpdatePlaceTypeDto.html",[47,0.169,1147,2.945]],["body/classes/UpdatePlaceTypeDto.html",[3,0.166,4,0.149,5,0.149,15,0.01,29,2.033,36,0.278,46,0.166,47,0.253,48,0.009,49,0.009,67,1.275,134,2.083,185,1.54,424,3.426,437,2.837,471,4.152,473,4.708,1093,4.405,1147,5.219,1771,4.152,1788,5.598,1789,6.371]],["title/classes/UpdateRoleDto.html",[47,0.169,1790,3.403]],["body/classes/UpdateRoleDto.html",[3,0.168,4,0.151,5,0.151,15,0.01,36,0.279,46,0.168,47,0.256,48,0.009,49,0.009,67,1.287,134,2.103,185,1.555,424,3.459,491,4.192,493,5.138,1502,5.138,1771,4.192,1790,6.064,1791,5.652,1792,6.433]],["title/classes/UpdateTranslationDto.html",[47,0.169,1664,2.945]],["body/classes/UpdateTranslationDto.html",[3,0.168,4,0.151,5,0.151,15,0.01,36,0.279,46,0.168,47,0.256,48,0.009,49,0.009,67,1.287,134,2.103,185,1.555,424,3.459,501,4.447,503,5.138,1664,5.249,1669,5.138,1771,4.192,1793,5.652,1794,6.433]],["title/classes/UpdateUserDto.html",[47,0.169,1795,2.945]],["body/classes/UpdateUserDto.html",[3,0.168,4,0.151,5,0.151,15,0.01,36,0.279,46,0.168,47,0.256,48,0.009,49,0.009,67,1.287,134,2.103,137,3.782,166,4.447,185,1.555,424,3.459,512,5.138,1771,4.192,1795,5.249,1796,5.652,1797,6.433]],["title/entities/User.html",[0,1.476,13,1.317]],["body/entities/User.html",[0,1.689,1,4.334,2,1.582,3,0.086,4,0.078,5,0.078,7,0.229,8,0.803,10,1.19,12,3.576,13,1.507,14,0.632,15,0.011,16,1.21,17,1.378,18,3.435,19,4.927,20,4.643,22,0.808,24,0.949,25,2.988,29,1.919,30,4.416,33,2.287,36,0.271,37,3.962,38,3.37,39,4.708,40,3.37,41,1.216,43,2.043,44,3.536,45,2.642,46,0.086,47,0.132,48,0.006,49,0.006,128,0.844,247,2.767,267,3.113,271,3.113,274,3.831,277,3.251,279,1.966,281,2.737,282,3.177,283,3.603,289,3.37,296,1.689,381,4.002,386,4.278,387,4.278,395,4.283,442,2.699,443,2.248,463,3.251,700,4.283,921,4.002,935,2.445,957,4.283,958,2.445,959,1.779,961,2.907,1049,3.894,1398,4.283,1452,4.283,1798,2.907,1799,4.624,1800,4.875,1801,3.308,1802,3.308,1803,3.308,1804,3.308,1805,7.125,1806,3.308,1807,3.308,1808,3.308,1809,3.308,1810,3.308,1811,3.308,1812,3.308,1813,3.308,1814,3.308,1815,3.308,1816,3.308,1817,3.308,1818,3.308]],["title/classes/UserDto.html",[47,0.169,881,2.945]],["body/classes/UserDto.html",[1,4.142,3,0.095,4,0.086,5,0.086,7,0.253,8,0.863,10,1.457,13,1.894,14,0.657,15,0.011,16,1.335,17,1.34,22,0.797,24,1.303,36,0.261,46,0.095,47,0.208,48,0.006,49,0.006,67,0.731,128,1.337,147,0.86,148,1.342,149,0.772,185,0.884,187,1.04,192,2.47,247,3.632,261,4.605,267,3.295,271,3.811,277,3.441,279,2.699,281,3.759,296,2.692,304,2.818,305,3.811,307,2.878,310,3.624,314,5.237,322,2.257,323,1.965,324,2.221,386,4.529,387,4.529,458,2.417,513,4.186,515,4.605,516,4.605,518,4.186,519,4.605,739,3.624,881,3.624,958,2.701,1480,4.9,1799,4.894,1819,3.211,1820,5.241,1821,3.655,1822,3.655,1823,3.655,1824,3.655,1825,3.655,1826,3.655,1827,3.655,1828,3.655,1829,3.655,1830,2.701]],["title/injectables/UserFromTokenPipe.html",[199,2.632,218,1.179]],["body/injectables/UserFromTokenPipe.html",[3,0.126,4,0.114,5,0.114,7,0.335,13,2.332,14,0.481,15,0.011,22,0.632,36,0.262,46,0.126,47,0.193,48,0.008,49,0.008,54,1.967,62,1.541,63,1.024,74,1.306,133,2.461,139,2.607,147,1.498,148,1.206,149,1.345,150,1.73,154,4.148,160,4.66,172,2.407,173,1.837,177,1.73,181,1.541,183,1.967,187,1.379,199,3.932,218,1.762,219,2.159,224,4.26,225,4.728,237,4.26,239,3.745,240,3.583,241,2.723,245,2.865,246,3.159,604,2.503,731,3.583,734,2.723,742,2.723,743,4.178,745,3.583,910,3.873,911,4.148,914,6.244,915,6.629,917,5.593,1831,6.244,1832,6.365,1833,4.849,1834,6.365,1835,4.849,1836,4.849]],["title/controllers/UsersController.html",[50,1.566,1837,3.149]],["body/controllers/UsersController.html",[3,0.098,4,0.088,5,0.088,7,0.259,10,1.097,13,2.549,14,0.561,15,0.011,16,0.853,17,1.052,22,0.617,36,0.293,46,0.098,47,0.149,48,0.006,49,0.006,50,1.376,52,1.376,54,1.648,56,3.487,62,1.974,63,0.791,64,3.64,65,3.64,66,2.013,67,0.749,69,3.34,71,2.151,74,1.927,75,2.201,128,0.955,131,2.102,132,4.18,133,2.757,147,1.255,148,1.01,149,1.127,150,1.902,158,2.102,159,2.102,172,1.858,173,1.418,177,1.902,181,1.19,183,1.648,199,2.313,208,2.991,225,3.652,239,3.359,241,2.102,247,1.79,252,5.713,458,2.459,601,3.235,604,3.206,619,2.44,623,2.44,637,2.767,638,2.991,639,2.991,640,2.589,645,2.767,662,3.475,674,2.589,675,2.589,881,4.679,900,4.685,1256,3.29,1283,3.29,1795,4.294,1830,2.767,1837,3.941,1838,3.29,1839,4.685,1840,5.333,1841,3.744,1842,3.744,1843,3.744,1844,3.744,1845,3.744,1846,3.744,1847,3.744,1848,3.744,1849,3.744,1850,3.744,1851,3.744,1852,3.29,1853,3.744,1854,3.744,1855,3.744,1856,3.744,1857,3.744,1858,3.744,1859,3.744,1860,3.744,1861,3.744,1862,3.744,1863,3.744,1864,3.744,1865,3.744,1866,3.744,1867,3.744]],["title/modules/UsersModule.html",[76,1.246,99,2.776]],["body/modules/UsersModule.html",[3,0.137,4,0.123,5,0.123,13,1.621,15,0.01,36,0.302,46,0.137,47,0.209,48,0.008,49,0.008,52,2.461,63,1.108,76,2.157,78,2.184,79,2.257,80,2.418,81,2.418,82,2.257,83,3.402,84,3.402,96,5.352,99,5.562,100,3.088,101,2.418,102,2.418,104,3.202,120,4.609,225,5.119,337,2.821,338,1.987,1830,3.876,1837,5.453,1852,4.609,1868,4.609,1869,4.609,1870,4.609,1871,5.245,1872,5.245,1873,5.245,1874,5.245]],["title/injectables/UsersService.html",[218,1.179,225,2.505]],["body/injectables/UsersService.html",[1,1.818,3,0.084,4,0.076,5,0.076,7,0.224,10,1.545,13,1.954,14,0.552,15,0.011,16,1.08,22,0.746,24,1.561,36,0.277,41,1.19,44,1.607,46,0.084,47,0.129,48,0.006,49,0.006,54,1.483,62,2.326,63,0.684,74,1.971,128,1.722,133,2.854,134,1.569,136,4.216,137,3.969,147,1.722,148,1.386,149,1.546,150,2.255,160,2.964,166,3.318,173,1.818,177,2.522,181,1.525,183,1.001,187,1.365,218,1.328,219,1.442,221,2.213,225,2.821,245,1.306,246,1.607,247,2.294,259,1.818,271,3.074,272,2.586,296,1.122,338,1.227,348,3.399,354,3.833,371,2.393,372,1.818,373,1.493,375,1.904,383,4.566,405,2.845,494,1.671,499,1.818,500,2.845,601,3.022,602,3.318,613,2.964,641,2.586,765,3.21,784,2.821,824,3.318,834,2.393,837,2.393,1435,2.845,1436,2.845,1500,4.52,1795,5.059,1799,2.586,1830,2.393,1839,4.216,1875,2.845,1876,4.799,1877,4.799,1878,3.238,1879,3.238,1880,4.799,1881,4.799,1882,3.238,1883,3.238,1884,3.238,1885,4.799,1886,3.238,1887,4.799,1888,3.238,1889,3.238,1890,3.238,1891,3.238,1892,3.238,1893,3.238,1894,5.717,1895,3.238,1896,3.238,1897,3.238,1898,3.238,1899,3.238,1900,4.799,1901,3.238,1902,3.238]],["title/classes/ValidationExceptionDto.html",[47,0.169,1137,2.945]],["body/classes/ValidationExceptionDto.html",[3,0.185,4,0.114,5,0.114,7,0.334,8,1.046,14,0.646,15,0.01,16,1.33,17,1.202,22,0.705,24,1.468,36,0.178,46,0.126,47,0.253,48,0.007,49,0.007,67,0.968,70,5.076,71,2.784,128,1.622,140,6.02,185,1.169,190,5.669,192,2.554,234,3.575,246,3.886,298,4.696,432,4.141,458,2.93,743,4.725,1124,5.076,1137,4.393,1903,6.02,1904,3.863,1905,6.236,1906,5.584,1907,4.837,1908,5.786,1909,5.584,1910,4.837,1911,4.837,1912,4.25]],["title/classes/ValidationMessageDto.html",[47,0.169,1908,3.149]],["body/classes/ValidationMessageDto.html",[3,0.171,4,0.119,5,0.119,7,0.35,8,1.077,14,0.64,15,0.01,16,1.368,17,1.108,22,0.65,24,1.274,36,0.186,46,0.132,47,0.26,48,0.008,49,0.008,67,1.012,70,4.04,71,2.868,128,1.291,140,5.226,185,1.223,190,5.226,192,2.586,234,4.835,246,3.248,298,5.869,432,3.296,458,2.332,743,4.933,1124,4.04,1137,3.497,1903,5.793,1904,4.04,1905,4.445,1906,4.445,1908,5.667,1909,4.445,1912,5.749,1913,5.058,1914,5.058]],["title/coverage.html",[1915,4.661]],["body/coverage.html",[0,2.514,1,1.288,5,0.054,6,2.015,13,0.709,14,0.173,15,0.011,29,1.552,44,1.138,47,0.339,48,0.004,49,0.004,50,2.61,51,1.695,53,2.015,82,0.987,112,2.542,122,2.542,129,1.695,130,2.015,132,1.417,137,1.348,139,1.233,152,1.586,161,1.495,167,1.695,183,0.709,186,2.015,198,1.495,199,1.417,206,1.417,218,2.106,220,2.015,225,1.348,227,1.495,239,1.138,271,1.233,274,1.233,275,2.015,299,1.695,300,2.015,334,1.495,340,2.015,356,1.495,367,1.586,408,5.527,409,2.015,410,2.936,412,1.695,413,2.015,414,2.015,421,1.695,422,2.015,423,2.015,429,1.417,430,2.015,431,2.936,433,0.925,436,1.495,437,3.29,438,2.015,439,3.401,442,0.869,446,1.495,447,2.015,448,3.401,471,1.495,472,2.015,473,3.401,491,1.495,492,2.015,493,2.936,501,1.586,502,2.015,503,2.936,511,2.015,512,2.936,523,1.417,538,1.586,539,2.015,542,2.956,544,3.639,569,1.348,570,1.417,571,2.015,572,1.096,573,1.096,588,1.348,590,1.348,592,1.695,593,2.015,599,1.695,600,2.015,604,1.184,624,1.417,634,1.417,684,2.015,715,2.542,716,1.832,718,2.015,719,2.015,746,2.015,747,1.057,755,1.695,756,2.015,761,1.695,762,2.015,785,1.586,789,1.417,814,2.015,839,2.015,846,2.015,873,3.675,881,1.586,884,1.832,887,3.23,891,1.832,909,2.015,910,2.936,918,2.015,964,1.695,965,2.015,975,1.417,985,1.495,999,1.586,1009,2.015,1011,1.288,1041,2.015,1050,1.695,1057,1.586,1060,1.695,1061,2.015,1086,1.417,1092,1.695,1103,1.695,1104,2.015,1105,2.015,1108,2.015,1119,1.695,1120,2.015,1134,1.495,1137,1.586,1147,1.586,1156,2.015,1179,1.695,1180,2.015,1222,1.695,1239,1.586,1250,1.495,1313,2.015,1476,2.015,1480,1.586,1481,2.015,1485,1.695,1486,2.015,1500,1.417,1512,1.832,1513,2.015,1519,1.832,1538,2.015,1552,2.015,1574,2.015,1630,2.015,1631,2.015,1635,2.015,1644,2.015,1651,1.695,1652,2.015,1664,1.586,1694,2.015,1768,2.015,1770,2.015,1773,2.015,1775,2.015,1788,2.015,1790,1.832,1791,2.015,1793,2.015,1795,1.586,1796,2.015,1798,2.015,1819,2.015,1831,2.015,1837,1.695,1838,2.015,1875,2.015,1903,2.936,1904,2.936,1908,1.695,1915,1.832,1916,2.293,1917,2.293,1918,2.293,1919,6.458,1920,7.39,1921,5.761,1922,2.015,1923,8.355,1924,2.015,1925,2.015,1926,6.924,1927,2.015,1928,7.103,1929,7.257,1930,2.293,1931,4.601,1932,2.015,1933,2.015,1934,2.015,1935,2.015,1936,2.015,1937,2.293,1938,2.293,1939,2.293,1940,4.601,1941,2.293,1942,2.293,1943,3.23,1944,2.015,1945,2.015,1946,2.015,1947,3.676,1948,2.293,1949,2.293]],["title/dependencies.html",[79,2.208,1950,3.117]],["body/dependencies.html",[15,0.011,41,2.087,47,0.28,48,0.008,49,0.008,63,1.2,67,1.136,79,2.444,108,3.508,204,3.927,238,4.99,322,3.508,338,2.152,487,4.99,525,4.99,630,4.99,631,4.99,854,4.536,855,4.536,1518,4.99,1596,5.624,1597,4.99,1721,4.99,1951,5.68,1952,5.68,1953,5.68,1954,7.653,1955,5.68,1956,5.68,1957,5.68,1958,5.68,1959,5.68,1960,5.68,1961,5.68,1962,5.68,1963,5.68,1964,5.68,1965,5.68,1966,5.68,1967,5.68,1968,5.68,1969,5.68,1970,5.68,1971,5.68,1972,5.68]],["title/miscellaneous/enumerations.html",[1973,2.086,1974,4.507]],["body/miscellaneous/enumerations.html",[1,4.288,7,0.449,13,2.36,15,0.01,48,0.009,49,0.009,377,6.709,478,4.361,494,3.941,1973,3.819,1974,5.708,1975,6.496,1976,7.636,1977,6.496]],["title/miscellaneous/functions.html",[1973,2.086,1978,4.507]],["body/miscellaneous/functions.html",[7,0.452,15,0.01,48,0.009,49,0.009,82,3.5,132,4.735,147,1.539,148,1.239,149,1.381,271,3.516,495,5.745,1922,5.745,1936,5.745,1973,3.844,1978,5.745,1979,6.538,1980,6.538,1981,6.538]],["title/index.html",[7,0.245,1982,3.547,1983,3.547]],["body/index.html",[4,0.124,15,0.01,48,0.008,49,0.008,58,4.633,71,1.826,325,3.436,348,2.836,454,3.257,866,4.212,882,4.212,1915,4.212,1984,5.273,1985,5.273,1986,6.72,1987,5.273,1988,5.273,1989,5.273,1990,5.273,1991,5.273,1992,7.396,1993,5.273,1994,5.273,1995,5.273,1996,8.358,1997,5.273,1998,5.273,1999,5.273,2000,8.224,2001,5.273,2002,5.273,2003,6.72,2004,5.273,2005,5.273,2006,5.273,2007,5.273,2008,6.72,2009,6.72,2010,5.273,2011,5.273,2012,5.273,2013,6.72,2014,6.72,2015,5.273,2016,5.273,2017,5.273,2018,5.273,2019,5.273,2020,5.273,2021,5.273,2022,5.273,2023,4.633,2024,5.273,2025,5.273,2026,5.273,2027,5.273,2028,5.273,2029,5.273,2030,5.273,2031,5.273,2032,5.273,2033,5.273,2034,4.633]],["title/modules.html",[78,2.43]],["body/modules.html",[15,0.008,48,0.008,49,0.008,77,4.138,78,2.332,87,3.871,88,3.649,89,3.871,90,3.649,91,3.649,92,3.649,93,3.871,94,3.871,95,3.871,96,3.649,97,3.649,98,3.292,99,3.649,866,7.043,2035,8.818,2036,8.818,2037,8.848,2038,5.6,2039,5.6]],["title/overview.html",[2040,5.128]],["body/overview.html",[2,1.558,15,0.011,48,0.006,49,0.006,52,1.198,76,0.953,77,6.422,78,1.357,79,1.403,80,1.503,81,1.503,82,1.403,83,1.503,84,1.503,85,2.864,86,2.864,87,5.703,88,4.778,89,3.968,90,5.01,91,4.778,92,4.778,93,5.069,94,5.069,95,5.485,96,4.778,97,4.778,98,4.664,99,5.287,100,2.223,101,1.503,102,1.503,161,4.778,185,0.788,194,2.864,196,2.864,197,2.864,198,3.74,199,3.545,219,1.451,225,4.311,227,4.778,331,2.864,332,2.864,333,2.864,334,4.778,543,2.253,547,2.124,624,4.529,634,4.529,677,2.864,678,2.864,679,2.864,717,2.603,789,4.529,807,2.864,808,2.864,809,2.864,849,2.864,850,2.864,851,2.864,985,3.74,1002,2.864,1004,2.864,1011,4.117,1134,3.74,1150,2.864,1151,2.864,1250,3.74,1307,2.864,1308,2.864,1500,4.529,1532,2.864,1533,2.864,1534,2.864,1569,2.864,1570,2.864,1571,2.864,1687,2.864,1688,2.864,1689,2.864,1868,2.864,1869,2.864,1870,2.864,2040,2.864,2041,4.822,2042,3.259,2043,3.259,2044,3.259,2045,3.259]],["title/properties.html",[8,0.845,1950,3.117]],["body/properties.html",[8,1.106,15,0.01,48,0.009,49,0.009,71,2.326,325,4.376,2034,5.9,2046,6.715,2047,6.715,2048,6.715]],["title/miscellaneous/typealiases.html",[1973,2.086,2049,5.13]],["body/miscellaneous/typealiases.html",[7,0.469,14,0.512,15,0.009,48,0.009,49,0.009,729,6.255,1973,3.989,2050,6.784,2051,6.784,2052,6.784]],["title/miscellaneous/variables.html",[1973,2.086,2053,4.507]],["body/miscellaneous/variables.html",[7,0.277,12,3.456,14,0.487,15,0.011,16,1.116,48,0.007,49,0.007,54,1.239,71,1.938,74,1.879,139,4.279,148,0.759,150,1.996,160,2.476,181,2.217,183,1.992,245,2.256,246,1.989,259,2.251,268,3.522,271,3.946,296,2.8,298,2.962,329,2.251,369,2.357,406,3.522,417,3.202,443,1.848,478,4.347,494,2.069,604,2.888,645,4.135,654,2.962,726,4.469,735,3.522,736,3.522,737,4.916,738,3.522,739,2.771,743,2.357,871,3.202,873,3.202,882,3.202,884,4.469,885,3.522,891,4.469,892,3.522,893,3.522,894,3.522,1166,3.522,1301,3.202,1519,4.469,1924,3.522,1925,4.916,1927,3.522,1932,3.522,1933,4.916,1934,3.522,1935,4.916,1943,3.522,1944,3.522,1945,4.916,1946,4.916,1973,2.357,2023,3.522,2053,3.522,2054,4.008,2055,4.008,2056,5.595,2057,5.595,2058,4.008,2059,4.008,2060,4.008,2061,4.008,2062,4.008,2063,4.008,2064,4.008,2065,4.008,2066,4.008,2067,4.008,2068,4.008,2069,4.008,2070,4.008,2071,4.008,2072,4.008,2073,4.008,2074,4.008,2075,5.595,2076,4.008,2077,4.008,2078,4.008,2079,4.008,2080,4.008,2081,4.008,2082,4.008,2083,4.008,2084,4.008,2085,4.008,2086,5.595,2087,5.595,2088,5.595,2089,4.008,2090,5.595]]],"invertedIndex":[["",{"_index":15,"title":{},"body":{"entities/Admin.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Comment.html":{},"classes/CommentDto.html":{},"modules/CommentsModule.html":{},"injectables/CommentsService.html":{},"classes/CreateCommentDto.html":{},"classes/CreateFileDto.html":{},"classes/CreateImageDto.html":{},"classes/CreateLanguageDto.html":{},"classes/CreatePlaceCategoryDto.html":{},"classes/CreatePlaceDto.html":{},"classes/CreatePlaceTypeDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateTranslationDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"classes/FileDto.html":{},"interfaces/IDatabaseConfig.html":{},"interfaces/IGoogleCloudConfig.html":{},"interfaces/IJwtConfig.html":{},"interfaces/IMailerConfig.html":{},"entities/Image.html":{},"classes/ImageDto.html":{},"controllers/ImagesController.html":{},"modules/ImagesModule.html":{},"injectables/ImagesService.html":{},"guards/JwtAuthGuard.html":{},"entities/Language.html":{},"classes/LanguageDto.html":{},"controllers/LanguagesController.html":{},"modules/LanguagesModule.html":{},"injectables/LanguagesService.html":{},"entities/Like.html":{},"classes/LoginDto.html":{},"modules/MailingModule.html":{},"injectables/MailingService.html":{},"injectables/PayloadFromTokenPipe.html":{},"entities/Place.html":{},"controllers/PlaceCategoriesController.html":{},"modules/PlaceCategoriesModule.html":{},"injectables/PlaceCategoriesService.html":{},"entities/PlaceCategory.html":{},"classes/PlaceCategoryDto.html":{},"classes/PlaceDto.html":{},"classes/PlaceSlugDto.html":{},"entities/PlaceType.html":{},"classes/PlaceTypeDto.html":{},"controllers/PlaceTypesController.html":{},"modules/PlaceTypesModule.html":{},"injectables/PlaceTypesService.html":{},"controllers/PlacesController.html":{},"modules/PlacesModule.html":{},"injectables/PlacesService.html":{},"entities/Role.html":{},"classes/RoleDto.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/SearchPlaceDto.html":{},"modules/StorageModule.html":{},"injectables/StorageService.html":{},"classes/TokenPayloadDto.html":{},"entities/Translation.html":{},"classes/TranslationDto.html":{},"controllers/TranslationsController.html":{},"modules/TranslationsModule.html":{},"injectables/TranslationsService.html":{},"classes/UpdateCommentDto.html":{},"classes/UpdateLanguageDto.html":{},"classes/UpdatePlaceCategoryDto.html":{},"classes/UpdatePlaceDto.html":{},"classes/UpdatePlaceTypeDto.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateTranslationDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserDto.html":{},"injectables/UserFromTokenPipe.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ValidationExceptionDto.html":{},"classes/ValidationMessageDto.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":408,"title":{},"body":{"injectables/CommentsService.html":{},"entities/Image.html":{},"guards/JwtAuthGuard.html":{},"entities/Place.html":{},"injectables/PlacesService.html":{},"guards/RolesGuard.html":{},"coverage.html":{}}}],["0.0.1",{"_index":2047,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":1969,"title":{},"body":{"dependencies.html":{}}}],["0.14.0",{"_index":1961,"title":{},"body":{"dependencies.html":{}}}],["0.3.15",{"_index":1972,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":1960,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1923,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":1937,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":1940,"title":{},"body":{"coverage.html":{}}}],["0/13",{"_index":1941,"title":{},"body":{"coverage.html":{}}}],["0/17",{"_index":1942,"title":{},"body":{"coverage.html":{}}}],["0/18",{"_index":1939,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1919,"title":{},"body":{"coverage.html":{}}}],["0/21",{"_index":1938,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1920,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1929,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1928,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1921,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1931,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":1930,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":1947,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":739,"title":{},"body":{"guards/JwtAuthGuard.html":{},"injectables/PlacesService.html":{},"injectables/TranslationsService.html":{},"classes/UserDto.html":{},"miscellaneous/variables.html":{}}}],["1.8.1",{"_index":1953,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":547,"title":{},"body":{"interfaces/IDatabaseConfig.html":{},"interfaces/IGoogleCloudConfig.html":{},"interfaces/IJwtConfig.html":{},"interfaces/IMailerConfig.html":{},"entities/Language.html":{},"overview.html":{}}}],["10.0.3",{"_index":1956,"title":{},"body":{"dependencies.html":{}}}],["1000",{"_index":291,"title":{},"body":{"entities/Comment.html":{}}}],["11",{"_index":2042,"title":{},"body":{"overview.html":{}}}],["12",{"_index":250,"title":{},"body":{"injectables/AuthService.html":{}}}],["14",{"_index":2041,"title":{},"body":{"overview.html":{}}}],["15*2^20",{"_index":652,"title":{},"body":{"controllers/ImagesController.html":{}}}],["15728640",{"_index":650,"title":{},"body":{"controllers/ImagesController.html":{}}}],["15mb",{"_index":651,"title":{},"body":{"controllers/ImagesController.html":{}}}],["2",{"_index":2044,"title":{},"body":{"overview.html":{}}}],["2.3.1",{"_index":1955,"title":{},"body":{"dependencies.html":{}}}],["20",{"_index":27,"title":{},"body":{"entities/Admin.html":{}}}],["200",{"_index":2066,"title":{},"body":{"miscellaneous/variables.html":{}}}],["25",{"_index":750,"title":{},"body":{"entities/Language.html":{}}}],["3.1.9",{"_index":1963,"title":{},"body":{"dependencies.html":{}}}],["30",{"_index":1805,"title":{},"body":{"entities/User.html":{}}}],["3000",{"_index":548,"title":{},"body":{"interfaces/IDatabaseConfig.html":{},"interfaces/IGoogleCloudConfig.html":{},"interfaces/IJwtConfig.html":{},"interfaces/IMailerConfig.html":{},"entities/Translation.html":{}}}],["35",{"_index":2043,"title":{},"body":{"overview.html":{}}}],["4",{"_index":2045,"title":{},"body":{"overview.html":{}}}],["5.1.0",{"_index":1959,"title":{},"body":{"dependencies.html":{}}}],["50",{"_index":21,"title":{},"body":{"entities/Admin.html":{},"entities/Role.html":{}}}],["6.10.0",{"_index":1951,"title":{},"body":{"dependencies.html":{}}}],["6.3.0",{"_index":1957,"title":{},"body":{"dependencies.html":{}}}],["6.9.2",{"_index":1966,"title":{},"body":{"dependencies.html":{}}}],["7.2.0",{"_index":1971,"title":{},"body":{"dependencies.html":{}}}],["7.2.1",{"_index":1952,"title":{},"body":{"dependencies.html":{}}}],["9.0.0",{"_index":1954,"title":{},"body":{"dependencies.html":{}}}],["9.0.1",{"_index":1958,"title":{},"body":{"dependencies.html":{}}}],["9.1.1",{"_index":1964,"title":{},"body":{"dependencies.html":{}}}],["_",{"_index":1613,"title":{},"body":{"injectables/StorageService.html":{}}}],["__dirname",{"_index":532,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["_metadata",{"_index":914,"title":{},"body":{"injectables/PayloadFromTokenPipe.html":{},"injectables/UserFromTokenPipe.html":{}}}],["access",{"_index":1301,"title":{},"body":{"controllers/PlacesController.html":{},"guards/RolesGuard.html":{},"miscellaneous/variables.html":{}}}],["accessors",{"_index":301,"title":{},"body":{"classes/CommentDto.html":{}}}],["action",{"_index":824,"title":{},"body":{"injectables/LanguagesService.html":{},"injectables/PlaceCategoriesService.html":{},"injectables/PlaceTypesService.html":{},"injectables/RolesService.html":{},"injectables/UsersService.html":{}}}],["adapter",{"_index":872,"title":{},"body":{"modules/MailingModule.html":{}}}],["addbearerauth",{"_index":2078,"title":{},"body":{"miscellaneous/variables.html":{}}}],["addorderby('image.position",{"_index":1441,"title":{},"body":{"injectables/PlacesService.html":{}}}],["address",{"_index":9,"title":{},"body":{"entities/Admin.html":{},"classes/CreatePlaceDto.html":{},"entities/Place.html":{},"classes/PlaceDto.html":{},"injectables/PlacesService.html":{},"classes/SearchPlaceDto.html":{},"classes/UpdatePlaceDto.html":{}}}],["address'})@transform",{"_index":1064,"title":{},"body":{"classes/PlaceDto.html":{},"classes/SearchPlaceDto.html":{}}}],["address_t",{"_index":1426,"title":{},"body":{"injectables/PlacesService.html":{}}}],["address_t.language",{"_index":1428,"title":{},"body":{"injectables/PlacesService.html":{}}}],["address_t.textid",{"_index":1427,"title":{},"body":{"injectables/PlacesService.html":{}}}],["addresstranslation",{"_index":1363,"title":{},"body":{"injectables/PlacesService.html":{}}}],["addresstranslation.text",{"_index":1367,"title":{},"body":{"injectables/PlacesService.html":{}}}],["addresstranslation.textid",{"_index":1368,"title":{},"body":{"injectables/PlacesService.html":{}}}],["adds",{"_index":825,"title":{},"body":{"injectables/LanguagesService.html":{},"injectables/PlaceTypesService.html":{}}}],["addview",{"_index":1314,"title":{},"body":{"injectables/PlacesService.html":{}}}],["addview(placeid",{"_index":1329,"title":{},"body":{"injectables/PlacesService.html":{}}}],["admin",{"_index":1,"title":{"entities/Admin.html":{}},"body":{"entities/Admin.html":{},"entities/Place.html":{},"injectables/PlacesService.html":{},"entities/User.html":{},"classes/UserDto.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["admin.places",{"_index":928,"title":{},"body":{"entities/Place.html":{}}}],["admin.user",{"_index":1800,"title":{},"body":{"entities/User.html":{}}}],["administration",{"_index":1191,"title":{},"body":{"controllers/PlacesController.html":{}}}],["administrationdeletecomment",{"_index":1181,"title":{},"body":{"controllers/PlacesController.html":{}}}],["administrationdeletecomment(commentid",{"_index":1190,"title":{},"body":{"controllers/PlacesController.html":{}}}],["administrationupdatecomment",{"_index":1182,"title":{},"body":{"controllers/PlacesController.html":{}}}],["administrationupdatecomment(commentid",{"_index":1198,"title":{},"body":{"controllers/PlacesController.html":{}}}],["advenddate",{"_index":919,"title":{},"body":{"entities/Place.html":{},"classes/PlaceDto.html":{},"classes/SearchPlaceDto.html":{}}}],["advertisement",{"_index":920,"title":{},"body":{"entities/Place.html":{},"classes/PlaceDto.html":{},"classes/SearchPlaceDto.html":{}}}],["again",{"_index":1777,"title":{},"body":{"classes/UpdatePlaceDto.html":{}}}],["aliases",{"_index":2050,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allowedheaders",{"_index":2062,"title":{},"body":{"miscellaneous/variables.html":{}}}],["already",{"_index":142,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/PlacesService.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{}}}],["alreadyexists",{"_index":243,"title":{},"body":{"injectables/AuthService.html":{}}}],["amazing",{"_index":2020,"title":{},"body":{"index.html":{}}}],["api",{"_index":2075,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apibadrequestresponse",{"_index":1136,"title":{},"body":{"controllers/PlaceTypesController.html":{},"controllers/PlacesController.html":{},"controllers/RolesController.html":{}}}],["apibearerauth",{"_index":1252,"title":{},"body":{"controllers/PlacesController.html":{}}}],["apibearerauth('access",{"_index":1277,"title":{},"body":{"controllers/PlacesController.html":{}}}],["apibody",{"_index":163,"title":{},"body":{"controllers/AuthController.html":{},"controllers/LanguagesController.html":{},"controllers/PlaceCategoriesController.html":{},"controllers/PlaceTypesController.html":{},"controllers/PlacesController.html":{},"controllers/RolesController.html":{},"controllers/TranslationsController.html":{}}}],["apiconsumes",{"_index":627,"title":{},"body":{"controllers/ImagesController.html":{}}}],["apiconsumes('multipart/form",{"_index":644,"title":{},"body":{"controllers/ImagesController.html":{}}}],["apiforbiddenresponse",{"_index":1253,"title":{},"body":{"controllers/PlacesController.html":{}}}],["apikey",{"_index":552,"title":{},"body":{"interfaces/IDatabaseConfig.html":{},"interfaces/IGoogleCloudConfig.html":{},"interfaces/IJwtConfig.html":{},"interfaces/IMailerConfig.html":{}}}],["apinotfoundresponse",{"_index":791,"title":{},"body":{"controllers/LanguagesController.html":{},"controllers/PlaceCategoriesController.html":{},"controllers/PlaceTypesController.html":{},"controllers/RolesController.html":{}}}],["apiokresponse",{"_index":64,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ImagesController.html":{},"controllers/LanguagesController.html":{},"controllers/PlaceCategoriesController.html":{},"controllers/PlaceTypesController.html":{},"controllers/PlacesController.html":{},"controllers/RolesController.html":{},"controllers/TranslationsController.html":{},"controllers/UsersController.html":{}}}],["apiokresponse({description",{"_index":767,"title":{},"body":{"controllers/LanguagesController.html":{}}}],["apioperation",{"_index":65,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ImagesController.html":{},"controllers/LanguagesController.html":{},"controllers/PlaceCategoriesController.html":{},"controllers/PlaceTypesController.html":{},"controllers/PlacesController.html":{},"controllers/RolesController.html":{},"controllers/TranslationsController.html":{},"controllers/UsersController.html":{}}}],["apioperation({summary",{"_index":56,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ImagesController.html":{},"controllers/PlaceCategoriesController.html":{},"controllers/PlaceTypesController.html":{},"controllers/PlacesController.html":{},"controllers/RolesController.html":{},"controllers/TranslationsController.html":{},"controllers/UsersController.html":{}}}],["apiparam",{"_index":628,"title":{},"body":{"controllers/ImagesController.html":{},"controllers/LanguagesController.html":{},"controllers/PlaceCategoriesController.html":{},"controllers/PlaceTypesController.html":{},"controllers/PlacesController.html":{},"controllers/RolesController.html":{},"controllers/TranslationsController.html":{}}}],["apiproperty",{"_index":192,"title":{},"body":{"classes/AuthDto.html":{},"classes/CommentDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreateFileDto.html":{},"classes/CreateLanguageDto.html":{},"classes/CreatePlaceCategoryDto.html":{},"classes/CreatePlaceDto.html":{},"classes/CreatePlaceTypeDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateTranslationDto.html":{},"classes/CreateUserDto.html":{},"classes/FileDto.html":{},"classes/ImageDto.html":{},"classes/LanguageDto.html":{},"classes/LoginDto.html":{},"classes/PlaceCategoryDto.html":{},"classes/PlaceDto.html":{},"classes/PlaceSlugDto.html":{},"classes/PlaceTypeDto.html":{},"classes/RoleDto.html":{},"classes/SearchPlaceDto.html":{},"classes/TranslationDto.html":{},"classes/UpdatePlaceDto.html":{},"classes/UserDto.html":{},"classes/ValidationExceptionDto.html":{},"classes/ValidationMessageDto.html":{}}}],["apiproperty({description",{"_index":190,"title":{},"body":{"classes/AuthDto.html":{},"classes/ValidationExceptionDto.html":{},"classes/ValidationMessageDto.html":{}}}],["apiproperty({title",{"_index":307,"title":{},"body":{"classes/CommentDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreateLanguageDto.html":{},"classes/CreatePlaceCategoryDto.html":{},"classes/CreatePlaceTypeDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateTranslationDto.html":{},"classes/CreateUserDto.html":{},"classes/ImageDto.html":{},"classes/LanguageDto.html":{},"classes/LoginDto.html":{},"classes/PlaceCategoryDto.html":{},"classes/PlaceDto.html":{},"classes/PlaceSlugDto.html":{},"classes/PlaceTypeDto.html":{},"classes/RoleDto.html":{},"classes/SearchPlaceDto.html":{},"classes/TranslationDto.html":{},"classes/UpdateCommentDto.html":{},"classes/UserDto.html":{}}}],["apiproperty({type",{"_index":416,"title":{},"body":{"classes/CreateFileDto.html":{},"classes/CreateImageDto.html":{},"classes/CreatePlaceDto.html":{},"classes/FileDto.html":{},"classes/PlaceDto.html":{},"classes/PlaceSlugDto.html":{},"classes/SearchPlaceDto.html":{},"classes/UpdatePlaceDto.html":{}}}],["apiquery",{"_index":988,"title":{},"body":{"controllers/PlaceCategoriesController.html":{},"controllers/PlaceTypesController.html":{},"controllers/PlacesController.html":{}}}],["apitags",{"_index":66,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ImagesController.html":{},"controllers/LanguagesController.html":{},"controllers/PlaceCategoriesController.html":{},"controllers/PlaceTypesController.html":{},"controllers/PlacesController.html":{},"controllers/RolesController.html":{},"controllers/TranslationsController.html":{},"controllers/UsersController.html":{}}}],["apitags('authentication",{"_index":170,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('images",{"_index":642,"title":{},"body":{"controllers/ImagesController.html":{}}}],["apitags('languages",{"_index":794,"title":{},"body":{"controllers/LanguagesController.html":{}}}],["apitags('place",{"_index":990,"title":{},"body":{"controllers/PlaceCategoriesController.html":{},"controllers/PlaceTypesController.html":{}}}],["apitags('places",{"_index":1265,"title":{},"body":{"controllers/PlacesController.html":{}}}],["apitags('roles",{"_index":1504,"title":{},"body":{"controllers/RolesController.html":{}}}],["apitags('system",{"_index":68,"title":{},"body":{"controllers/AppController.html":{}}}],["apitags('translations",{"_index":1671,"title":{},"body":{"controllers/TranslationsController.html":{}}}],["apitags('users",{"_index":1854,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiunauthorizedresponse",{"_index":164,"title":{},"body":{"controllers/AuthController.html":{}}}],["app",{"_index":1998,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":105,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":51,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["applications",{"_index":1991,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":77,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["argumentmetadata",{"_index":915,"title":{},"body":{"injectables/PayloadFromTokenPipe.html":{},"injectables/UserFromTokenPipe.html":{}}}],["async",{"_index":133,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CommentsService.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{},"injectables/MailingService.html":{},"injectables/PayloadFromTokenPipe.html":{},"controllers/PlaceCategoriesController.html":{},"injectables/PlaceCategoriesService.html":{},"controllers/PlaceTypesController.html":{},"injectables/PlaceTypesService.html":{},"controllers/PlacesController.html":{},"injectables/PlacesService.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"injectables/StorageService.html":{},"controllers/TranslationsController.html":{},"injectables/TranslationsService.html":{},"injectables/UserFromTokenPipe.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["auth",{"_index":132,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ImagesController.html":{},"controllers/PlacesController.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["auth(...roles",{"_index":1981,"title":{},"body":{"miscellaneous/functions.html":{}}}],["auth(rolenamesenum.owner",{"_index":672,"title":{},"body":{"controllers/ImagesController.html":{},"controllers/PlacesController.html":{},"controllers/RolesController.html":{}}}],["auth.controller",{"_index":202,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard.ts",{"_index":719,"title":{},"body":{"guards/JwtAuthGuard.html":{},"coverage.html":{}}}],["auth.guard.ts:13",{"_index":724,"title":{},"body":{"guards/JwtAuthGuard.html":{}}}],["auth.guard.ts:18",{"_index":727,"title":{},"body":{"guards/JwtAuthGuard.html":{}}}],["auth.service",{"_index":162,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":118,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/decorators/auth.decorator",{"_index":637,"title":{},"body":{"controllers/ImagesController.html":{},"controllers/PlacesController.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{}}}],["auth/decorators/token",{"_index":638,"title":{},"body":{"controllers/ImagesController.html":{},"controllers/PlacesController.html":{},"controllers/UsersController.html":{}}}],["auth/decorators/token.decorator",{"_index":1258,"title":{},"body":{"controllers/PlacesController.html":{}}}],["auth/dto/token",{"_index":640,"title":{},"body":{"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"controllers/PlacesController.html":{},"injectables/PlacesService.html":{},"controllers/UsersController.html":{}}}],["auth/pipes/payload",{"_index":1259,"title":{},"body":{"controllers/PlacesController.html":{}}}],["auth/pipes/user",{"_index":1256,"title":{},"body":{"controllers/PlacesController.html":{},"controllers/UsersController.html":{}}}],["authcontroller",{"_index":129,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authdto",{"_index":167,"title":{"classes/AuthDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/AuthDto.html":{},"coverage.html":{}}}],["authdto(token",{"_index":184,"title":{},"body":{"controllers/AuthController.html":{}}}],["authdto})@apiunauthorizedresponse({description",{"_index":141,"title":{},"body":{"controllers/AuthController.html":{}}}],["authheader",{"_index":735,"title":{},"body":{"guards/JwtAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["authheader?.split",{"_index":738,"title":{},"body":{"guards/JwtAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["authmodule",{"_index":87,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":325,"title":{},"body":{"classes/CommentDto.html":{},"entities/Place.html":{},"controllers/PlacesController.html":{},"injectables/PlacesService.html":{},"index.html":{},"properties.html":{}}}],["authorid",{"_index":303,"title":{},"body":{"classes/CommentDto.html":{}}}],["authorization",{"_index":2081,"title":{},"body":{"miscellaneous/variables.html":{}}}],["authorusername",{"_index":302,"title":{},"body":{"classes/CommentDto.html":{}}}],["authservice",{"_index":161,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["autoloadentities",{"_index":535,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["available",{"_index":2039,"title":{},"body":{"modules.html":{}}}],["await",{"_index":177,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CommentsService.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{},"injectables/MailingService.html":{},"controllers/PlaceCategoriesController.html":{},"injectables/PlaceCategoriesService.html":{},"controllers/PlaceTypesController.html":{},"injectables/PlaceTypesService.html":{},"controllers/PlacesController.html":{},"injectables/PlacesService.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"injectables/StorageService.html":{},"controllers/TranslationsController.html":{},"injectables/TranslationsService.html":{},"injectables/UserFromTokenPipe.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["backers",{"_index":2021,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":369,"title":{},"body":{"injectables/CommentsService.html":{},"controllers/ImagesController.html":{},"controllers/PlacesController.html":{},"injectables/PlacesService.html":{},"injectables/RolesService.html":{},"injectables/StorageService.html":{},"injectables/TranslationsService.html":{},"miscellaneous/variables.html":{}}}],["badrequestexception('invalid",{"_index":1737,"title":{},"body":{"injectables/TranslationsService.html":{}}}],["badrequestexception('no",{"_index":663,"title":{},"body":{"controllers/ImagesController.html":{}}}],["badrequestexception(error?.message",{"_index":1622,"title":{},"body":{"injectables/StorageService.html":{}}}],["badrequestexception})@apiparam({name",{"_index":1194,"title":{},"body":{"controllers/PlacesController.html":{}}}],["bcrypt",{"_index":238,"title":{},"body":{"injectables/AuthService.html":{},"dependencies.html":{}}}],["bcrypt.compare",{"_index":263,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.hash(dto.password",{"_index":249,"title":{},"body":{"injectables/AuthService.html":{}}}],["bearer",{"_index":737,"title":{},"body":{"guards/JwtAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["binary",{"_index":418,"title":{},"body":{"classes/CreateFileDto.html":{},"classes/CreateImageDto.html":{}}}],["body",{"_index":158,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ImagesController.html":{},"controllers/LanguagesController.html":{},"controllers/PlaceCategoriesController.html":{},"controllers/PlaceTypesController.html":{},"controllers/PlacesController.html":{},"controllers/RolesController.html":{},"controllers/TranslationsController.html":{},"controllers/UsersController.html":{}}}],["boolean",{"_index":279,"title":{},"body":{"entities/Comment.html":{},"classes/CommentDto.html":{},"injectables/CommentsService.html":{},"classes/CreatePlaceTypeDto.html":{},"classes/CreateTranslationDto.html":{},"guards/JwtAuthGuard.html":{},"entities/Place.html":{},"classes/PlaceDto.html":{},"entities/PlaceType.html":{},"classes/PlaceTypeDto.html":{},"injectables/PlacesService.html":{},"guards/RolesGuard.html":{},"classes/SearchPlaceDto.html":{},"entities/Translation.html":{},"classes/TranslationDto.html":{},"classes/UpdatePlaceDto.html":{},"entities/User.html":{},"classes/UserDto.html":{}}}],["boolean(v.url)).map((v",{"_index":1101,"title":{},"body":{"classes/PlaceDto.html":{}}}],["boolean(value",{"_index":490,"title":{},"body":{"classes/CreatePlaceTypeDto.html":{}}}],["bootstrap",{"_index":82,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommentsModule.html":{},"modules/ImagesModule.html":{},"modules/LanguagesModule.html":{},"modules/MailingModule.html":{},"modules/PlaceCategoriesModule.html":{},"modules/PlaceTypesModule.html":{},"modules/PlacesModule.html":{},"modules/RolesModule.html":{},"modules/StorageModule.html":{},"modules/TranslationsModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":2037,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":2035,"title":{},"body":{"modules.html":{}}}],["bucket",{"_index":1575,"title":{},"body":{"injectables/StorageService.html":{}}}],["bucketname",{"_index":554,"title":{},"body":{"interfaces/IDatabaseConfig.html":{},"interfaces/IGoogleCloudConfig.html":{},"interfaces/IJwtConfig.html":{},"interfaces/IMailerConfig.html":{}}}],["build",{"_index":2085,"title":{},"body":{"miscellaneous/variables.html":{}}}],["building",{"_index":1987,"title":{},"body":{"index.html":{}}}],["c",{"_index":391,"title":{},"body":{"injectables/CommentsService.html":{}}}],["c.canmanage",{"_index":389,"title":{},"body":{"injectables/CommentsService.html":{}}}],["c.user.id",{"_index":390,"title":{},"body":{"injectables/CommentsService.html":{}}}],["calculated",{"_index":297,"title":{},"body":{"entities/Comment.html":{}}}],["callback",{"_index":655,"title":{},"body":{"controllers/ImagesController.html":{}}}],["callback(null",{"_index":657,"title":{},"body":{"controllers/ImagesController.html":{}}}],["canactivate",{"_index":722,"title":{},"body":{"guards/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["canactivate(context",{"_index":725,"title":{},"body":{"guards/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["canmanage",{"_index":276,"title":{},"body":{"entities/Comment.html":{},"classes/CommentDto.html":{},"injectables/CommentsService.html":{}}}],["cascade",{"_index":289,"title":{},"body":{"entities/Comment.html":{},"entities/Image.html":{},"entities/Like.html":{},"entities/Place.html":{},"entities/User.html":{}}}],["catch",{"_index":742,"title":{},"body":{"guards/JwtAuthGuard.html":{},"injectables/LanguagesService.html":{},"injectables/PayloadFromTokenPipe.html":{},"injectables/PlacesService.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"injectables/StorageService.html":{},"injectables/TranslationsService.html":{},"injectables/UserFromTokenPipe.html":{}}}],["categories",{"_index":456,"title":{},"body":{"classes/CreatePlaceDto.html":{},"entities/Place.html":{},"controllers/PlaceCategoriesController.html":{},"classes/PlaceDto.html":{},"injectables/PlacesService.html":{},"classes/SearchPlaceDto.html":{},"classes/UpdatePlaceDto.html":{}}}],["categories.controller",{"_index":1006,"title":{},"body":{"modules/PlaceCategoriesModule.html":{}}}],["categories.controller.ts",{"_index":965,"title":{},"body":{"controllers/PlaceCategoriesController.html":{},"coverage.html":{}}}],["categories.controller.ts:47",{"_index":972,"title":{},"body":{"controllers/PlaceCategoriesController.html":{}}}],["categories.controller.ts:70",{"_index":978,"title":{},"body":{"controllers/PlaceCategoriesController.html":{}}}],["categories.controller.ts:97",{"_index":983,"title":{},"body":{"controllers/PlaceCategoriesController.html":{}}}],["categories.image",{"_index":1412,"title":{},"body":{"injectables/PlacesService.html":{}}}],["categories.module",{"_index":123,"title":{},"body":{"modules/AppModule.html":{}}}],["categories.module.ts",{"_index":1005,"title":{},"body":{"modules/PlaceCategoriesModule.html":{}}}],["categories.service",{"_index":986,"title":{},"body":{"controllers/PlaceCategoriesController.html":{},"modules/PlaceCategoriesModule.html":{}}}],["categories.service.ts",{"_index":1009,"title":{},"body":{"injectables/PlaceCategoriesService.html":{},"coverage.html":{}}}],["categories.service.ts:11",{"_index":1012,"title":{},"body":{"injectables/PlaceCategoriesService.html":{}}}],["categories.service.ts:18",{"_index":1014,"title":{},"body":{"injectables/PlaceCategoriesService.html":{}}}],["categories.service.ts:43",{"_index":1015,"title":{},"body":{"injectables/PlaceCategoriesService.html":{}}}],["categories.service.ts:57",{"_index":1016,"title":{},"body":{"injectables/PlaceCategoriesService.html":{}}}],["categories.title",{"_index":1419,"title":{},"body":{"injectables/PlacesService.html":{}}}],["categories/dto/create",{"_index":438,"title":{},"body":{"classes/CreatePlaceCategoryDto.html":{},"coverage.html":{}}}],["categories/dto/place",{"_index":1050,"title":{},"body":{"classes/PlaceCategoryDto.html":{},"classes/PlaceDto.html":{},"classes/SearchPlaceDto.html":{},"coverage.html":{}}}],["categories/dto/update",{"_index":1773,"title":{},"body":{"classes/UpdatePlaceCategoryDto.html":{},"coverage.html":{}}}],["categories/entities/place",{"_index":590,"title":{},"body":{"entities/Image.html":{},"entities/Place.html":{},"entities/PlaceCategory.html":{},"classes/PlaceDto.html":{},"modules/PlacesModule.html":{},"injectables/PlacesService.html":{},"classes/SearchPlaceDto.html":{},"coverage.html":{}}}],["categories/place",{"_index":122,"title":{},"body":{"modules/AppModule.html":{},"controllers/PlaceCategoriesController.html":{},"modules/PlaceCategoriesModule.html":{},"injectables/PlaceCategoriesService.html":{},"coverage.html":{}}}],["categories_image",{"_index":1413,"title":{},"body":{"injectables/PlacesService.html":{}}}],["categories_image.id",{"_index":1414,"title":{},"body":{"injectables/PlacesService.html":{}}}],["categories_t",{"_index":1420,"title":{},"body":{"injectables/PlacesService.html":{}}}],["categories_t.language",{"_index":1422,"title":{},"body":{"injectables/PlacesService.html":{}}}],["categories_t.textid",{"_index":1421,"title":{},"body":{"injectables/PlacesService.html":{}}}],["categoriesids",{"_index":449,"title":{},"body":{"classes/CreatePlaceDto.html":{},"classes/UpdatePlaceDto.html":{}}}],["category",{"_index":441,"title":{},"body":{"classes/CreatePlaceCategoryDto.html":{},"controllers/PlaceCategoriesController.html":{},"injectables/PlaceCategoriesService.html":{},"classes/PlaceCategoryDto.html":{}}}],["category'})@apiokresponse({description",{"_index":968,"title":{},"body":{"controllers/PlaceCategoriesController.html":{}}}],["category'})@apiquery({name",{"_index":981,"title":{},"body":{"controllers/PlaceCategoriesController.html":{}}}],["category.dto",{"_index":987,"title":{},"body":{"controllers/PlaceCategoriesController.html":{},"injectables/PlaceCategoriesService.html":{},"classes/PlaceDto.html":{},"classes/SearchPlaceDto.html":{},"classes/UpdatePlaceCategoryDto.html":{}}}],["category.dto.ts",{"_index":439,"title":{},"body":{"classes/CreatePlaceCategoryDto.html":{},"classes/PlaceCategoryDto.html":{},"classes/UpdatePlaceCategoryDto.html":{},"coverage.html":{}}}],["category.dto.ts:13",{"_index":1056,"title":{},"body":{"classes/PlaceCategoryDto.html":{}}}],["category.dto.ts:19",{"_index":1051,"title":{},"body":{"classes/PlaceCategoryDto.html":{}}}],["category.dto.ts:5",{"_index":445,"title":{},"body":{"classes/CreatePlaceCategoryDto.html":{}}}],["category.dto.ts:8",{"_index":444,"title":{},"body":{"classes/CreatePlaceCategoryDto.html":{}}}],["category.dto.ts:9",{"_index":1052,"title":{},"body":{"classes/PlaceCategoryDto.html":{}}}],["category.entity",{"_index":591,"title":{},"body":{"entities/Image.html":{},"entities/Place.html":{},"modules/PlaceCategoriesModule.html":{},"injectables/PlaceCategoriesService.html":{},"classes/PlaceCategoryDto.html":{},"classes/PlaceDto.html":{},"modules/PlacesModule.html":{},"injectables/PlacesService.html":{},"classes/SearchPlaceDto.html":{}}}],["category.entity.ts",{"_index":1041,"title":{},"body":{"entities/PlaceCategory.html":{},"coverage.html":{}}}],["category.entity.ts:16",{"_index":1042,"title":{},"body":{"entities/PlaceCategory.html":{}}}],["category.entity.ts:19",{"_index":1047,"title":{},"body":{"entities/PlaceCategory.html":{}}}],["category.entity.ts:23",{"_index":1044,"title":{},"body":{"entities/PlaceCategory.html":{}}}],["category.entity.ts:26",{"_index":1046,"title":{},"body":{"entities/PlaceCategory.html":{}}}],["change",{"_index":1204,"title":{},"body":{"controllers/PlacesController.html":{}}}],["changelike",{"_index":1183,"title":{},"body":{"controllers/PlacesController.html":{},"injectables/PlacesService.html":{}}}],["changelike(id",{"_index":1203,"title":{},"body":{"controllers/PlacesController.html":{}}}],["changelike(userid",{"_index":1331,"title":{},"body":{"injectables/PlacesService.html":{}}}],["check",{"_index":57,"title":{},"body":{"controllers/AppController.html":{},"injectables/CommentsService.html":{}}}],["checkcanmanage",{"_index":341,"title":{},"body":{"injectables/CommentsService.html":{}}}],["checkcanmanage(userid",{"_index":351,"title":{},"body":{"injectables/CommentsService.html":{}}}],["checkexist",{"_index":1315,"title":{},"body":{"injectables/PlacesService.html":{}}}],["checkexist(placeid",{"_index":1333,"title":{},"body":{"injectables/PlacesService.html":{}}}],["checkuserrelation",{"_index":1316,"title":{},"body":{"injectables/PlacesService.html":{}}}],["checkuserrelation(userid",{"_index":1335,"title":{},"body":{"injectables/PlacesService.html":{}}}],["class",{"_index":47,"title":{"classes/AuthDto.html":{},"classes/CommentDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreateFileDto.html":{},"classes/CreateImageDto.html":{},"classes/CreateLanguageDto.html":{},"classes/CreatePlaceCategoryDto.html":{},"classes/CreatePlaceDto.html":{},"classes/CreatePlaceTypeDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateTranslationDto.html":{},"classes/CreateUserDto.html":{},"classes/FileDto.html":{},"classes/ImageDto.html":{},"classes/LanguageDto.html":{},"classes/LoginDto.html":{},"classes/PlaceCategoryDto.html":{},"classes/PlaceDto.html":{},"classes/PlaceSlugDto.html":{},"classes/PlaceTypeDto.html":{},"classes/RoleDto.html":{},"classes/SearchPlaceDto.html":{},"classes/TokenPayloadDto.html":{},"classes/TranslationDto.html":{},"classes/UpdateCommentDto.html":{},"classes/UpdateLanguageDto.html":{},"classes/UpdatePlaceCategoryDto.html":{},"classes/UpdatePlaceDto.html":{},"classes/UpdatePlaceTypeDto.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateTranslationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserDto.html":{},"classes/ValidationExceptionDto.html":{},"classes/ValidationMessageDto.html":{}},"body":{"entities/Admin.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Comment.html":{},"classes/CommentDto.html":{},"modules/CommentsModule.html":{},"injectables/CommentsService.html":{},"classes/CreateCommentDto.html":{},"classes/CreateFileDto.html":{},"classes/CreateImageDto.html":{},"classes/CreateLanguageDto.html":{},"classes/CreatePlaceCategoryDto.html":{},"classes/CreatePlaceDto.html":{},"classes/CreatePlaceTypeDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateTranslationDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"classes/FileDto.html":{},"entities/Image.html":{},"classes/ImageDto.html":{},"controllers/ImagesController.html":{},"modules/ImagesModule.html":{},"injectables/ImagesService.html":{},"guards/JwtAuthGuard.html":{},"entities/Language.html":{},"classes/LanguageDto.html":{},"controllers/LanguagesController.html":{},"modules/LanguagesModule.html":{},"injectables/LanguagesService.html":{},"entities/Like.html":{},"classes/LoginDto.html":{},"modules/MailingModule.html":{},"injectables/MailingService.html":{},"injectables/PayloadFromTokenPipe.html":{},"entities/Place.html":{},"controllers/PlaceCategoriesController.html":{},"modules/PlaceCategoriesModule.html":{},"injectables/PlaceCategoriesService.html":{},"entities/PlaceCategory.html":{},"classes/PlaceCategoryDto.html":{},"classes/PlaceDto.html":{},"classes/PlaceSlugDto.html":{},"entities/PlaceType.html":{},"classes/PlaceTypeDto.html":{},"controllers/PlaceTypesController.html":{},"modules/PlaceTypesModule.html":{},"injectables/PlaceTypesService.html":{},"controllers/PlacesController.html":{},"modules/PlacesModule.html":{},"injectables/PlacesService.html":{},"entities/Role.html":{},"classes/RoleDto.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/SearchPlaceDto.html":{},"modules/StorageModule.html":{},"injectables/StorageService.html":{},"classes/TokenPayloadDto.html":{},"entities/Translation.html":{},"classes/TranslationDto.html":{},"controllers/TranslationsController.html":{},"modules/TranslationsModule.html":{},"injectables/TranslationsService.html":{},"classes/UpdateCommentDto.html":{},"classes/UpdateLanguageDto.html":{},"classes/UpdatePlaceCategoryDto.html":{},"classes/UpdatePlaceDto.html":{},"classes/UpdatePlaceTypeDto.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateTranslationDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserDto.html":{},"injectables/UserFromTokenPipe.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ValidationExceptionDto.html":{},"classes/ValidationMessageDto.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":185,"title":{},"body":{"classes/AuthDto.html":{},"classes/CommentDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreateFileDto.html":{},"classes/CreateImageDto.html":{},"classes/CreateLanguageDto.html":{},"classes/CreatePlaceCategoryDto.html":{},"classes/CreatePlaceDto.html":{},"classes/CreatePlaceTypeDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateTranslationDto.html":{},"classes/CreateUserDto.html":{},"classes/FileDto.html":{},"classes/ImageDto.html":{},"classes/LanguageDto.html":{},"classes/LoginDto.html":{},"classes/PlaceCategoryDto.html":{},"classes/PlaceDto.html":{},"classes/PlaceSlugDto.html":{},"classes/PlaceTypeDto.html":{},"classes/RoleDto.html":{},"classes/SearchPlaceDto.html":{},"classes/TokenPayloadDto.html":{},"classes/TranslationDto.html":{},"classes/UpdateCommentDto.html":{},"classes/UpdateLanguageDto.html":{},"classes/UpdatePlaceCategoryDto.html":{},"classes/UpdatePlaceDto.html":{},"classes/UpdatePlaceTypeDto.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateTranslationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserDto.html":{},"classes/ValidationExceptionDto.html":{},"classes/ValidationMessageDto.html":{},"overview.html":{}}}],["classserializerinterceptor",{"_index":619,"title":{},"body":{"controllers/ImagesController.html":{},"controllers/PlaceCategoriesController.html":{},"controllers/PlaceTypesController.html":{},"controllers/PlacesController.html":{},"controllers/TranslationsController.html":{},"controllers/UsersController.html":{}}}],["client",{"_index":907,"title":{},"body":{"injectables/MailingService.html":{}}}],["cloud/storage",{"_index":1597,"title":{},"body":{"injectables/StorageService.html":{},"dependencies.html":{}}}],["cloud/translate",{"_index":1721,"title":{},"body":{"injectables/TranslationsService.html":{},"dependencies.html":{}}}],["cluster_appmodule",{"_index":85,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":86,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":194,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":197,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":195,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":196,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_commentsmodule",{"_index":331,"title":{},"body":{"modules/CommentsModule.html":{},"overview.html":{}}}],["cluster_commentsmodule_exports",{"_index":333,"title":{},"body":{"modules/CommentsModule.html":{},"overview.html":{}}}],["cluster_commentsmodule_providers",{"_index":332,"title":{},"body":{"modules/CommentsModule.html":{},"overview.html":{}}}],["cluster_imagesmodule",{"_index":677,"title":{},"body":{"modules/ImagesModule.html":{},"overview.html":{}}}],["cluster_imagesmodule_exports",{"_index":679,"title":{},"body":{"modules/ImagesModule.html":{},"overview.html":{}}}],["cluster_imagesmodule_imports",{"_index":680,"title":{},"body":{"modules/ImagesModule.html":{}}}],["cluster_imagesmodule_providers",{"_index":678,"title":{},"body":{"modules/ImagesModule.html":{},"overview.html":{}}}],["cluster_languagesmodule",{"_index":807,"title":{},"body":{"modules/LanguagesModule.html":{},"overview.html":{}}}],["cluster_languagesmodule_exports",{"_index":808,"title":{},"body":{"modules/LanguagesModule.html":{},"overview.html":{}}}],["cluster_languagesmodule_providers",{"_index":809,"title":{},"body":{"modules/LanguagesModule.html":{},"overview.html":{}}}],["cluster_mailingmodule",{"_index":849,"title":{},"body":{"modules/MailingModule.html":{},"overview.html":{}}}],["cluster_mailingmodule_exports",{"_index":851,"title":{},"body":{"modules/MailingModule.html":{},"overview.html":{}}}],["cluster_mailingmodule_providers",{"_index":850,"title":{},"body":{"modules/MailingModule.html":{},"overview.html":{}}}],["cluster_placecategoriesmodule",{"_index":1002,"title":{},"body":{"modules/PlaceCategoriesModule.html":{},"overview.html":{}}}],["cluster_placecategoriesmodule_imports",{"_index":1003,"title":{},"body":{"modules/PlaceCategoriesModule.html":{}}}],["cluster_placecategoriesmodule_providers",{"_index":1004,"title":{},"body":{"modules/PlaceCategoriesModule.html":{},"overview.html":{}}}],["cluster_placesmodule",{"_index":1307,"title":{},"body":{"modules/PlacesModule.html":{},"overview.html":{}}}],["cluster_placesmodule_imports",{"_index":1309,"title":{},"body":{"modules/PlacesModule.html":{}}}],["cluster_placesmodule_providers",{"_index":1308,"title":{},"body":{"modules/PlacesModule.html":{},"overview.html":{}}}],["cluster_placetypesmodule",{"_index":1150,"title":{},"body":{"modules/PlaceTypesModule.html":{},"overview.html":{}}}],["cluster_placetypesmodule_imports",{"_index":1152,"title":{},"body":{"modules/PlaceTypesModule.html":{}}}],["cluster_placetypesmodule_providers",{"_index":1151,"title":{},"body":{"modules/PlaceTypesModule.html":{},"overview.html":{}}}],["cluster_rolesmodule",{"_index":1532,"title":{},"body":{"modules/RolesModule.html":{},"overview.html":{}}}],["cluster_rolesmodule_exports",{"_index":1533,"title":{},"body":{"modules/RolesModule.html":{},"overview.html":{}}}],["cluster_rolesmodule_providers",{"_index":1534,"title":{},"body":{"modules/RolesModule.html":{},"overview.html":{}}}],["cluster_storagemodule",{"_index":1569,"title":{},"body":{"modules/StorageModule.html":{},"overview.html":{}}}],["cluster_storagemodule_exports",{"_index":1570,"title":{},"body":{"modules/StorageModule.html":{},"overview.html":{}}}],["cluster_storagemodule_providers",{"_index":1571,"title":{},"body":{"modules/StorageModule.html":{},"overview.html":{}}}],["cluster_translationsmodule",{"_index":1687,"title":{},"body":{"modules/TranslationsModule.html":{},"overview.html":{}}}],["cluster_translationsmodule_exports",{"_index":1688,"title":{},"body":{"modules/TranslationsModule.html":{},"overview.html":{}}}],["cluster_translationsmodule_imports",{"_index":1690,"title":{},"body":{"modules/TranslationsModule.html":{}}}],["cluster_translationsmodule_providers",{"_index":1689,"title":{},"body":{"modules/TranslationsModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":1868,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":1870,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_imports",{"_index":1871,"title":{},"body":{"modules/UsersModule.html":{}}}],["cluster_usersmodule_providers",{"_index":1869,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["code",{"_index":432,"title":{},"body":{"classes/CreateLanguageDto.html":{},"entities/Language.html":{},"classes/LanguageDto.html":{},"injectables/LanguagesService.html":{},"classes/ValidationExceptionDto.html":{},"classes/ValidationMessageDto.html":{}}}],["column",{"_index":37,"title":{},"body":{"entities/Admin.html":{},"entities/Comment.html":{},"entities/Image.html":{},"entities/Language.html":{},"entities/Place.html":{},"entities/PlaceCategory.html":{},"entities/PlaceType.html":{},"entities/Role.html":{},"entities/Translation.html":{},"entities/User.html":{}}}],["column({default",{"_index":282,"title":{},"body":{"entities/Comment.html":{},"entities/Image.html":{},"entities/Place.html":{},"entities/PlaceType.html":{},"entities/Translation.html":{},"entities/User.html":{}}}],["column({nullable",{"_index":930,"title":{},"body":{"entities/Place.html":{}}}],["column({type",{"_index":18,"title":{},"body":{"entities/Admin.html":{},"entities/Comment.html":{},"entities/Image.html":{},"entities/Language.html":{},"entities/Place.html":{},"entities/PlaceCategory.html":{},"entities/PlaceType.html":{},"entities/Role.html":{},"entities/Translation.html":{},"entities/User.html":{}}}],["comment",{"_index":274,"title":{"entities/Comment.html":{}},"body":{"entities/Comment.html":{},"classes/CommentDto.html":{},"modules/CommentsModule.html":{},"injectables/CommentsService.html":{},"entities/Place.html":{},"classes/PlaceDto.html":{},"controllers/PlacesController.html":{},"entities/User.html":{},"coverage.html":{}}}],["comment'})@apiokresponse({description",{"_index":1192,"title":{},"body":{"controllers/PlacesController.html":{}}}],["comment'})@auth()@delete('comments/:commentid",{"_index":1219,"title":{},"body":{"controllers/PlacesController.html":{}}}],["comment'})@auth(rolenamesenum.owner",{"_index":1195,"title":{},"body":{"controllers/PlacesController.html":{}}}],["comment'})@useinterceptors(classserializerinterceptor)@auth()@put('comments/:commentid",{"_index":1246,"title":{},"body":{"controllers/PlacesController.html":{}}}],["comment'})@useinterceptors(classserializerinterceptor)@auth(rolenamesenum.owner",{"_index":1200,"title":{},"body":{"controllers/PlacesController.html":{}}}],["comment.dto",{"_index":374,"title":{},"body":{"injectables/CommentsService.html":{},"controllers/PlacesController.html":{},"classes/UpdateCommentDto.html":{}}}],["comment.dto.ts",{"_index":410,"title":{},"body":{"classes/CreateCommentDto.html":{},"classes/UpdateCommentDto.html":{},"coverage.html":{}}}],["comment.dto.ts:5",{"_index":411,"title":{},"body":{"classes/CreateCommentDto.html":{}}}],["comment.place",{"_index":393,"title":{},"body":{"injectables/CommentsService.html":{},"entities/Place.html":{}}}],["comment.place.id",{"_index":394,"title":{},"body":{"injectables/CommentsService.html":{}}}],["comment.text",{"_index":397,"title":{},"body":{"injectables/CommentsService.html":{}}}],["comment.user",{"_index":395,"title":{},"body":{"injectables/CommentsService.html":{},"entities/User.html":{}}}],["comment.user.id",{"_index":396,"title":{},"body":{"injectables/CommentsService.html":{}}}],["commentdto",{"_index":299,"title":{"classes/CommentDto.html":{}},"body":{"classes/CommentDto.html":{},"controllers/PlacesController.html":{},"coverage.html":{}}}],["commentdto(c",{"_index":1293,"title":{},"body":{"controllers/PlacesController.html":{}}}],["commentdto(comment",{"_index":1296,"title":{},"body":{"controllers/PlacesController.html":{}}}],["commentdto})@apiforbiddenresponse({type",{"_index":1244,"title":{},"body":{"controllers/PlacesController.html":{}}}],["commentdto})@apiparam({name",{"_index":1199,"title":{},"body":{"controllers/PlacesController.html":{}}}],["commentid",{"_index":352,"title":{},"body":{"injectables/CommentsService.html":{},"controllers/PlacesController.html":{}}}],["comments",{"_index":381,"title":{},"body":{"injectables/CommentsService.html":{},"entities/Place.html":{},"classes/PlaceDto.html":{},"controllers/PlacesController.html":{},"entities/User.html":{}}}],["comments'})@apibearerauth('access",{"_index":1225,"title":{},"body":{"controllers/PlacesController.html":{}}}],["comments.map((c",{"_index":388,"title":{},"body":{"injectables/CommentsService.html":{},"controllers/PlacesController.html":{}}}],["comments.service",{"_index":336,"title":{},"body":{"modules/CommentsModule.html":{}}}],["comments/comments.module",{"_index":124,"title":{},"body":{"modules/AppModule.html":{},"modules/PlacesModule.html":{}}}],["comments/comments.service",{"_index":1260,"title":{},"body":{"controllers/PlacesController.html":{}}}],["comments/dto/comment.dto",{"_index":1261,"title":{},"body":{"controllers/PlacesController.html":{}}}],["comments/dto/create",{"_index":1262,"title":{},"body":{"controllers/PlacesController.html":{}}}],["comments/dto/update",{"_index":1263,"title":{},"body":{"controllers/PlacesController.html":{}}}],["comments/entities/comment.entity",{"_index":961,"title":{},"body":{"entities/Place.html":{},"entities/User.html":{}}}],["commentsmodule",{"_index":88,"title":{"modules/CommentsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CommentsModule.html":{},"modules/PlacesModule.html":{},"modules.html":{},"overview.html":{}}}],["commentsrepository",{"_index":350,"title":{},"body":{"injectables/CommentsService.html":{}}}],["commentsservice",{"_index":334,"title":{"injectables/CommentsService.html":{}},"body":{"modules/CommentsModule.html":{},"injectables/CommentsService.html":{},"controllers/PlacesController.html":{},"coverage.html":{},"overview.html":{}}}],["commercial",{"_index":474,"title":{},"body":{"classes/CreatePlaceTypeDto.html":{},"entities/PlaceType.html":{},"classes/PlaceTypeDto.html":{},"injectables/PlaceTypesService.html":{}}}],["config/configuration",{"_index":110,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/MailingModule.html":{},"injectables/StorageService.html":{},"injectables/TranslationsService.html":{}}}],["configmodule",{"_index":107,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/MailingModule.html":{}}}],["configmodule.forroot",{"_index":125,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":205,"title":{},"body":{"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/MailingModule.html":{},"injectables/StorageService.html":{},"injectables/TranslationsService.html":{}}}],["configservice.get('database')?.host",{"_index":527,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('database')?.name",{"_index":531,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('database')?.password",{"_index":529,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('database')?.user",{"_index":528,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('emailconfig')?.email",{"_index":862,"title":{},"body":{"modules/MailingModule.html":{}}}],["configservice.get('emailconfig')?.emailpw",{"_index":863,"title":{},"body":{"modules/MailingModule.html":{}}}],["configservice.get('jwt')?.expirationtime",{"_index":216,"title":{},"body":{"modules/AuthModule.html":{}}}],["configservice.get('jwt')?.secret",{"_index":213,"title":{},"body":{"modules/AuthModule.html":{}}}],["configuration",{"_index":109,"title":{},"body":{"modules/AppModule.html":{}}}],["confirm",{"_index":900,"title":{},"body":{"injectables/MailingService.html":{},"controllers/UsersController.html":{}}}],["confirm_link",{"_index":905,"title":{},"body":{"injectables/MailingService.html":{}}}],["confirmed",{"_index":261,"title":{},"body":{"injectables/AuthService.html":{},"classes/UserDto.html":{}}}],["confirmemail",{"_index":1839,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["confirmemail(@tokenpayload",{"_index":1863,"title":{},"body":{"controllers/UsersController.html":{}}}],["confirmemail(tokenpayload",{"_index":1841,"title":{},"body":{"controllers/UsersController.html":{}}}],["confirmemail(userid",{"_index":1881,"title":{},"body":{"injectables/UsersService.html":{}}}],["const",{"_index":181,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CommentsService.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"guards/JwtAuthGuard.html":{},"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{},"injectables/MailingService.html":{},"injectables/PayloadFromTokenPipe.html":{},"controllers/PlaceCategoriesController.html":{},"injectables/PlaceCategoriesService.html":{},"controllers/PlaceTypesController.html":{},"injectables/PlaceTypesService.html":{},"controllers/PlacesController.html":{},"injectables/PlacesService.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"injectables/StorageService.html":{},"controllers/TranslationsController.html":{},"injectables/TranslationsService.html":{},"injectables/UserFromTokenPipe.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":187,"title":{},"body":{"classes/AuthDto.html":{},"injectables/AuthService.html":{},"classes/CommentDto.html":{},"injectables/CommentsService.html":{},"classes/ImageDto.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"guards/JwtAuthGuard.html":{},"injectables/LanguagesService.html":{},"injectables/MailingService.html":{},"injectables/PayloadFromTokenPipe.html":{},"controllers/PlaceCategoriesController.html":{},"injectables/PlaceCategoriesService.html":{},"classes/PlaceCategoryDto.html":{},"classes/PlaceDto.html":{},"classes/PlaceTypeDto.html":{},"injectables/PlaceTypesService.html":{},"controllers/PlacesController.html":{},"injectables/PlacesService.html":{},"classes/RoleDto.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"classes/SearchPlaceDto.html":{},"injectables/StorageService.html":{},"classes/TokenPayloadDto.html":{},"classes/TranslationDto.html":{},"injectables/TranslationsService.html":{},"classes/UserDto.html":{},"injectables/UserFromTokenPipe.html":{},"injectables/UsersService.html":{}}}],["constructor(commentsrepository",{"_index":347,"title":{},"body":{"injectables/CommentsService.html":{}}}],["constructor(configservice",{"_index":1580,"title":{},"body":{"injectables/StorageService.html":{}}}],["constructor(imagesrepository",{"_index":686,"title":{},"body":{"injectables/ImagesService.html":{}}}],["constructor(jwtservice",{"_index":723,"title":{},"body":{"guards/JwtAuthGuard.html":{},"injectables/PayloadFromTokenPipe.html":{}}}],["constructor(languagesrepository",{"_index":815,"title":{},"body":{"injectables/LanguagesService.html":{}}}],["constructor(mailerservice",{"_index":875,"title":{},"body":{"injectables/MailingService.html":{}}}],["constructor(partial",{"_index":304,"title":{},"body":{"classes/CommentDto.html":{},"classes/ImageDto.html":{},"classes/PlaceCategoryDto.html":{},"classes/PlaceDto.html":{},"classes/PlaceTypeDto.html":{},"classes/RoleDto.html":{},"classes/SearchPlaceDto.html":{},"classes/TokenPayloadDto.html":{},"classes/TranslationDto.html":{},"classes/UserDto.html":{}}}],["constructor(placecategoriesrepository",{"_index":1010,"title":{},"body":{"injectables/PlaceCategoriesService.html":{}}}],["constructor(placesrepository",{"_index":1325,"title":{},"body":{"injectables/PlacesService.html":{}}}],["constructor(placetypesrepository",{"_index":1157,"title":{},"body":{"injectables/PlaceTypesService.html":{}}}],["constructor(private",{"_index":172,"title":{},"body":{"controllers/AuthController.html":{},"guards/JwtAuthGuard.html":{},"controllers/LanguagesController.html":{},"injectables/MailingService.html":{},"injectables/PayloadFromTokenPipe.html":{},"controllers/PlaceTypesController.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/StorageService.html":{},"controllers/TranslationsController.html":{},"injectables/UserFromTokenPipe.html":{},"controllers/UsersController.html":{}}}],["constructor(reflector",{"_index":1514,"title":{},"body":{"guards/RolesGuard.html":{}}}],["constructor(rolesrepository",{"_index":1539,"title":{},"body":{"injectables/RolesService.html":{}}}],["constructor(token",{"_index":188,"title":{},"body":{"classes/AuthDto.html":{}}}],["constructor(translationsrepository",{"_index":1700,"title":{},"body":{"injectables/TranslationsService.html":{}}}],["constructor(usersrepository",{"_index":1878,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(usersservice",{"_index":224,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserFromTokenPipe.html":{}}}],["contenttype",{"_index":1620,"title":{},"body":{"injectables/StorageService.html":{}}}],["context",{"_index":728,"title":{},"body":{"guards/JwtAuthGuard.html":{},"injectables/MailingService.html":{},"guards/RolesGuard.html":{}}}],["context.getclass",{"_index":1525,"title":{},"body":{"guards/RolesGuard.html":{}}}],["context.gethandler",{"_index":1524,"title":{},"body":{"guards/RolesGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":733,"title":{},"body":{"guards/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["controller",{"_index":50,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ImagesController.html":{},"controllers/LanguagesController.html":{},"controllers/PlaceCategoriesController.html":{},"controllers/PlaceTypesController.html":{},"controllers/PlacesController.html":{},"controllers/RolesController.html":{},"controllers/TranslationsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ImagesController.html":{},"controllers/LanguagesController.html":{},"controllers/PlaceCategoriesController.html":{},"controllers/PlaceTypesController.html":{},"controllers/PlacesController.html":{},"controllers/RolesController.html":{},"controllers/TranslationsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('/places",{"_index":1266,"title":{},"body":{"controllers/PlacesController.html":{}}}],["controller('auth",{"_index":171,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('images",{"_index":643,"title":{},"body":{"controllers/ImagesController.html":{}}}],["controller('languages",{"_index":795,"title":{},"body":{"controllers/LanguagesController.html":{}}}],["controller('placecategories",{"_index":991,"title":{},"body":{"controllers/PlaceCategoriesController.html":{}}}],["controller('placetypes",{"_index":1140,"title":{},"body":{"controllers/PlaceTypesController.html":{}}}],["controller('roles",{"_index":1505,"title":{},"body":{"controllers/RolesController.html":{}}}],["controller('translations",{"_index":1672,"title":{},"body":{"controllers/TranslationsController.html":{}}}],["controller('users",{"_index":1855,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":52,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/ImagesController.html":{},"modules/ImagesModule.html":{},"controllers/LanguagesController.html":{},"modules/LanguagesModule.html":{},"controllers/PlaceCategoriesController.html":{},"modules/PlaceCategoriesModule.html":{},"controllers/PlaceTypesController.html":{},"modules/PlaceTypesModule.html":{},"controllers/PlacesController.html":{},"modules/PlacesModule.html":{},"controllers/RolesController.html":{},"modules/RolesModule.html":{},"controllers/TranslationsController.html":{},"modules/TranslationsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["coordinates",{"_index":450,"title":{},"body":{"classes/CreatePlaceDto.html":{},"entities/Place.html":{},"classes/PlaceDto.html":{},"injectables/PlacesService.html":{},"classes/SearchPlaceDto.html":{},"classes/UpdatePlaceDto.html":{}}}],["corsconfig",{"_index":1933,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["count",{"_index":1080,"title":{},"body":{"classes/PlaceDto.html":{},"classes/SearchPlaceDto.html":{}}}],["coverage",{"_index":1915,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":134,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"classes/LanguageDto.html":{},"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{},"controllers/PlaceCategoriesController.html":{},"injectables/PlaceCategoriesService.html":{},"controllers/PlaceTypesController.html":{},"injectables/PlaceTypesService.html":{},"controllers/PlacesController.html":{},"injectables/PlacesService.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"controllers/TranslationsController.html":{},"injectables/TranslationsService.html":{},"classes/UpdateCommentDto.html":{},"classes/UpdateLanguageDto.html":{},"classes/UpdatePlaceCategoryDto.html":{},"classes/UpdatePlaceDto.html":{},"classes/UpdatePlaceTypeDto.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateTranslationDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UsersService.html":{}}}],["create(@body",{"_index":176,"title":{},"body":{"controllers/AuthController.html":{},"controllers/RolesController.html":{},"controllers/TranslationsController.html":{}}}],["create(createlanguagedto",{"_index":766,"title":{},"body":{"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{}}}],["create(createroledto",{"_index":1488,"title":{},"body":{"controllers/RolesController.html":{},"injectables/RolesService.html":{}}}],["create(createtranslationdto",{"_index":1653,"title":{},"body":{"controllers/TranslationsController.html":{}}}],["create(createuserdto",{"_index":136,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UsersService.html":{}}}],["create(filedto",{"_index":603,"title":{},"body":{"controllers/ImagesController.html":{}}}],["create(imageurl",{"_index":689,"title":{},"body":{"injectables/ImagesService.html":{}}}],["create(langid",{"_index":967,"title":{},"body":{"controllers/PlaceCategoriesController.html":{},"injectables/PlaceCategoriesService.html":{},"controllers/PlaceTypesController.html":{},"injectables/PlaceTypesService.html":{},"controllers/PlacesController.html":{},"injectables/PlacesService.html":{}}}],["createcomment",{"_index":1184,"title":{},"body":{"controllers/PlacesController.html":{}}}],["createcomment(id",{"_index":1213,"title":{},"body":{"controllers/PlacesController.html":{}}}],["createcommentdto",{"_index":356,"title":{"classes/CreateCommentDto.html":{}},"body":{"injectables/CommentsService.html":{},"classes/CreateCommentDto.html":{},"controllers/PlacesController.html":{},"classes/UpdateCommentDto.html":{},"coverage.html":{}}}],["createcommentdto.text",{"_index":398,"title":{},"body":{"injectables/CommentsService.html":{}}}],["createcommentdto:5",{"_index":1769,"title":{},"body":{"classes/UpdateCommentDto.html":{}}}],["created",{"_index":310,"title":{},"body":{"classes/CommentDto.html":{},"classes/ImageDto.html":{},"classes/PlaceDto.html":{},"classes/SearchPlaceDto.html":{},"classes/UserDto.html":{}}}],["createdat",{"_index":277,"title":{},"body":{"entities/Comment.html":{},"classes/CommentDto.html":{},"entities/Image.html":{},"classes/ImageDto.html":{},"entities/Place.html":{},"classes/PlaceDto.html":{},"classes/SearchPlaceDto.html":{},"entities/User.html":{},"classes/UserDto.html":{}}}],["createfiledto",{"_index":412,"title":{"classes/CreateFileDto.html":{}},"body":{"classes/CreateFileDto.html":{},"classes/CreateImageDto.html":{},"coverage.html":{}}}],["createfiledto:5",{"_index":426,"title":{},"body":{"classes/CreateImageDto.html":{}}}],["createimagedto",{"_index":421,"title":{"classes/CreateImageDto.html":{}},"body":{"classes/CreateImageDto.html":{},"controllers/ImagesController.html":{},"coverage.html":{}}}],["createlanguagedto",{"_index":429,"title":{"classes/CreateLanguageDto.html":{}},"body":{"classes/CreateLanguageDto.html":{},"classes/LanguageDto.html":{},"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{},"classes/UpdateLanguageDto.html":{},"coverage.html":{}}}],["createlanguagedto.code",{"_index":828,"title":{},"body":{"injectables/LanguagesService.html":{}}}],["createlanguagedto.title",{"_index":827,"title":{},"body":{"injectables/LanguagesService.html":{}}}],["createlanguagedto:5",{"_index":759,"title":{},"body":{"classes/LanguageDto.html":{}}}],["createlanguagedto:8",{"_index":758,"title":{},"body":{"classes/LanguageDto.html":{}}}],["createlanguagedto})@post",{"_index":770,"title":{},"body":{"controllers/LanguagesController.html":{}}}],["createlike",{"_index":1317,"title":{},"body":{"injectables/PlacesService.html":{}}}],["createparamdecorator",{"_index":2086,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createplacecategorydto",{"_index":436,"title":{"classes/CreatePlaceCategoryDto.html":{}},"body":{"classes/CreatePlaceCategoryDto.html":{},"controllers/PlaceCategoriesController.html":{},"injectables/PlaceCategoriesService.html":{},"classes/UpdatePlaceCategoryDto.html":{},"coverage.html":{}}}],["createplacecategorydto.imageid",{"_index":1024,"title":{},"body":{"injectables/PlaceCategoriesService.html":{}}}],["createplacecategorydto.title",{"_index":1021,"title":{},"body":{"injectables/PlaceCategoriesService.html":{}}}],["createplacecategorydto})@post",{"_index":971,"title":{},"body":{"controllers/PlaceCategoriesController.html":{}}}],["createplacecomment",{"_index":342,"title":{},"body":{"injectables/CommentsService.html":{}}}],["createplacecomment(placeid",{"_index":355,"title":{},"body":{"injectables/CommentsService.html":{}}}],["createplacedto",{"_index":446,"title":{"classes/CreatePlaceDto.html":{}},"body":{"classes/CreatePlaceDto.html":{},"controllers/PlacesController.html":{},"injectables/PlacesService.html":{},"classes/UpdatePlaceDto.html":{},"coverage.html":{}}}],["createplacedto.coordinates",{"_index":1395,"title":{},"body":{"injectables/PlacesService.html":{}}}],["createplacedto.imagesids",{"_index":1383,"title":{},"body":{"injectables/PlacesService.html":{}}}],["createplacedto.slug",{"_index":1378,"title":{},"body":{"injectables/PlacesService.html":{}}}],["createplacedto.website",{"_index":1396,"title":{},"body":{"injectables/PlacesService.html":{}}}],["createplacedto:11",{"_index":1782,"title":{},"body":{"classes/UpdatePlaceDto.html":{}}}],["createplacedto:14",{"_index":1779,"title":{},"body":{"classes/UpdatePlaceDto.html":{}}}],["createplacedto:17",{"_index":1784,"title":{},"body":{"classes/UpdatePlaceDto.html":{}}}],["createplacedto:24",{"_index":1780,"title":{},"body":{"classes/UpdatePlaceDto.html":{}}}],["createplacedto:31",{"_index":1783,"title":{},"body":{"classes/UpdatePlaceDto.html":{}}}],["createplacedto:34",{"_index":1781,"title":{},"body":{"classes/UpdatePlaceDto.html":{}}}],["createplacedto:41",{"_index":1787,"title":{},"body":{"classes/UpdatePlaceDto.html":{}}}],["createplacedto:5",{"_index":1785,"title":{},"body":{"classes/UpdatePlaceDto.html":{}}}],["createplacedto:8",{"_index":1786,"title":{},"body":{"classes/UpdatePlaceDto.html":{}}}],["createplacedto})@auth()@post",{"_index":1211,"title":{},"body":{"controllers/PlacesController.html":{}}}],["createplacetypedto",{"_index":471,"title":{"classes/CreatePlaceTypeDto.html":{}},"body":{"classes/CreatePlaceTypeDto.html":{},"controllers/PlaceTypesController.html":{},"injectables/PlaceTypesService.html":{},"classes/UpdatePlaceTypeDto.html":{},"coverage.html":{}}}],["createplacetypedto.commercial",{"_index":1168,"title":{},"body":{"injectables/PlaceTypesService.html":{}}}],["createplacetypedto.imageid",{"_index":1169,"title":{},"body":{"injectables/PlaceTypesService.html":{}}}],["createplacetypedto.title",{"_index":1164,"title":{},"body":{"injectables/PlaceTypesService.html":{}}}],["createplacetypedto})@post",{"_index":1127,"title":{},"body":{"controllers/PlaceTypesController.html":{}}}],["createquerybuilder",{"_index":1434,"title":{},"body":{"injectables/PlacesService.html":{}}}],["createquerybuilder('lang",{"_index":1748,"title":{},"body":{"injectables/TranslationsService.html":{}}}],["createquerybuilder('pc",{"_index":1031,"title":{},"body":{"injectables/PlaceCategoriesService.html":{}}}],["createquerybuilder('place",{"_index":1401,"title":{},"body":{"injectables/PlacesService.html":{}}}],["createquerybuilder('pt",{"_index":1175,"title":{},"body":{"injectables/PlaceTypesService.html":{}}}],["createquerybuilder('t",{"_index":1730,"title":{},"body":{"injectables/TranslationsService.html":{}}}],["createquerybuilder('user",{"_index":1898,"title":{},"body":{"injectables/UsersService.html":{}}}],["createroledto",{"_index":491,"title":{"classes/CreateRoleDto.html":{}},"body":{"classes/CreateRoleDto.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"classes/UpdateRoleDto.html":{},"coverage.html":{}}}],["createroledto})@auth(rolenamesenum.owner)@post",{"_index":1492,"title":{},"body":{"controllers/RolesController.html":{}}}],["createtranslation",{"_index":1696,"title":{},"body":{"injectables/TranslationsService.html":{}}}],["createtranslation(langid",{"_index":1703,"title":{},"body":{"injectables/TranslationsService.html":{}}}],["createtranslationdto",{"_index":501,"title":{"classes/CreateTranslationDto.html":{}},"body":{"classes/CreateTranslationDto.html":{},"controllers/TranslationsController.html":{},"classes/UpdateTranslationDto.html":{},"coverage.html":{}}}],["createtranslationdto.langid",{"_index":1673,"title":{},"body":{"controllers/TranslationsController.html":{}}}],["createtranslationdto.original",{"_index":1675,"title":{},"body":{"controllers/TranslationsController.html":{}}}],["createtranslationdto.text",{"_index":1674,"title":{},"body":{"controllers/TranslationsController.html":{}}}],["createtranslationdto.textid",{"_index":1676,"title":{},"body":{"controllers/TranslationsController.html":{}}}],["createtranslationdto})@useinterceptors(classserializerinterceptor)@post",{"_index":1656,"title":{},"body":{"controllers/TranslationsController.html":{}}}],["createtranslations",{"_index":1318,"title":{},"body":{"injectables/PlacesService.html":{}}}],["createtranslations(langid",{"_index":1339,"title":{},"body":{"injectables/PlacesService.html":{}}}],["createuserdto",{"_index":137,"title":{"classes/CreateUserDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/MailingService.html":{},"classes/UpdateUserDto.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["createuserdto})@post('/register",{"_index":145,"title":{},"body":{"controllers/AuthController.html":{}}}],["credentials",{"_index":155,"title":{},"body":{"controllers/AuthController.html":{}}}],["ctx",{"_index":2087,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":2088,"title":{},"body":{"miscellaneous/variables.html":{}}}],["current_timestamp",{"_index":283,"title":{},"body":{"entities/Comment.html":{},"entities/Image.html":{},"entities/Place.html":{},"entities/User.html":{}}}],["data",{"_index":645,"title":{},"body":{"controllers/ImagesController.html":{},"injectables/PlacesService.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["data')@useinterceptors(undefined)@useinterceptors(classserializerinterceptor)@auth()@post",{"_index":607,"title":{},"body":{"controllers/ImagesController.html":{}}}],["data'})@apiokresponse({description",{"_index":1849,"title":{},"body":{"controllers/UsersController.html":{}}}],["database",{"_index":530,"title":{},"body":{"modules/DatabaseModule.html":{},"interfaces/IDatabaseConfig.html":{},"interfaces/IGoogleCloudConfig.html":{},"interfaces/IJwtConfig.html":{},"interfaces/IMailerConfig.html":{}}}],["database/database.module",{"_index":111,"title":{},"body":{"modules/AppModule.html":{}}}],["databasemodule",{"_index":89,"title":{"modules/DatabaseModule.html":{}},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules.html":{},"overview.html":{}}}],["date",{"_index":281,"title":{},"body":{"entities/Comment.html":{},"classes/CommentDto.html":{},"entities/Image.html":{},"classes/ImageDto.html":{},"entities/Place.html":{},"classes/PlaceDto.html":{},"classes/SearchPlaceDto.html":{},"entities/User.html":{},"classes/UserDto.html":{}}}],["date.now()}${filename.ext",{"_index":1610,"title":{},"body":{"injectables/StorageService.html":{}}}],["declarations",{"_index":81,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommentsModule.html":{},"modules/ImagesModule.html":{},"modules/LanguagesModule.html":{},"modules/MailingModule.html":{},"modules/PlaceCategoriesModule.html":{},"modules/PlaceTypesModule.html":{},"modules/PlacesModule.html":{},"modules/RolesModule.html":{},"modules/StorageModule.html":{},"modules/TranslationsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorators",{"_index":17,"title":{},"body":{"entities/Admin.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"entities/Comment.html":{},"classes/CommentDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreateFileDto.html":{},"classes/CreateImageDto.html":{},"classes/CreateLanguageDto.html":{},"classes/CreatePlaceCategoryDto.html":{},"classes/CreatePlaceDto.html":{},"classes/CreatePlaceTypeDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateTranslationDto.html":{},"classes/CreateUserDto.html":{},"classes/FileDto.html":{},"entities/Image.html":{},"classes/ImageDto.html":{},"controllers/ImagesController.html":{},"entities/Language.html":{},"classes/LanguageDto.html":{},"controllers/LanguagesController.html":{},"entities/Like.html":{},"classes/LoginDto.html":{},"entities/Place.html":{},"controllers/PlaceCategoriesController.html":{},"entities/PlaceCategory.html":{},"classes/PlaceCategoryDto.html":{},"classes/PlaceDto.html":{},"classes/PlaceSlugDto.html":{},"entities/PlaceType.html":{},"classes/PlaceTypeDto.html":{},"controllers/PlaceTypesController.html":{},"controllers/PlacesController.html":{},"entities/Role.html":{},"classes/RoleDto.html":{},"controllers/RolesController.html":{},"classes/SearchPlaceDto.html":{},"entities/Translation.html":{},"classes/TranslationDto.html":{},"controllers/TranslationsController.html":{},"classes/UpdateCommentDto.html":{},"classes/UpdatePlaceDto.html":{},"entities/User.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"classes/ValidationExceptionDto.html":{},"classes/ValidationMessageDto.html":{}}}],["decorators/roles.decorator",{"_index":1520,"title":{},"body":{"guards/RolesGuard.html":{}}}],["default",{"_index":296,"title":{},"body":{"entities/Comment.html":{},"classes/CreatePlaceTypeDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateTranslationDto.html":{},"classes/CreateUserDto.html":{},"interfaces/IDatabaseConfig.html":{},"interfaces/IGoogleCloudConfig.html":{},"interfaces/IJwtConfig.html":{},"interfaces/IMailerConfig.html":{},"entities/Image.html":{},"classes/LoginDto.html":{},"entities/Place.html":{},"entities/PlaceType.html":{},"classes/PlaceTypeDto.html":{},"injectables/PlacesService.html":{},"injectables/StorageService.html":{},"entities/Translation.html":{},"injectables/TranslationsService.html":{},"classes/UpdatePlaceDto.html":{},"entities/User.html":{},"classes/UserDto.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["defaultrole",{"_index":1894,"title":{},"body":{"injectables/UsersService.html":{}}}],["defaults",{"_index":865,"title":{},"body":{"modules/MailingModule.html":{}}}],["defined",{"_index":22,"title":{},"body":{"entities/Admin.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"injectables/AuthService.html":{},"entities/Comment.html":{},"classes/CommentDto.html":{},"injectables/CommentsService.html":{},"classes/CreateCommentDto.html":{},"classes/CreateFileDto.html":{},"classes/CreateImageDto.html":{},"classes/CreateLanguageDto.html":{},"classes/CreatePlaceCategoryDto.html":{},"classes/CreatePlaceDto.html":{},"classes/CreatePlaceTypeDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateTranslationDto.html":{},"classes/CreateUserDto.html":{},"classes/FileDto.html":{},"entities/Image.html":{},"classes/ImageDto.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"guards/JwtAuthGuard.html":{},"entities/Language.html":{},"classes/LanguageDto.html":{},"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{},"entities/Like.html":{},"classes/LoginDto.html":{},"injectables/MailingService.html":{},"injectables/PayloadFromTokenPipe.html":{},"entities/Place.html":{},"controllers/PlaceCategoriesController.html":{},"injectables/PlaceCategoriesService.html":{},"entities/PlaceCategory.html":{},"classes/PlaceCategoryDto.html":{},"classes/PlaceDto.html":{},"classes/PlaceSlugDto.html":{},"entities/PlaceType.html":{},"classes/PlaceTypeDto.html":{},"controllers/PlaceTypesController.html":{},"injectables/PlaceTypesService.html":{},"controllers/PlacesController.html":{},"injectables/PlacesService.html":{},"entities/Role.html":{},"classes/RoleDto.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"classes/SearchPlaceDto.html":{},"injectables/StorageService.html":{},"classes/TokenPayloadDto.html":{},"entities/Translation.html":{},"classes/TranslationDto.html":{},"controllers/TranslationsController.html":{},"injectables/TranslationsService.html":{},"classes/UpdateCommentDto.html":{},"classes/UpdatePlaceDto.html":{},"entities/User.html":{},"classes/UserDto.html":{},"injectables/UserFromTokenPipe.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/ValidationExceptionDto.html":{},"classes/ValidationMessageDto.html":{}}}],["delete",{"_index":614,"title":{},"body":{"controllers/ImagesController.html":{},"controllers/LanguagesController.html":{},"controllers/PlacesController.html":{},"controllers/TranslationsController.html":{},"injectables/TranslationsService.html":{}}}],["delete('/:id",{"_index":1684,"title":{},"body":{"controllers/TranslationsController.html":{}}}],["delete(':id",{"_index":674,"title":{},"body":{"controllers/ImagesController.html":{},"controllers/LanguagesController.html":{},"controllers/PlaceCategoriesController.html":{},"controllers/PlaceTypesController.html":{},"controllers/UsersController.html":{}}}],["delete('comments/:commentid",{"_index":1304,"title":{},"body":{"controllers/PlacesController.html":{}}}],["delete('comments/:commentid/administration",{"_index":1306,"title":{},"body":{"controllers/PlacesController.html":{}}}],["delete(@param('id",{"_index":1685,"title":{},"body":{"controllers/TranslationsController.html":{}}}],["delete(id",{"_index":1658,"title":{},"body":{"controllers/TranslationsController.html":{}}}],["deletecomment",{"_index":343,"title":{},"body":{"injectables/CommentsService.html":{},"controllers/PlacesController.html":{}}}],["deletecomment(commentid",{"_index":1216,"title":{},"body":{"controllers/PlacesController.html":{}}}],["deletecomment(id",{"_index":359,"title":{},"body":{"injectables/CommentsService.html":{}}}],["deleted",{"_index":1629,"title":{},"body":{"injectables/StorageService.html":{}}}],["deletedid",{"_index":805,"title":{},"body":{"controllers/LanguagesController.html":{}}}],["deletetranslation",{"_index":1697,"title":{},"body":{"injectables/TranslationsService.html":{}}}],["deletetranslation(id",{"_index":1705,"title":{},"body":{"injectables/TranslationsService.html":{}}}],["dependencies",{"_index":79,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommentsModule.html":{},"modules/ImagesModule.html":{},"modules/LanguagesModule.html":{},"modules/MailingModule.html":{},"modules/PlaceCategoriesModule.html":{},"modules/PlaceTypesModule.html":{},"modules/PlacesModule.html":{},"modules/RolesModule.html":{},"modules/StorageModule.html":{},"modules/TranslationsModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["desc",{"_index":1431,"title":{},"body":{"injectables/PlacesService.html":{}}}],["description",{"_index":71,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"classes/CreatePlaceDto.html":{},"controllers/ImagesController.html":{},"controllers/LanguagesController.html":{},"entities/Place.html":{},"controllers/PlaceCategoriesController.html":{},"classes/PlaceDto.html":{},"classes/PlaceSlugDto.html":{},"controllers/PlaceTypesController.html":{},"controllers/PlacesController.html":{},"injectables/PlacesService.html":{},"controllers/RolesController.html":{},"classes/SearchPlaceDto.html":{},"controllers/TranslationsController.html":{},"classes/UpdatePlaceDto.html":{},"controllers/UsersController.html":{},"classes/ValidationExceptionDto.html":{},"classes/ValidationMessageDto.html":{},"index.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["description'})@transform",{"_index":1072,"title":{},"body":{"classes/PlaceDto.html":{}}}],["description_t",{"_index":1445,"title":{},"body":{"injectables/PlacesService.html":{}}}],["description_t.language",{"_index":1447,"title":{},"body":{"injectables/PlacesService.html":{}}}],["description_t.textid",{"_index":1446,"title":{},"body":{"injectables/PlacesService.html":{}}}],["descriptiontranslation",{"_index":1361,"title":{},"body":{"injectables/PlacesService.html":{}}}],["descriptiontranslation.text",{"_index":1365,"title":{},"body":{"injectables/PlacesService.html":{}}}],["descriptiontranslation.textid",{"_index":1366,"title":{},"body":{"injectables/PlacesService.html":{}}}],["destination",{"_index":1587,"title":{},"body":{"injectables/StorageService.html":{}}}],["details",{"_index":1475,"title":{},"body":{"injectables/PlacesService.html":{}}}],["development",{"_index":1999,"title":{},"body":{"index.html":{}}}],["dir",{"_index":869,"title":{},"body":{"modules/MailingModule.html":{}}}],["distinct",{"_index":1732,"title":{},"body":{"injectables/TranslationsService.html":{}}}],["documentation",{"_index":1916,"title":{},"body":{"coverage.html":{}}}],["documentbuilder",{"_index":2073,"title":{},"body":{"miscellaneous/variables.html":{}}}],["doe",{"_index":519,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UserDto.html":{}}}],["domain/auth/confirm",{"_index":908,"title":{},"body":{"injectables/MailingService.html":{}}}],["dto",{"_index":234,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PlacesService.html":{},"classes/ValidationExceptionDto.html":{},"classes/ValidationMessageDto.html":{}}}],["dto.address",{"_index":1364,"title":{},"body":{"injectables/PlacesService.html":{}}}],["dto.description",{"_index":1362,"title":{},"body":{"injectables/PlacesService.html":{}}}],["dto.password",{"_index":251,"title":{},"body":{"injectables/AuthService.html":{}}}],["dto.placetypeid",{"_index":1371,"title":{},"body":{"injectables/PlacesService.html":{}}}],["dto.title",{"_index":1360,"title":{},"body":{"injectables/PlacesService.html":{}}}],["dto/auth.dto",{"_index":168,"title":{},"body":{"controllers/AuthController.html":{}}}],["dto/create",{"_index":373,"title":{},"body":{"injectables/CommentsService.html":{},"controllers/ImagesController.html":{},"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{},"controllers/PlaceCategoriesController.html":{},"injectables/PlaceCategoriesService.html":{},"controllers/PlaceTypesController.html":{},"injectables/PlaceTypesService.html":{},"controllers/PlacesController.html":{},"injectables/PlacesService.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"controllers/TranslationsController.html":{},"injectables/UsersService.html":{}}}],["dto/file.dto",{"_index":1599,"title":{},"body":{"injectables/StorageService.html":{}}}],["dto/image.dto",{"_index":636,"title":{},"body":{"controllers/ImagesController.html":{}}}],["dto/language.dto",{"_index":793,"title":{},"body":{"controllers/LanguagesController.html":{}}}],["dto/login.dto",{"_index":169,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dto/place",{"_index":989,"title":{},"body":{"controllers/PlaceCategoriesController.html":{},"injectables/PlaceCategoriesService.html":{},"controllers/PlaceTypesController.html":{},"injectables/PlaceTypesService.html":{},"controllers/PlacesController.html":{}}}],["dto/place.dto",{"_index":1257,"title":{},"body":{"controllers/PlacesController.html":{}}}],["dto/role.dto",{"_index":1503,"title":{},"body":{"controllers/RolesController.html":{}}}],["dto/search",{"_index":1254,"title":{},"body":{"controllers/PlacesController.html":{}}}],["dto/token",{"_index":240,"title":{},"body":{"injectables/AuthService.html":{},"guards/JwtAuthGuard.html":{},"injectables/PayloadFromTokenPipe.html":{},"injectables/UserFromTokenPipe.html":{}}}],["dto/translation.dto",{"_index":1670,"title":{},"body":{"controllers/TranslationsController.html":{}}}],["dto/update",{"_index":375,"title":{},"body":{"injectables/CommentsService.html":{},"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{},"controllers/PlacesController.html":{},"injectables/PlacesService.html":{},"controllers/TranslationsController.html":{},"injectables/TranslationsService.html":{},"injectables/UsersService.html":{}}}],["dto/user.dto",{"_index":1853,"title":{},"body":{"controllers/UsersController.html":{}}}],["e",{"_index":832,"title":{},"body":{"injectables/LanguagesService.html":{},"injectables/PlacesService.html":{},"injectables/RolesService.html":{},"injectables/TranslationsService.html":{}}}],["e.message",{"_index":1744,"title":{},"body":{"injectables/TranslationsService.html":{}}}],["e2e",{"_index":2010,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":1988,"title":{},"body":{"index.html":{}}}],["ejs",{"_index":1962,"title":{},"body":{"dependencies.html":{}}}],["ejsadapter",{"_index":856,"title":{},"body":{"modules/MailingModule.html":{}}}],["email",{"_index":247,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"interfaces/IDatabaseConfig.html":{},"interfaces/IGoogleCloudConfig.html":{},"interfaces/IJwtConfig.html":{},"interfaces/IMailerConfig.html":{},"classes/LoginDto.html":{},"injectables/MailingService.html":{},"classes/TokenPayloadDto.html":{},"entities/User.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["email'})@apiokresponse({description",{"_index":1842,"title":{},"body":{"controllers/UsersController.html":{}}}],["emailconfig",{"_index":565,"title":{},"body":{"interfaces/IDatabaseConfig.html":{},"interfaces/IGoogleCloudConfig.html":{},"interfaces/IJwtConfig.html":{},"interfaces/IMailerConfig.html":{}}}],["emailconfig')?.email",{"_index":867,"title":{},"body":{"modules/MailingModule.html":{}}}],["emailpw",{"_index":567,"title":{},"body":{"interfaces/IDatabaseConfig.html":{},"interfaces/IGoogleCloudConfig.html":{},"interfaces/IJwtConfig.html":{},"interfaces/IMailerConfig.html":{}}}],["end",{"_index":1066,"title":{},"body":{"classes/PlaceDto.html":{},"classes/SearchPlaceDto.html":{}}}],["enter",{"_index":2079,"title":{},"body":{"miscellaneous/variables.html":{}}}],["entities",{"_index":2,"title":{},"body":{"entities/Admin.html":{},"entities/Comment.html":{},"modules/DatabaseModule.html":{},"entities/Image.html":{},"entities/Language.html":{},"entities/Like.html":{},"entities/Place.html":{},"entities/PlaceCategory.html":{},"entities/PlaceType.html":{},"entities/Role.html":{},"entities/Translation.html":{},"entities/User.html":{},"overview.html":{}}}],["entities/admin.entity",{"_index":958,"title":{},"body":{"entities/Place.html":{},"injectables/PlacesService.html":{},"entities/User.html":{},"classes/UserDto.html":{}}}],["entities/comment.entity",{"_index":320,"title":{},"body":{"classes/CommentDto.html":{},"modules/CommentsModule.html":{},"injectables/CommentsService.html":{}}}],["entities/image.entity",{"_index":598,"title":{},"body":{"classes/ImageDto.html":{},"modules/ImagesModule.html":{},"injectables/ImagesService.html":{}}}],["entities/language.entity",{"_index":812,"title":{},"body":{"modules/LanguagesModule.html":{},"injectables/LanguagesService.html":{}}}],["entities/like.entity",{"_index":1095,"title":{},"body":{"classes/PlaceDto.html":{},"modules/PlacesModule.html":{},"injectables/PlacesService.html":{}}}],["entities/place",{"_index":1007,"title":{},"body":{"modules/PlaceCategoriesModule.html":{},"injectables/PlaceCategoriesService.html":{},"classes/PlaceCategoryDto.html":{},"classes/PlaceTypeDto.html":{},"modules/PlaceTypesModule.html":{},"injectables/PlaceTypesService.html":{}}}],["entities/place.entity",{"_index":1094,"title":{},"body":{"classes/PlaceDto.html":{},"controllers/PlacesController.html":{},"modules/PlacesModule.html":{},"injectables/PlacesService.html":{},"classes/SearchPlaceDto.html":{}}}],["entities/role.entity",{"_index":1484,"title":{},"body":{"classes/RoleDto.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{}}}],["entities/translation.entity",{"_index":1650,"title":{},"body":{"classes/TranslationDto.html":{},"modules/TranslationsModule.html":{},"injectables/TranslationsService.html":{}}}],["entities/user.entity",{"_index":1830,"title":{},"body":{"classes/UserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["entity",{"_index":0,"title":{"entities/Admin.html":{},"entities/Comment.html":{},"entities/Image.html":{},"entities/Language.html":{},"entities/Like.html":{},"entities/Place.html":{},"entities/PlaceCategory.html":{},"entities/PlaceType.html":{},"entities/Role.html":{},"entities/Translation.html":{},"entities/User.html":{}},"body":{"entities/Admin.html":{},"entities/Comment.html":{},"entities/Image.html":{},"entities/Language.html":{},"entities/Like.html":{},"entities/Place.html":{},"entities/PlaceCategory.html":{},"entities/PlaceType.html":{},"entities/Role.html":{},"entities/Translation.html":{},"entities/User.html":{},"coverage.html":{}}}],["entity{.ts,.js",{"_index":533,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["enum",{"_index":496,"title":{},"body":{"classes/CreateRoleDto.html":{},"controllers/RolesController.html":{}}}],["enumerations",{"_index":1974,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums/role",{"_index":498,"title":{},"body":{"classes/CreateRoleDto.html":{},"entities/Role.html":{},"classes/RoleDto.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{}}}],["equal",{"_index":371,"title":{},"body":{"injectables/CommentsService.html":{},"injectables/PlacesService.html":{},"injectables/RolesService.html":{},"injectables/UsersService.html":{}}}],["equal(commentid",{"_index":380,"title":{},"body":{"injectables/CommentsService.html":{}}}],["equal(dto.placetypeid",{"_index":1370,"title":{},"body":{"injectables/PlacesService.html":{}}}],["equal(email",{"_index":1901,"title":{},"body":{"injectables/UsersService.html":{}}}],["equal(id",{"_index":405,"title":{},"body":{"injectables/CommentsService.html":{},"injectables/UsersService.html":{}}}],["equal(placeid",{"_index":384,"title":{},"body":{"injectables/CommentsService.html":{},"injectables/PlacesService.html":{}}}],["equal(rolename",{"_index":1551,"title":{},"body":{"injectables/RolesService.html":{}}}],["equal(slug",{"_index":1375,"title":{},"body":{"injectables/PlacesService.html":{}}}],["equal(userid",{"_index":379,"title":{},"body":{"injectables/CommentsService.html":{},"injectables/PlacesService.html":{}}}],["error",{"_index":743,"title":{},"body":{"guards/JwtAuthGuard.html":{},"injectables/PayloadFromTokenPipe.html":{},"guards/RolesGuard.html":{},"injectables/StorageService.html":{},"injectables/UserFromTokenPipe.html":{},"classes/ValidationExceptionDto.html":{},"classes/ValidationMessageDto.html":{},"miscellaneous/variables.html":{}}}],["error.property",{"_index":2070,"title":{},"body":{"miscellaneous/variables.html":{}}}],["errors",{"_index":1909,"title":{},"body":{"classes/ValidationExceptionDto.html":{},"classes/ValidationMessageDto.html":{}}}],["escdestination",{"_index":1605,"title":{},"body":{"injectables/StorageService.html":{}}}],["exceeded",{"_index":661,"title":{},"body":{"controllers/ImagesController.html":{}}}],["exception.dto",{"_index":1139,"title":{},"body":{"controllers/PlaceTypesController.html":{}}}],["exception.dto.ts",{"_index":1904,"title":{},"body":{"classes/ValidationExceptionDto.html":{},"classes/ValidationMessageDto.html":{},"coverage.html":{}}}],["exception.dto.ts:13",{"_index":1911,"title":{},"body":{"classes/ValidationExceptionDto.html":{}}}],["exception.dto.ts:20",{"_index":1910,"title":{},"body":{"classes/ValidationExceptionDto.html":{}}}],["exception.dto.ts:23",{"_index":1907,"title":{},"body":{"classes/ValidationExceptionDto.html":{}}}],["exception.dto.ts:5",{"_index":1914,"title":{},"body":{"classes/ValidationMessageDto.html":{}}}],["exception.dto.ts:8",{"_index":1913,"title":{},"body":{"classes/ValidationMessageDto.html":{}}}],["exceptionfactory",{"_index":1946,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["exclude",{"_index":314,"title":{},"body":{"classes/CommentDto.html":{},"classes/PlaceDto.html":{},"classes/SearchPlaceDto.html":{},"classes/UserDto.html":{}}}],["execute",{"_index":1436,"title":{},"body":{"injectables/PlacesService.html":{},"injectables/UsersService.html":{}}}],["executioncontext",{"_index":726,"title":{},"body":{"guards/JwtAuthGuard.html":{},"guards/RolesGuard.html":{},"miscellaneous/variables.html":{}}}],["exist",{"_index":1463,"title":{},"body":{"injectables/PlacesService.html":{}}}],["exists",{"_index":143,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/PlacesService.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{}}}],["exists'})@apibody({type",{"_index":1491,"title":{},"body":{"controllers/RolesController.html":{}}}],["exits",{"_index":1465,"title":{},"body":{"injectables/PlacesService.html":{}}}],["expirationtime",{"_index":563,"title":{},"body":{"interfaces/IDatabaseConfig.html":{},"interfaces/IGoogleCloudConfig.html":{},"interfaces/IJwtConfig.html":{},"interfaces/IMailerConfig.html":{}}}],["expiresin",{"_index":215,"title":{},"body":{"modules/AuthModule.html":{}}}],["export",{"_index":46,"title":{},"body":{"entities/Admin.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Comment.html":{},"classes/CommentDto.html":{},"modules/CommentsModule.html":{},"injectables/CommentsService.html":{},"classes/CreateCommentDto.html":{},"classes/CreateFileDto.html":{},"classes/CreateImageDto.html":{},"classes/CreateLanguageDto.html":{},"classes/CreatePlaceCategoryDto.html":{},"classes/CreatePlaceDto.html":{},"classes/CreatePlaceTypeDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateTranslationDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"classes/FileDto.html":{},"interfaces/IDatabaseConfig.html":{},"interfaces/IGoogleCloudConfig.html":{},"interfaces/IJwtConfig.html":{},"interfaces/IMailerConfig.html":{},"entities/Image.html":{},"classes/ImageDto.html":{},"controllers/ImagesController.html":{},"modules/ImagesModule.html":{},"injectables/ImagesService.html":{},"guards/JwtAuthGuard.html":{},"entities/Language.html":{},"classes/LanguageDto.html":{},"controllers/LanguagesController.html":{},"modules/LanguagesModule.html":{},"injectables/LanguagesService.html":{},"entities/Like.html":{},"classes/LoginDto.html":{},"modules/MailingModule.html":{},"injectables/MailingService.html":{},"injectables/PayloadFromTokenPipe.html":{},"entities/Place.html":{},"controllers/PlaceCategoriesController.html":{},"modules/PlaceCategoriesModule.html":{},"injectables/PlaceCategoriesService.html":{},"entities/PlaceCategory.html":{},"classes/PlaceCategoryDto.html":{},"classes/PlaceDto.html":{},"classes/PlaceSlugDto.html":{},"entities/PlaceType.html":{},"classes/PlaceTypeDto.html":{},"controllers/PlaceTypesController.html":{},"modules/PlaceTypesModule.html":{},"injectables/PlaceTypesService.html":{},"controllers/PlacesController.html":{},"modules/PlacesModule.html":{},"injectables/PlacesService.html":{},"entities/Role.html":{},"classes/RoleDto.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/SearchPlaceDto.html":{},"modules/StorageModule.html":{},"injectables/StorageService.html":{},"classes/TokenPayloadDto.html":{},"entities/Translation.html":{},"classes/TranslationDto.html":{},"controllers/TranslationsController.html":{},"modules/TranslationsModule.html":{},"injectables/TranslationsService.html":{},"classes/UpdateCommentDto.html":{},"classes/UpdateLanguageDto.html":{},"classes/UpdatePlaceCategoryDto.html":{},"classes/UpdatePlaceDto.html":{},"classes/UpdatePlaceTypeDto.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateTranslationDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserDto.html":{},"injectables/UserFromTokenPipe.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ValidationExceptionDto.html":{},"classes/ValidationMessageDto.html":{}}}],["exports",{"_index":84,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommentsModule.html":{},"modules/ImagesModule.html":{},"modules/LanguagesModule.html":{},"modules/MailingModule.html":{},"modules/PlaceCategoriesModule.html":{},"modules/PlaceTypesModule.html":{},"modules/PlacesModule.html":{},"modules/RolesModule.html":{},"modules/StorageModule.html":{},"modules/TranslationsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["expose",{"_index":321,"title":{},"body":{"classes/CommentDto.html":{},"classes/SearchPlaceDto.html":{}}}],["express",{"_index":631,"title":{},"body":{"controllers/ImagesController.html":{},"dependencies.html":{}}}],["express.multer.file",{"_index":415,"title":{},"body":{"classes/CreateFileDto.html":{},"classes/CreateImageDto.html":{},"controllers/ImagesController.html":{},"injectables/StorageService.html":{}}}],["extends",{"_index":424,"title":{},"body":{"classes/CreateImageDto.html":{},"classes/LanguageDto.html":{},"classes/UpdateCommentDto.html":{},"classes/UpdateLanguageDto.html":{},"classes/UpdatePlaceCategoryDto.html":{},"classes/UpdatePlaceDto.html":{},"classes/UpdatePlaceTypeDto.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateTranslationDto.html":{},"classes/UpdateUserDto.html":{}}}],["extra",{"_index":536,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["factory.ts",{"_index":1945,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["failed",{"_index":1125,"title":{},"body":{"controllers/PlaceTypesController.html":{},"injectables/TranslationsService.html":{}}}],["false",{"_index":443,"title":{},"body":{"classes/CreatePlaceCategoryDto.html":{},"classes/CreatePlaceDto.html":{},"classes/CreatePlaceTypeDto.html":{},"classes/CreateTranslationDto.html":{},"controllers/ImagesController.html":{},"entities/Place.html":{},"entities/PlaceType.html":{},"classes/PlaceTypeDto.html":{},"entities/Role.html":{},"entities/Translation.html":{},"injectables/TranslationsService.html":{},"classes/UpdatePlaceDto.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["false})@column({type",{"_index":1641,"title":{},"body":{"entities/Translation.html":{}}}],["false})@isboolean",{"_index":475,"title":{},"body":{"classes/CreatePlaceTypeDto.html":{}}}],["false})@isnumber()@validateif((object",{"_index":477,"title":{},"body":{"classes/CreatePlaceTypeDto.html":{}}}],["feedbacktoken",{"_index":879,"title":{},"body":{"injectables/MailingService.html":{}}}],["field",{"_index":298,"title":{},"body":{"entities/Comment.html":{},"classes/ValidationExceptionDto.html":{},"classes/ValidationMessageDto.html":{},"miscellaneous/variables.html":{}}}],["file",{"_index":5,"title":{},"body":{"entities/Admin.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Comment.html":{},"classes/CommentDto.html":{},"modules/CommentsModule.html":{},"injectables/CommentsService.html":{},"classes/CreateCommentDto.html":{},"classes/CreateFileDto.html":{},"classes/CreateImageDto.html":{},"classes/CreateLanguageDto.html":{},"classes/CreatePlaceCategoryDto.html":{},"classes/CreatePlaceDto.html":{},"classes/CreatePlaceTypeDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateTranslationDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"classes/FileDto.html":{},"interfaces/IDatabaseConfig.html":{},"interfaces/IGoogleCloudConfig.html":{},"interfaces/IJwtConfig.html":{},"interfaces/IMailerConfig.html":{},"entities/Image.html":{},"classes/ImageDto.html":{},"controllers/ImagesController.html":{},"modules/ImagesModule.html":{},"injectables/ImagesService.html":{},"guards/JwtAuthGuard.html":{},"entities/Language.html":{},"classes/LanguageDto.html":{},"controllers/LanguagesController.html":{},"modules/LanguagesModule.html":{},"injectables/LanguagesService.html":{},"entities/Like.html":{},"classes/LoginDto.html":{},"modules/MailingModule.html":{},"injectables/MailingService.html":{},"injectables/PayloadFromTokenPipe.html":{},"entities/Place.html":{},"controllers/PlaceCategoriesController.html":{},"modules/PlaceCategoriesModule.html":{},"injectables/PlaceCategoriesService.html":{},"entities/PlaceCategory.html":{},"classes/PlaceCategoryDto.html":{},"classes/PlaceDto.html":{},"classes/PlaceSlugDto.html":{},"entities/PlaceType.html":{},"classes/PlaceTypeDto.html":{},"controllers/PlaceTypesController.html":{},"modules/PlaceTypesModule.html":{},"injectables/PlaceTypesService.html":{},"controllers/PlacesController.html":{},"modules/PlacesModule.html":{},"injectables/PlacesService.html":{},"entities/Role.html":{},"classes/RoleDto.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/SearchPlaceDto.html":{},"modules/StorageModule.html":{},"injectables/StorageService.html":{},"classes/TokenPayloadDto.html":{},"entities/Translation.html":{},"classes/TranslationDto.html":{},"controllers/TranslationsController.html":{},"modules/TranslationsModule.html":{},"injectables/TranslationsService.html":{},"classes/UpdateCommentDto.html":{},"classes/UpdateLanguageDto.html":{},"classes/UpdatePlaceCategoryDto.html":{},"classes/UpdatePlaceDto.html":{},"classes/UpdatePlaceTypeDto.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateTranslationDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserDto.html":{},"injectables/UserFromTokenPipe.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ValidationExceptionDto.html":{},"classes/ValidationMessageDto.html":{},"coverage.html":{}}}],["file.delete",{"_index":1627,"title":{},"body":{"injectables/StorageService.html":{}}}],["file.dto",{"_index":428,"title":{},"body":{"classes/CreateImageDto.html":{}}}],["file.dto.ts",{"_index":414,"title":{},"body":{"classes/CreateFileDto.html":{},"coverage.html":{}}}],["file.dto.ts:5",{"_index":420,"title":{},"body":{"classes/CreateFileDto.html":{}}}],["file.mimetype.match(/image\\/(jpg|jpeg|png|gif|webp",{"_index":656,"title":{},"body":{"controllers/ImagesController.html":{}}}],["file.save(uploadedfile.buffer",{"_index":1619,"title":{},"body":{"injectables/StorageService.html":{}}}],["filedto",{"_index":538,"title":{"classes/FileDto.html":{}},"body":{"classes/FileDto.html":{},"controllers/ImagesController.html":{},"injectables/StorageService.html":{},"coverage.html":{}}}],["filefilter",{"_index":653,"title":{},"body":{"controllers/ImagesController.html":{}}}],["fileinterceptor",{"_index":629,"title":{},"body":{"controllers/ImagesController.html":{}}}],["fileinterceptor('file",{"_index":646,"title":{},"body":{"controllers/ImagesController.html":{}}}],["filename",{"_index":1584,"title":{},"body":{"injectables/StorageService.html":{}}}],["filename.name",{"_index":1609,"title":{},"body":{"injectables/StorageService.html":{}}}],["filename.replace",{"_index":1624,"title":{},"body":{"injectables/StorageService.html":{}}}],["filesize",{"_index":649,"title":{},"body":{"controllers/ImagesController.html":{}}}],["find",{"_index":1661,"title":{},"body":{"controllers/TranslationsController.html":{}}}],["findall",{"_index":601,"title":{},"body":{"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{},"controllers/PlaceCategoriesController.html":{},"injectables/PlaceCategoriesService.html":{},"controllers/PlaceTypesController.html":{},"injectables/PlaceTypesService.html":{},"injectables/PlacesService.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findall(langid",{"_index":973,"title":{},"body":{"controllers/PlaceCategoriesController.html":{},"injectables/PlaceCategoriesService.html":{},"controllers/PlaceTypesController.html":{},"injectables/PlaceTypesService.html":{},"injectables/PlacesService.html":{}}}],["findallplacecomments",{"_index":344,"title":{},"body":{"injectables/CommentsService.html":{}}}],["findallplacecomments(placeid",{"_index":361,"title":{},"body":{"injectables/CommentsService.html":{}}}],["findone",{"_index":764,"title":{},"body":{"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{},"controllers/PlaceCategoriesController.html":{},"injectables/PlaceCategoriesService.html":{},"controllers/PlaceTypesController.html":{},"injectables/PlaceTypesService.html":{}}}],["findone(@param('id",{"_index":799,"title":{},"body":{"controllers/LanguagesController.html":{}}}],["findone(id",{"_index":775,"title":{},"body":{"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{},"controllers/PlaceCategoriesController.html":{},"injectables/PlaceCategoriesService.html":{},"controllers/PlaceTypesController.html":{},"injectables/PlaceTypesService.html":{}}}],["findonebyid",{"_index":1876,"title":{},"body":{"injectables/UsersService.html":{}}}],["findonebyid(id",{"_index":1885,"title":{},"body":{"injectables/UsersService.html":{}}}],["findonebyslug",{"_index":1319,"title":{},"body":{"injectables/PlacesService.html":{}}}],["findonebyslug(slug",{"_index":1343,"title":{},"body":{"injectables/PlacesService.html":{}}}],["findoneplacecomment",{"_index":345,"title":{},"body":{"injectables/CommentsService.html":{}}}],["findoneplacecomment(commentid",{"_index":364,"title":{},"body":{"injectables/CommentsService.html":{}}}],["finds",{"_index":1173,"title":{},"body":{"injectables/PlaceTypesService.html":{}}}],["first",{"_index":515,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UserDto.html":{}}}],["firstname",{"_index":386,"title":{},"body":{"injectables/CommentsService.html":{},"classes/CreateUserDto.html":{},"entities/User.html":{},"classes/UserDto.html":{}}}],["following",{"_index":2080,"title":{},"body":{"miscellaneous/variables.html":{}}}],["forbidden",{"_index":1286,"title":{},"body":{"controllers/PlacesController.html":{}}}],["forbiddenexception",{"_index":1248,"title":{},"body":{"controllers/PlacesController.html":{}}}],["forbiddenexception})@apibadrequestresponse({type",{"_index":1218,"title":{},"body":{"controllers/PlacesController.html":{}}}],["forbiddenexception})@apiparam({name",{"_index":1245,"title":{},"body":{"controllers/PlacesController.html":{}}}],["format",{"_index":417,"title":{},"body":{"classes/CreateFileDto.html":{},"classes/CreateImageDto.html":{},"miscellaneous/variables.html":{}}}],["found",{"_index":259,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CommentsService.html":{},"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{},"injectables/PlaceCategoriesService.html":{},"injectables/PlaceTypesService.html":{},"injectables/PlacesService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["found'})@apiparam({name",{"_index":777,"title":{},"body":{"controllers/LanguagesController.html":{}}}],["framework",{"_index":1986,"title":{},"body":{"index.html":{}}}],["full",{"_index":889,"title":{},"body":{"injectables/MailingService.html":{}}}],["function",{"_index":887,"title":{},"body":{"injectables/MailingService.html":{},"coverage.html":{}}}],["functions",{"_index":1978,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generates",{"_index":888,"title":{},"body":{"injectables/MailingService.html":{}}}],["generatetoken",{"_index":222,"title":{},"body":{"injectables/AuthService.html":{}}}],["generatetoken(user",{"_index":229,"title":{},"body":{"injectables/AuthService.html":{}}}],["get('/userdata",{"_index":1859,"title":{},"body":{"controllers/UsersController.html":{}}}],["get(':id",{"_index":798,"title":{},"body":{"controllers/LanguagesController.html":{},"controllers/PlaceCategoriesController.html":{},"controllers/PlaceTypesController.html":{}}}],["get(':id/comments",{"_index":1290,"title":{},"body":{"controllers/PlacesController.html":{}}}],["get(':name",{"_index":1508,"title":{},"body":{"controllers/RolesController.html":{}}}],["get(':slug",{"_index":1278,"title":{},"body":{"controllers/PlacesController.html":{}}}],["get('slugs",{"_index":1275,"title":{},"body":{"controllers/PlacesController.html":{}}}],["get('status",{"_index":73,"title":{},"body":{"controllers/AppController.html":{}}}],["get,head,put,patch,post,delete",{"_index":2063,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getall",{"_index":1185,"title":{},"body":{"controllers/PlacesController.html":{},"controllers/TranslationsController.html":{},"injectables/TranslationsService.html":{}}}],["getall(@query('lang",{"_index":1270,"title":{},"body":{"controllers/PlacesController.html":{}}}],["getall(langid",{"_index":1221,"title":{},"body":{"controllers/PlacesController.html":{}}}],["getallcomments",{"_index":1186,"title":{},"body":{"controllers/PlacesController.html":{}}}],["getallcomments(id",{"_index":1224,"title":{},"body":{"controllers/PlacesController.html":{}}}],["getauthorid",{"_index":318,"title":{},"body":{"classes/CommentDto.html":{}}}],["getauthorusername",{"_index":316,"title":{},"body":{"classes/CommentDto.html":{}}}],["getbyid",{"_index":1187,"title":{},"body":{"controllers/PlacesController.html":{}}}],["getbyid(slug",{"_index":1230,"title":{},"body":{"controllers/PlacesController.html":{}}}],["getfulltemplatepath",{"_index":891,"title":{},"body":{"injectables/MailingService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["getfulltemplatepath('users/confirm",{"_index":902,"title":{},"body":{"injectables/MailingService.html":{}}}],["getmany",{"_index":1038,"title":{},"body":{"injectables/PlaceCategoriesService.html":{},"injectables/PlaceTypesService.html":{},"injectables/PlacesService.html":{},"injectables/TranslationsService.html":{}}}],["getmaxtextid",{"_index":1698,"title":{},"body":{"injectables/TranslationsService.html":{}}}],["getone",{"_index":1040,"title":{},"body":{"injectables/PlaceCategoriesService.html":{},"injectables/PlaceTypesService.html":{},"injectables/PlacesService.html":{}}}],["getplacesslugs",{"_index":1188,"title":{},"body":{"controllers/PlacesController.html":{},"injectables/PlacesService.html":{}}}],["getrawone",{"_index":1733,"title":{},"body":{"injectables/TranslationsService.html":{}}}],["getrolebyname",{"_index":1487,"title":{},"body":{"controllers/RolesController.html":{},"injectables/RolesService.html":{}}}],["getrolebyname(@param('name",{"_index":1509,"title":{},"body":{"controllers/RolesController.html":{}}}],["getrolebyname(name",{"_index":1495,"title":{},"body":{"controllers/RolesController.html":{}}}],["getrolebyname(rolename",{"_index":1544,"title":{},"body":{"injectables/RolesService.html":{}}}],["getstatus",{"_index":55,"title":{},"body":{"controllers/AppController.html":{}}}],["getting",{"_index":1982,"title":{"index.html":{}},"body":{}}],["getuserbyemail",{"_index":1877,"title":{},"body":{"injectables/UsersService.html":{}}}],["getuserbyemail(email",{"_index":1887,"title":{},"body":{"injectables/UsersService.html":{}}}],["global",{"_index":201,"title":{},"body":{"modules/AuthModule.html":{}}}],["google",{"_index":1596,"title":{},"body":{"injectables/StorageService.html":{},"injectables/TranslationsService.html":{},"dependencies.html":{}}}],["googlecloud",{"_index":549,"title":{},"body":{"interfaces/IDatabaseConfig.html":{},"interfaces/IGoogleCloudConfig.html":{},"interfaces/IJwtConfig.html":{},"interfaces/IMailerConfig.html":{}}}],["graph",{"_index":2038,"title":{},"body":{"modules.html":{}}}],["grow",{"_index":2017,"title":{},"body":{"index.html":{}}}],["guard",{"_index":715,"title":{"guards/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}},"body":{"guards/JwtAuthGuard.html":{},"guards/RolesGuard.html":{},"coverage.html":{}}}],["guards",{"_index":717,"title":{},"body":{"guards/JwtAuthGuard.html":{},"guards/RolesGuard.html":{},"overview.html":{}}}],["hashpassword",{"_index":248,"title":{},"body":{"injectables/AuthService.html":{}}}],["header",{"_index":2084,"title":{},"body":{"miscellaneous/variables.html":{}}}],["helper",{"_index":886,"title":{},"body":{"injectables/MailingService.html":{}}}],["here",{"_index":2026,"title":{},"body":{"index.html":{}}}],["host",{"_index":526,"title":{},"body":{"modules/DatabaseModule.html":{},"interfaces/IDatabaseConfig.html":{},"interfaces/IGoogleCloudConfig.html":{},"interfaces/IJwtConfig.html":{},"interfaces/IMailerConfig.html":{}}}],["http",{"_index":2083,"title":{},"body":{"miscellaneous/variables.html":{}}}],["https://my",{"_index":906,"title":{},"body":{"injectables/MailingService.html":{}}}],["https://nestjs.com",{"_index":2031,"title":{},"body":{"index.html":{}}}],["https://storage.googleapis.com/${this.bucket.name",{"_index":1625,"title":{},"body":{"injectables/StorageService.html":{}}}],["https://storage.googleapis.com/${this.bucket.name}/${file.name",{"_index":1618,"title":{},"body":{"injectables/StorageService.html":{}}}],["id",{"_index":10,"title":{},"body":{"entities/Admin.html":{},"injectables/AuthService.html":{},"entities/Comment.html":{},"classes/CommentDto.html":{},"injectables/CommentsService.html":{},"classes/CreatePlaceDto.html":{},"classes/CreateTranslationDto.html":{},"entities/Image.html":{},"classes/ImageDto.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"entities/Language.html":{},"classes/LanguageDto.html":{},"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{},"entities/Like.html":{},"entities/Place.html":{},"controllers/PlaceCategoriesController.html":{},"injectables/PlaceCategoriesService.html":{},"entities/PlaceCategory.html":{},"classes/PlaceCategoryDto.html":{},"classes/PlaceDto.html":{},"classes/PlaceSlugDto.html":{},"entities/PlaceType.html":{},"classes/PlaceTypeDto.html":{},"controllers/PlaceTypesController.html":{},"injectables/PlaceTypesService.html":{},"controllers/PlacesController.html":{},"injectables/PlacesService.html":{},"entities/Role.html":{},"classes/RoleDto.html":{},"classes/SearchPlaceDto.html":{},"classes/TokenPayloadDto.html":{},"entities/Translation.html":{},"classes/TranslationDto.html":{},"controllers/TranslationsController.html":{},"injectables/TranslationsService.html":{},"classes/UpdatePlaceDto.html":{},"entities/User.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["id'})@apibearerauth('access",{"_index":1231,"title":{},"body":{"controllers/PlacesController.html":{}}}],["id'})@apiokresponse({description",{"_index":974,"title":{},"body":{"controllers/PlaceCategoriesController.html":{},"controllers/PlaceTypesController.html":{},"controllers/PlacesController.html":{}}}],["id'})@apiparam({name",{"_index":615,"title":{},"body":{"controllers/ImagesController.html":{}}}],["id'})@auth(rolenamesenum.owner",{"_index":616,"title":{},"body":{"controllers/ImagesController.html":{}}}],["id'})@delete(':id",{"_index":782,"title":{},"body":{"controllers/LanguagesController.html":{}}}],["id'})@get(':id",{"_index":779,"title":{},"body":{"controllers/LanguagesController.html":{}}}],["id'})@patch(':id",{"_index":786,"title":{},"body":{"controllers/LanguagesController.html":{}}}],["idatabaseconfig",{"_index":523,"title":{"interfaces/IDatabaseConfig.html":{}},"body":{"modules/DatabaseModule.html":{},"interfaces/IDatabaseConfig.html":{},"interfaces/IGoogleCloudConfig.html":{},"interfaces/IJwtConfig.html":{},"interfaces/IMailerConfig.html":{},"coverage.html":{}}}],["identifier",{"_index":1917,"title":{},"body":{"coverage.html":{}}}],["ids",{"_index":457,"title":{},"body":{"classes/CreatePlaceDto.html":{},"classes/UpdatePlaceDto.html":{}}}],["igooglecloudconfig",{"_index":569,"title":{"interfaces/IGoogleCloudConfig.html":{}},"body":{"interfaces/IDatabaseConfig.html":{},"interfaces/IGoogleCloudConfig.html":{},"interfaces/IJwtConfig.html":{},"interfaces/IMailerConfig.html":{},"injectables/StorageService.html":{},"injectables/TranslationsService.html":{},"coverage.html":{}}}],["ijwtconfig",{"_index":206,"title":{"interfaces/IJwtConfig.html":{}},"body":{"modules/AuthModule.html":{},"interfaces/IDatabaseConfig.html":{},"interfaces/IGoogleCloudConfig.html":{},"interfaces/IJwtConfig.html":{},"interfaces/IMailerConfig.html":{},"coverage.html":{}}}],["image",{"_index":442,"title":{"entities/Image.html":{}},"body":{"classes/CreatePlaceCategoryDto.html":{},"classes/CreatePlaceTypeDto.html":{},"entities/Image.html":{},"classes/ImageDto.html":{},"controllers/ImagesController.html":{},"modules/ImagesModule.html":{},"injectables/ImagesService.html":{},"entities/Place.html":{},"injectables/PlaceCategoriesService.html":{},"entities/PlaceCategory.html":{},"classes/PlaceCategoryDto.html":{},"classes/PlaceDto.html":{},"entities/PlaceType.html":{},"classes/PlaceTypeDto.html":{},"injectables/PlaceTypesService.html":{},"injectables/PlacesService.html":{},"classes/SearchPlaceDto.html":{},"entities/User.html":{},"coverage.html":{}}}],["image'})@apiokresponse({type",{"_index":605,"title":{},"body":{"controllers/ImagesController.html":{}}}],["image'})@expose({name",{"_index":1561,"title":{},"body":{"classes/SearchPlaceDto.html":{}}}],["image'})@transform",{"_index":1075,"title":{},"body":{"classes/PlaceDto.html":{},"classes/SearchPlaceDto.html":{}}}],["image.dto",{"_index":626,"title":{},"body":{"controllers/ImagesController.html":{}}}],["image.dto.ts",{"_index":423,"title":{},"body":{"classes/CreateImageDto.html":{},"coverage.html":{}}}],["image.id",{"_index":711,"title":{},"body":{"injectables/ImagesService.html":{},"entities/PlaceCategory.html":{},"entities/PlaceType.html":{}}}],["image.id)@joincolumn",{"_index":1043,"title":{},"body":{"entities/PlaceCategory.html":{},"entities/PlaceType.html":{}}}],["image.place",{"_index":943,"title":{},"body":{"entities/Place.html":{}}}],["image.url",{"_index":699,"title":{},"body":{"injectables/ImagesService.html":{}}}],["image.user",{"_index":700,"title":{},"body":{"injectables/ImagesService.html":{},"entities/User.html":{}}}],["image.user.id",{"_index":701,"title":{},"body":{"injectables/ImagesService.html":{}}}],["imagedto",{"_index":592,"title":{"classes/ImageDto.html":{}},"body":{"classes/ImageDto.html":{},"controllers/ImagesController.html":{},"coverage.html":{}}}],["imagedto(savedimage",{"_index":670,"title":{},"body":{"controllers/ImagesController.html":{}}}],["imagedto})@apiconsumes('multipart/form",{"_index":606,"title":{},"body":{"controllers/ImagesController.html":{}}}],["imageid",{"_index":440,"title":{},"body":{"classes/CreatePlaceCategoryDto.html":{},"classes/CreatePlaceTypeDto.html":{}}}],["imageids",{"_index":696,"title":{},"body":{"injectables/ImagesService.html":{}}}],["imageids.findindex((i",{"_index":710,"title":{},"body":{"injectables/ImagesService.html":{}}}],["images",{"_index":463,"title":{},"body":{"classes/CreatePlaceDto.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"entities/Place.html":{},"classes/PlaceDto.html":{},"injectables/PlacesService.html":{},"classes/SearchPlaceDto.html":{},"classes/UpdatePlaceDto.html":{},"entities/User.html":{}}}],["images'})@apiokresponse({type",{"_index":610,"title":{},"body":{"controllers/ImagesController.html":{}}}],["images.controller",{"_index":682,"title":{},"body":{"modules/ImagesModule.html":{}}}],["images.map((image",{"_index":708,"title":{},"body":{"injectables/ImagesService.html":{}}}],["images.service",{"_index":625,"title":{},"body":{"controllers/ImagesController.html":{},"modules/ImagesModule.html":{}}}],["images/entities/image.entity",{"_index":959,"title":{},"body":{"entities/Place.html":{},"injectables/PlaceCategoriesService.html":{},"entities/PlaceCategory.html":{},"classes/PlaceCategoryDto.html":{},"classes/PlaceDto.html":{},"entities/PlaceType.html":{},"classes/PlaceTypeDto.html":{},"injectables/PlaceTypesService.html":{},"classes/SearchPlaceDto.html":{},"entities/User.html":{}}}],["images/images.module",{"_index":117,"title":{},"body":{"modules/AppModule.html":{},"modules/PlacesModule.html":{}}}],["images/images.service",{"_index":1357,"title":{},"body":{"injectables/PlacesService.html":{}}}],["imagescontroller",{"_index":599,"title":{"controllers/ImagesController.html":{}},"body":{"controllers/ImagesController.html":{},"modules/ImagesModule.html":{},"coverage.html":{}}}],["imagesids",{"_index":451,"title":{},"body":{"classes/CreatePlaceDto.html":{},"classes/UpdatePlaceDto.html":{}}}],["imagesmodule",{"_index":90,"title":{"modules/ImagesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ImagesModule.html":{},"modules/PlacesModule.html":{},"modules.html":{},"overview.html":{}}}],["imagesrepository",{"_index":688,"title":{},"body":{"injectables/ImagesService.html":{}}}],["imagesservice",{"_index":624,"title":{"injectables/ImagesService.html":{}},"body":{"controllers/ImagesController.html":{},"modules/ImagesModule.html":{},"injectables/ImagesService.html":{},"injectables/PlacesService.html":{},"coverage.html":{},"overview.html":{}}}],["imageurl",{"_index":691,"title":{},"body":{"injectables/ImagesService.html":{}}}],["imailerconfig",{"_index":570,"title":{"interfaces/IMailerConfig.html":{}},"body":{"interfaces/IDatabaseConfig.html":{},"interfaces/IGoogleCloudConfig.html":{},"interfaces/IJwtConfig.html":{},"interfaces/IMailerConfig.html":{},"modules/MailingModule.html":{},"coverage.html":{}}}],["implements",{"_index":731,"title":{},"body":{"guards/JwtAuthGuard.html":{},"injectables/PayloadFromTokenPipe.html":{},"guards/RolesGuard.html":{},"injectables/UserFromTokenPipe.html":{}}}],["import",{"_index":36,"title":{},"body":{"entities/Admin.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Comment.html":{},"classes/CommentDto.html":{},"modules/CommentsModule.html":{},"injectables/CommentsService.html":{},"classes/CreateCommentDto.html":{},"classes/CreateFileDto.html":{},"classes/CreateImageDto.html":{},"classes/CreateLanguageDto.html":{},"classes/CreatePlaceCategoryDto.html":{},"classes/CreatePlaceDto.html":{},"classes/CreatePlaceTypeDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateTranslationDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"classes/FileDto.html":{},"entities/Image.html":{},"classes/ImageDto.html":{},"controllers/ImagesController.html":{},"modules/ImagesModule.html":{},"injectables/ImagesService.html":{},"guards/JwtAuthGuard.html":{},"entities/Language.html":{},"classes/LanguageDto.html":{},"controllers/LanguagesController.html":{},"modules/LanguagesModule.html":{},"injectables/LanguagesService.html":{},"entities/Like.html":{},"classes/LoginDto.html":{},"modules/MailingModule.html":{},"injectables/MailingService.html":{},"injectables/PayloadFromTokenPipe.html":{},"entities/Place.html":{},"controllers/PlaceCategoriesController.html":{},"modules/PlaceCategoriesModule.html":{},"injectables/PlaceCategoriesService.html":{},"entities/PlaceCategory.html":{},"classes/PlaceCategoryDto.html":{},"classes/PlaceDto.html":{},"classes/PlaceSlugDto.html":{},"entities/PlaceType.html":{},"classes/PlaceTypeDto.html":{},"controllers/PlaceTypesController.html":{},"modules/PlaceTypesModule.html":{},"injectables/PlaceTypesService.html":{},"controllers/PlacesController.html":{},"modules/PlacesModule.html":{},"injectables/PlacesService.html":{},"entities/Role.html":{},"classes/RoleDto.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/SearchPlaceDto.html":{},"modules/StorageModule.html":{},"injectables/StorageService.html":{},"classes/TokenPayloadDto.html":{},"entities/Translation.html":{},"classes/TranslationDto.html":{},"controllers/TranslationsController.html":{},"modules/TranslationsModule.html":{},"injectables/TranslationsService.html":{},"classes/UpdateCommentDto.html":{},"classes/UpdateLanguageDto.html":{},"classes/UpdatePlaceCategoryDto.html":{},"classes/UpdatePlaceDto.html":{},"classes/UpdatePlaceTypeDto.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateTranslationDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserDto.html":{},"injectables/UserFromTokenPipe.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ValidationExceptionDto.html":{},"classes/ValidationMessageDto.html":{}}}],["imports",{"_index":104,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommentsModule.html":{},"modules/DatabaseModule.html":{},"modules/ImagesModule.html":{},"modules/LanguagesModule.html":{},"modules/MailingModule.html":{},"modules/PlaceCategoriesModule.html":{},"modules/PlaceTypesModule.html":{},"modules/PlacesModule.html":{},"modules/RolesModule.html":{},"modules/TranslationsModule.html":{},"modules/UsersModule.html":{}}}],["in(dto.categoriesids",{"_index":1373,"title":{},"body":{"injectables/PlacesService.html":{}}}],["in(imageids",{"_index":706,"title":{},"body":{"injectables/ImagesService.html":{}}}],["incorrect",{"_index":266,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PlacesService.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"entities/Admin.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"injectables/AuthService.html":{},"entities/Comment.html":{},"classes/CommentDto.html":{},"injectables/CommentsService.html":{},"classes/CreateCommentDto.html":{},"classes/CreateFileDto.html":{},"classes/CreateImageDto.html":{},"classes/CreateLanguageDto.html":{},"classes/CreatePlaceCategoryDto.html":{},"classes/CreatePlaceDto.html":{},"classes/CreatePlaceTypeDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateTranslationDto.html":{},"classes/CreateUserDto.html":{},"classes/FileDto.html":{},"interfaces/IDatabaseConfig.html":{},"interfaces/IGoogleCloudConfig.html":{},"interfaces/IJwtConfig.html":{},"interfaces/IMailerConfig.html":{},"entities/Image.html":{},"classes/ImageDto.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"guards/JwtAuthGuard.html":{},"entities/Language.html":{},"classes/LanguageDto.html":{},"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{},"entities/Like.html":{},"classes/LoginDto.html":{},"injectables/MailingService.html":{},"injectables/PayloadFromTokenPipe.html":{},"entities/Place.html":{},"controllers/PlaceCategoriesController.html":{},"injectables/PlaceCategoriesService.html":{},"entities/PlaceCategory.html":{},"classes/PlaceCategoryDto.html":{},"classes/PlaceDto.html":{},"classes/PlaceSlugDto.html":{},"entities/PlaceType.html":{},"classes/PlaceTypeDto.html":{},"controllers/PlaceTypesController.html":{},"injectables/PlaceTypesService.html":{},"controllers/PlacesController.html":{},"injectables/PlacesService.html":{},"entities/Role.html":{},"classes/RoleDto.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"classes/SearchPlaceDto.html":{},"injectables/StorageService.html":{},"classes/TokenPayloadDto.html":{},"entities/Translation.html":{},"classes/TranslationDto.html":{},"controllers/TranslationsController.html":{},"injectables/TranslationsService.html":{},"classes/UpdateCommentDto.html":{},"classes/UpdatePlaceDto.html":{},"entities/User.html":{},"classes/UserDto.html":{},"injectables/UserFromTokenPipe.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/ValidationExceptionDto.html":{},"classes/ValidationMessageDto.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["index({unique",{"_index":949,"title":{},"body":{"entities/Place.html":{},"entities/Translation.html":{}}}],["info",{"_index":3,"title":{},"body":{"entities/Admin.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Comment.html":{},"classes/CommentDto.html":{},"modules/CommentsModule.html":{},"injectables/CommentsService.html":{},"classes/CreateCommentDto.html":{},"classes/CreateFileDto.html":{},"classes/CreateImageDto.html":{},"classes/CreateLanguageDto.html":{},"classes/CreatePlaceCategoryDto.html":{},"classes/CreatePlaceDto.html":{},"classes/CreatePlaceTypeDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateTranslationDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"classes/FileDto.html":{},"interfaces/IDatabaseConfig.html":{},"interfaces/IGoogleCloudConfig.html":{},"interfaces/IJwtConfig.html":{},"interfaces/IMailerConfig.html":{},"entities/Image.html":{},"classes/ImageDto.html":{},"controllers/ImagesController.html":{},"modules/ImagesModule.html":{},"injectables/ImagesService.html":{},"guards/JwtAuthGuard.html":{},"entities/Language.html":{},"classes/LanguageDto.html":{},"controllers/LanguagesController.html":{},"modules/LanguagesModule.html":{},"injectables/LanguagesService.html":{},"entities/Like.html":{},"classes/LoginDto.html":{},"modules/MailingModule.html":{},"injectables/MailingService.html":{},"injectables/PayloadFromTokenPipe.html":{},"entities/Place.html":{},"controllers/PlaceCategoriesController.html":{},"modules/PlaceCategoriesModule.html":{},"injectables/PlaceCategoriesService.html":{},"entities/PlaceCategory.html":{},"classes/PlaceCategoryDto.html":{},"classes/PlaceDto.html":{},"classes/PlaceSlugDto.html":{},"entities/PlaceType.html":{},"classes/PlaceTypeDto.html":{},"controllers/PlaceTypesController.html":{},"modules/PlaceTypesModule.html":{},"injectables/PlaceTypesService.html":{},"controllers/PlacesController.html":{},"modules/PlacesModule.html":{},"injectables/PlacesService.html":{},"entities/Role.html":{},"classes/RoleDto.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/SearchPlaceDto.html":{},"modules/StorageModule.html":{},"injectables/StorageService.html":{},"classes/TokenPayloadDto.html":{},"entities/Translation.html":{},"classes/TranslationDto.html":{},"controllers/TranslationsController.html":{},"modules/TranslationsModule.html":{},"injectables/TranslationsService.html":{},"classes/UpdateCommentDto.html":{},"classes/UpdateLanguageDto.html":{},"classes/UpdatePlaceCategoryDto.html":{},"classes/UpdatePlaceDto.html":{},"classes/UpdatePlaceTypeDto.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateTranslationDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserDto.html":{},"injectables/UserFromTokenPipe.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ValidationExceptionDto.html":{},"classes/ValidationMessageDto.html":{}}}],["inherited",{"_index":425,"title":{},"body":{"classes/CreateImageDto.html":{},"classes/LanguageDto.html":{},"classes/UpdateCommentDto.html":{},"classes/UpdatePlaceDto.html":{}}}],["inject",{"_index":217,"title":{},"body":{"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/MailingModule.html":{}}}],["injectable",{"_index":218,"title":{"injectables/AuthService.html":{},"injectables/CommentsService.html":{},"injectables/ImagesService.html":{},"injectables/LanguagesService.html":{},"injectables/MailingService.html":{},"injectables/PayloadFromTokenPipe.html":{},"injectables/PlaceCategoriesService.html":{},"injectables/PlaceTypesService.html":{},"injectables/PlacesService.html":{},"injectables/RolesService.html":{},"injectables/StorageService.html":{},"injectables/TranslationsService.html":{},"injectables/UserFromTokenPipe.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/CommentsService.html":{},"injectables/ImagesService.html":{},"guards/JwtAuthGuard.html":{},"injectables/LanguagesService.html":{},"injectables/MailingService.html":{},"injectables/PayloadFromTokenPipe.html":{},"injectables/PlaceCategoriesService.html":{},"injectables/PlaceTypesService.html":{},"injectables/PlacesService.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"injectables/StorageService.html":{},"injectables/TranslationsService.html":{},"injectables/UserFromTokenPipe.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":219,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CommentsService.html":{},"injectables/ImagesService.html":{},"injectables/LanguagesService.html":{},"injectables/MailingService.html":{},"injectables/PayloadFromTokenPipe.html":{},"injectables/PlaceCategoriesService.html":{},"injectables/PlaceTypesService.html":{},"injectables/PlacesService.html":{},"injectables/RolesService.html":{},"injectables/StorageService.html":{},"injectables/TranslationsService.html":{},"injectables/UserFromTokenPipe.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injectrepository",{"_index":372,"title":{},"body":{"injectables/CommentsService.html":{},"injectables/ImagesService.html":{},"injectables/LanguagesService.html":{},"injectables/PlaceCategoriesService.html":{},"injectables/PlaceTypesService.html":{},"injectables/PlacesService.html":{},"injectables/RolesService.html":{},"injectables/TranslationsService.html":{},"injectables/UsersService.html":{}}}],["injectrepository(comment",{"_index":376,"title":{},"body":{"injectables/CommentsService.html":{}}}],["injectrepository(image",{"_index":697,"title":{},"body":{"injectables/ImagesService.html":{}}}],["injectrepository(language",{"_index":823,"title":{},"body":{"injectables/LanguagesService.html":{},"injectables/TranslationsService.html":{}}}],["injectrepository(like",{"_index":1359,"title":{},"body":{"injectables/PlacesService.html":{}}}],["injectrepository(place",{"_index":1358,"title":{},"body":{"injectables/PlacesService.html":{}}}],["injectrepository(placecategory",{"_index":1018,"title":{},"body":{"injectables/PlaceCategoriesService.html":{},"injectables/PlacesService.html":{}}}],["injectrepository(placetype",{"_index":1163,"title":{},"body":{"injectables/PlaceTypesService.html":{},"injectables/PlacesService.html":{}}}],["injectrepository(role",{"_index":1547,"title":{},"body":{"injectables/RolesService.html":{}}}],["injectrepository(translation",{"_index":1723,"title":{},"body":{"injectables/TranslationsService.html":{}}}],["injectrepository(user",{"_index":1892,"title":{},"body":{"injectables/UsersService.html":{}}}],["innerjoinandmapone",{"_index":1033,"title":{},"body":{"injectables/PlaceCategoriesService.html":{},"injectables/PlaceTypesService.html":{}}}],["installation",{"_index":1995,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":1997,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":745,"title":{},"body":{"guards/JwtAuthGuard.html":{},"injectables/PlacesService.html":{},"guards/RolesGuard.html":{},"injectables/UserFromTokenPipe.html":{}}}],["int",{"_index":925,"title":{},"body":{"entities/Place.html":{},"entities/PlaceCategory.html":{},"entities/PlaceType.html":{},"entities/Translation.html":{}}}],["interface",{"_index":542,"title":{"interfaces/IDatabaseConfig.html":{},"interfaces/IGoogleCloudConfig.html":{},"interfaces/IJwtConfig.html":{},"interfaces/IMailerConfig.html":{}},"body":{"interfaces/IDatabaseConfig.html":{},"interfaces/IGoogleCloudConfig.html":{},"interfaces/IJwtConfig.html":{},"interfaces/IMailerConfig.html":{},"coverage.html":{}}}],["interfaces",{"_index":543,"title":{},"body":{"interfaces/IDatabaseConfig.html":{},"interfaces/IGoogleCloudConfig.html":{},"interfaces/IJwtConfig.html":{},"interfaces/IMailerConfig.html":{},"overview.html":{}}}],["invalid",{"_index":154,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ImagesController.html":{},"guards/JwtAuthGuard.html":{},"injectables/PlacesService.html":{},"guards/RolesGuard.html":{},"injectables/UserFromTokenPipe.html":{}}}],["isarray",{"_index":458,"title":{},"body":{"classes/CreatePlaceDto.html":{},"controllers/ImagesController.html":{},"controllers/LanguagesController.html":{},"controllers/PlaceCategoriesController.html":{},"classes/PlaceDto.html":{},"controllers/PlaceTypesController.html":{},"controllers/PlacesController.html":{},"classes/SearchPlaceDto.html":{},"controllers/TranslationsController.html":{},"classes/UpdatePlaceDto.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"classes/ValidationExceptionDto.html":{},"classes/ValidationMessageDto.html":{}}}],["isboolean",{"_index":482,"title":{},"body":{"classes/CreatePlaceTypeDto.html":{}}}],["isemailconfirmed",{"_index":1799,"title":{},"body":{"entities/User.html":{},"classes/UserDto.html":{},"injectables/UsersService.html":{}}}],["isglobal",{"_index":127,"title":{},"body":{"modules/AppModule.html":{}}}],["isliked",{"_index":1062,"title":{},"body":{"classes/PlaceDto.html":{},"injectables/PlacesService.html":{}}}],["islikedbyuser",{"_index":1320,"title":{},"body":{"injectables/PlacesService.html":{}}}],["islikedbyuser(placelikes",{"_index":1346,"title":{},"body":{"injectables/PlacesService.html":{}}}],["isnumber",{"_index":483,"title":{},"body":{"classes/CreatePlaceTypeDto.html":{}}}],["isstring",{"_index":484,"title":{},"body":{"classes/CreatePlaceTypeDto.html":{}}}],["john",{"_index":516,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UserDto.html":{}}}],["johndoe@gmail.com",{"_index":513,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/UserDto.html":{}}}],["join",{"_index":882,"title":{},"body":{"injectables/MailingService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["join(process.cwd",{"_index":885,"title":{},"body":{"injectables/MailingService.html":{},"miscellaneous/variables.html":{}}}],["joincolumn",{"_index":1049,"title":{},"body":{"entities/PlaceCategory.html":{},"entities/PlaceType.html":{},"entities/User.html":{}}}],["jointable",{"_index":957,"title":{},"body":{"entities/Place.html":{},"entities/User.html":{}}}],["jwt",{"_index":191,"title":{},"body":{"classes/AuthDto.html":{},"interfaces/IDatabaseConfig.html":{},"interfaces/IGoogleCloudConfig.html":{},"interfaces/IJwtConfig.html":{},"interfaces/IMailerConfig.html":{}}}],["jwtauthguard",{"_index":716,"title":{"guards/JwtAuthGuard.html":{}},"body":{"guards/JwtAuthGuard.html":{},"coverage.html":{}}}],["jwtmodule",{"_index":203,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.registerasync",{"_index":210,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":226,"title":{},"body":{"injectables/AuthService.html":{},"guards/JwtAuthGuard.html":{},"injectables/PayloadFromTokenPipe.html":{}}}],["kamil",{"_index":2029,"title":{},"body":{"index.html":{}}}],["key",{"_index":1725,"title":{},"body":{"injectables/TranslationsService.html":{}}}],["keyfilename",{"_index":556,"title":{},"body":{"interfaces/IDatabaseConfig.html":{},"interfaces/IGoogleCloudConfig.html":{},"interfaces/IJwtConfig.html":{},"interfaces/IMailerConfig.html":{},"injectables/StorageService.html":{}}}],["lang",{"_index":970,"title":{},"body":{"controllers/PlaceCategoriesController.html":{},"controllers/PlaceTypesController.html":{},"controllers/PlacesController.html":{},"injectables/TranslationsService.html":{}}}],["lang.code",{"_index":1754,"title":{},"body":{"injectables/TranslationsService.html":{}}}],["langid",{"_index":504,"title":{},"body":{"classes/CreateTranslationDto.html":{},"controllers/PlaceCategoriesController.html":{},"injectables/PlaceCategoriesService.html":{},"controllers/PlaceTypesController.html":{},"injectables/PlaceTypesService.html":{},"controllers/PlacesController.html":{},"injectables/PlacesService.html":{},"injectables/TranslationsService.html":{}}}],["language",{"_index":433,"title":{"entities/Language.html":{}},"body":{"classes/CreateLanguageDto.html":{},"classes/CreateTranslationDto.html":{},"entities/Language.html":{},"classes/LanguageDto.html":{},"controllers/LanguagesController.html":{},"modules/LanguagesModule.html":{},"injectables/LanguagesService.html":{},"controllers/PlaceCategoriesController.html":{},"injectables/PlaceCategoriesService.html":{},"controllers/PlaceTypesController.html":{},"injectables/PlaceTypesService.html":{},"controllers/PlacesController.html":{},"entities/Translation.html":{},"classes/TranslationDto.html":{},"modules/TranslationsModule.html":{},"injectables/TranslationsService.html":{},"coverage.html":{}}}],["language'})@apibody({type",{"_index":769,"title":{},"body":{"controllers/LanguagesController.html":{},"controllers/PlaceCategoriesController.html":{},"controllers/PlaceTypesController.html":{},"controllers/PlacesController.html":{}}}],["language'})@apioperation({summary",{"_index":778,"title":{},"body":{"controllers/LanguagesController.html":{}}}],["language'})@useinterceptors(classserializerinterceptor)@get",{"_index":977,"title":{},"body":{"controllers/PlaceCategoriesController.html":{},"controllers/PlaceTypesController.html":{},"controllers/PlacesController.html":{}}}],["language'})@useinterceptors(classserializerinterceptor)@get(':id",{"_index":982,"title":{},"body":{"controllers/PlaceCategoriesController.html":{},"controllers/PlaceTypesController.html":{}}}],["language'})@useinterceptors(classserializerinterceptor)@get(':slug",{"_index":1234,"title":{},"body":{"controllers/PlacesController.html":{}}}],["language.dto",{"_index":760,"title":{},"body":{"classes/LanguageDto.html":{},"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{},"classes/UpdateLanguageDto.html":{}}}],["language.dto.ts",{"_index":431,"title":{},"body":{"classes/CreateLanguageDto.html":{},"classes/UpdateLanguageDto.html":{},"coverage.html":{}}}],["language.dto.ts:5",{"_index":435,"title":{},"body":{"classes/CreateLanguageDto.html":{}}}],["language.dto.ts:8",{"_index":434,"title":{},"body":{"classes/CreateLanguageDto.html":{}}}],["language.id",{"_index":1637,"title":{},"body":{"entities/Translation.html":{}}}],["languagedto",{"_index":755,"title":{"classes/LanguageDto.html":{}},"body":{"classes/LanguageDto.html":{},"controllers/LanguagesController.html":{},"coverage.html":{}}}],["languagedto})@apinotfoundresponse({type",{"_index":776,"title":{},"body":{"controllers/LanguagesController.html":{}}}],["languagedto})@apioperation({summary",{"_index":768,"title":{},"body":{"controllers/LanguagesController.html":{}}}],["languages",{"_index":763,"title":{},"body":{"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{},"injectables/TranslationsService.html":{}}}],["languages'})@get",{"_index":773,"title":{},"body":{"controllers/LanguagesController.html":{}}}],["languages.controller",{"_index":811,"title":{},"body":{"modules/LanguagesModule.html":{}}}],["languages.map(async",{"_index":1751,"title":{},"body":{"injectables/TranslationsService.html":{}}}],["languages.service",{"_index":790,"title":{},"body":{"controllers/LanguagesController.html":{},"modules/LanguagesModule.html":{}}}],["languages/entities/language.entity",{"_index":1643,"title":{},"body":{"entities/Translation.html":{},"modules/TranslationsModule.html":{},"injectables/TranslationsService.html":{}}}],["languages/languages.module",{"_index":114,"title":{},"body":{"modules/AppModule.html":{},"modules/TranslationsModule.html":{}}}],["languages/languages.service",{"_index":1722,"title":{},"body":{"injectables/TranslationsService.html":{}}}],["languagescontroller",{"_index":761,"title":{"controllers/LanguagesController.html":{}},"body":{"controllers/LanguagesController.html":{},"modules/LanguagesModule.html":{},"coverage.html":{}}}],["languagesmodule",{"_index":91,"title":{"modules/LanguagesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/LanguagesModule.html":{},"modules/TranslationsModule.html":{},"modules.html":{},"overview.html":{}}}],["languagesrepository",{"_index":817,"title":{},"body":{"injectables/LanguagesService.html":{},"injectables/TranslationsService.html":{}}}],["languagesservice",{"_index":789,"title":{"injectables/LanguagesService.html":{}},"body":{"controllers/LanguagesController.html":{},"modules/LanguagesModule.html":{},"injectables/LanguagesService.html":{},"injectables/TranslationsService.html":{},"coverage.html":{},"overview.html":{}}}],["last",{"_index":518,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/TranslationsService.html":{},"classes/UserDto.html":{}}}],["lastname",{"_index":387,"title":{},"body":{"injectables/CommentsService.html":{},"classes/CreateUserDto.html":{},"entities/User.html":{},"classes/UserDto.html":{}}}],["lat;lng",{"_index":460,"title":{},"body":{"classes/CreatePlaceDto.html":{},"classes/PlaceDto.html":{},"classes/SearchPlaceDto.html":{},"classes/UpdatePlaceDto.html":{}}}],["leftjoinandmapone",{"_index":1404,"title":{},"body":{"injectables/PlacesService.html":{}}}],["leftjoinandselect('like.user",{"_index":1443,"title":{},"body":{"injectables/PlacesService.html":{}}}],["leftjoinandselect('pc.image",{"_index":1032,"title":{},"body":{"injectables/PlaceCategoriesService.html":{}}}],["leftjoinandselect('place.categories",{"_index":1402,"title":{},"body":{"injectables/PlacesService.html":{}}}],["leftjoinandselect('place.images",{"_index":1440,"title":{},"body":{"injectables/PlacesService.html":{}}}],["leftjoinandselect('place.likes",{"_index":1442,"title":{},"body":{"injectables/PlacesService.html":{}}}],["leftjoinandselect('place.type",{"_index":1403,"title":{},"body":{"injectables/PlacesService.html":{}}}],["leftjoinandselect('pt.image",{"_index":1176,"title":{},"body":{"injectables/PlaceTypesService.html":{}}}],["legend",{"_index":80,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommentsModule.html":{},"modules/ImagesModule.html":{},"modules/LanguagesModule.html":{},"modules/MailingModule.html":{},"modules/PlaceCategoriesModule.html":{},"modules/PlaceTypesModule.html":{},"modules/PlacesModule.html":{},"modules/RolesModule.html":{},"modules/StorageModule.html":{},"modules/TranslationsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["length",{"_index":20,"title":{},"body":{"entities/Admin.html":{},"entities/Comment.html":{},"entities/Language.html":{},"entities/Role.html":{},"entities/Translation.html":{},"entities/User.html":{}}}],["license",{"_index":2034,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":2014,"title":{},"body":{"index.html":{}}}],["like'})@apiokresponse({description",{"_index":1205,"title":{},"body":{"controllers/PlacesController.html":{}}}],["like.entity",{"_index":960,"title":{},"body":{"entities/Place.html":{}}}],["like.place",{"_index":945,"title":{},"body":{"entities/Place.html":{},"injectables/PlacesService.html":{}}}],["like.place.id",{"_index":1458,"title":{},"body":{"injectables/PlacesService.html":{}}}],["like.user",{"_index":1452,"title":{},"body":{"injectables/PlacesService.html":{},"entities/User.html":{}}}],["like.user.id",{"_index":1459,"title":{},"body":{"injectables/PlacesService.html":{}}}],["liked",{"_index":1077,"title":{},"body":{"classes/PlaceDto.html":{}}}],["likeexists",{"_index":1454,"title":{},"body":{"injectables/PlacesService.html":{}}}],["likes",{"_index":921,"title":{},"body":{"entities/Place.html":{},"classes/PlaceDto.html":{},"injectables/PlacesService.html":{},"classes/SearchPlaceDto.html":{},"entities/User.html":{}}}],["likescount",{"_index":922,"title":{},"body":{"entities/Place.html":{},"classes/PlaceDto.html":{},"injectables/PlacesService.html":{},"classes/SearchPlaceDto.html":{}}}],["likesrepository",{"_index":1326,"title":{},"body":{"injectables/PlacesService.html":{}}}],["likeuser",{"_index":1444,"title":{},"body":{"injectables/PlacesService.html":{}}}],["limit",{"_index":660,"title":{},"body":{"controllers/ImagesController.html":{}}}],["limits",{"_index":648,"title":{},"body":{"controllers/ImagesController.html":{}}}],["line",{"_index":901,"title":{},"body":{"injectables/MailingService.html":{}}}],["list",{"_index":897,"title":{},"body":{"injectables/MailingService.html":{}}}],["load",{"_index":126,"title":{},"body":{"modules/AppModule.html":{}}}],["loadrelationids",{"_index":1762,"title":{},"body":{"injectables/TranslationsService.html":{}}}],["logger",{"_index":721,"title":{},"body":{"guards/JwtAuthGuard.html":{},"guards/RolesGuard.html":{},"injectables/StorageService.html":{},"injectables/TranslationsService.html":{}}}],["logger('jwt",{"_index":732,"title":{},"body":{"guards/JwtAuthGuard.html":{}}}],["logger('roles",{"_index":1521,"title":{},"body":{"guards/RolesGuard.html":{}}}],["logger('storage",{"_index":1593,"title":{},"body":{"injectables/StorageService.html":{}}}],["logger('translation",{"_index":1717,"title":{},"body":{"injectables/TranslationsService.html":{}}}],["login",{"_index":135,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["login'})@apiokresponse({description",{"_index":153,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(@body",{"_index":180,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(logindto",{"_index":151,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["logindto",{"_index":152,"title":{"classes/LoginDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginDto.html":{},"coverage.html":{}}}],["logindto.password",{"_index":264,"title":{},"body":{"injectables/AuthService.html":{}}}],["logindto})@post('/login",{"_index":156,"title":{},"body":{"controllers/AuthController.html":{}}}],["mail",{"_index":890,"title":{},"body":{"injectables/MailingService.html":{}}}],["mail_templates_path",{"_index":884,"title":{},"body":{"injectables/MailingService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["mailermodule",{"_index":853,"title":{},"body":{"modules/MailingModule.html":{}}}],["mailermodule.forrootasync",{"_index":859,"title":{},"body":{"modules/MailingModule.html":{}}}],["mailerservice",{"_index":876,"title":{},"body":{"injectables/MailingService.html":{}}}],["mailing.service",{"_index":858,"title":{},"body":{"modules/MailingModule.html":{}}}],["mailing/mailing.module",{"_index":121,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["mailing/mailing.service",{"_index":242,"title":{},"body":{"injectables/AuthService.html":{}}}],["mailingmodule",{"_index":92,"title":{"modules/MailingModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailingModule.html":{},"modules.html":{},"overview.html":{}}}],["mailingservice",{"_index":227,"title":{"injectables/MailingService.html":{}},"body":{"injectables/AuthService.html":{},"modules/MailingModule.html":{},"injectables/MailingService.html":{},"coverage.html":{},"overview.html":{}}}],["manage",{"_index":308,"title":{},"body":{"classes/CommentDto.html":{}}}],["manytomany",{"_index":40,"title":{},"body":{"entities/Admin.html":{},"entities/Place.html":{},"entities/PlaceCategory.html":{},"entities/Role.html":{},"entities/User.html":{}}}],["manytomany(undefined",{"_index":935,"title":{},"body":{"entities/Place.html":{},"entities/PlaceCategory.html":{},"entities/Role.html":{},"entities/User.html":{}}}],["manytoone",{"_index":295,"title":{},"body":{"entities/Comment.html":{},"entities/Image.html":{},"entities/Like.html":{},"entities/Place.html":{},"entities/Translation.html":{}}}],["manytoone(undefined",{"_index":286,"title":{},"body":{"entities/Comment.html":{},"entities/Image.html":{},"entities/Like.html":{},"entities/Place.html":{},"entities/Translation.html":{}}}],["matching",{"_index":49,"title":{},"body":{"entities/Admin.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Comment.html":{},"classes/CommentDto.html":{},"modules/CommentsModule.html":{},"injectables/CommentsService.html":{},"classes/CreateCommentDto.html":{},"classes/CreateFileDto.html":{},"classes/CreateImageDto.html":{},"classes/CreateLanguageDto.html":{},"classes/CreatePlaceCategoryDto.html":{},"classes/CreatePlaceDto.html":{},"classes/CreatePlaceTypeDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateTranslationDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"classes/FileDto.html":{},"interfaces/IDatabaseConfig.html":{},"interfaces/IGoogleCloudConfig.html":{},"interfaces/IJwtConfig.html":{},"interfaces/IMailerConfig.html":{},"entities/Image.html":{},"classes/ImageDto.html":{},"controllers/ImagesController.html":{},"modules/ImagesModule.html":{},"injectables/ImagesService.html":{},"guards/JwtAuthGuard.html":{},"entities/Language.html":{},"classes/LanguageDto.html":{},"controllers/LanguagesController.html":{},"modules/LanguagesModule.html":{},"injectables/LanguagesService.html":{},"entities/Like.html":{},"classes/LoginDto.html":{},"modules/MailingModule.html":{},"injectables/MailingService.html":{},"injectables/PayloadFromTokenPipe.html":{},"entities/Place.html":{},"controllers/PlaceCategoriesController.html":{},"modules/PlaceCategoriesModule.html":{},"injectables/PlaceCategoriesService.html":{},"entities/PlaceCategory.html":{},"classes/PlaceCategoryDto.html":{},"classes/PlaceDto.html":{},"classes/PlaceSlugDto.html":{},"entities/PlaceType.html":{},"classes/PlaceTypeDto.html":{},"controllers/PlaceTypesController.html":{},"modules/PlaceTypesModule.html":{},"injectables/PlaceTypesService.html":{},"controllers/PlacesController.html":{},"modules/PlacesModule.html":{},"injectables/PlacesService.html":{},"entities/Role.html":{},"classes/RoleDto.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/SearchPlaceDto.html":{},"modules/StorageModule.html":{},"injectables/StorageService.html":{},"classes/TokenPayloadDto.html":{},"entities/Translation.html":{},"classes/TranslationDto.html":{},"controllers/TranslationsController.html":{},"modules/TranslationsModule.html":{},"injectables/TranslationsService.html":{},"classes/UpdateCommentDto.html":{},"classes/UpdateLanguageDto.html":{},"classes/UpdatePlaceCategoryDto.html":{},"classes/UpdatePlaceDto.html":{},"classes/UpdatePlaceTypeDto.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateTranslationDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserDto.html":{},"injectables/UserFromTokenPipe.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ValidationExceptionDto.html":{},"classes/ValidationMessageDto.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["max",{"_index":1728,"title":{},"body":{"injectables/TranslationsService.html":{}}}],["maximum",{"_index":658,"title":{},"body":{"controllers/ImagesController.html":{}}}],["maxlength",{"_index":485,"title":{},"body":{"classes/CreatePlaceTypeDto.html":{}}}],["maxlength(100",{"_index":488,"title":{},"body":{"classes/CreatePlaceTypeDto.html":{}}}],["memorystorage",{"_index":632,"title":{},"body":{"controllers/ImagesController.html":{}}}],["message",{"_index":246,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CommentsService.html":{},"guards/JwtAuthGuard.html":{},"controllers/PlacesController.html":{},"injectables/PlacesService.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"injectables/UserFromTokenPipe.html":{},"injectables/UsersService.html":{},"classes/ValidationExceptionDto.html":{},"classes/ValidationMessageDto.html":{},"miscellaneous/variables.html":{}}}],["metadata",{"_index":1968,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":54,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CommentsService.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"guards/JwtAuthGuard.html":{},"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{},"injectables/MailingService.html":{},"injectables/PayloadFromTokenPipe.html":{},"controllers/PlaceCategoriesController.html":{},"injectables/PlaceCategoriesService.html":{},"controllers/PlaceTypesController.html":{},"injectables/PlaceTypesService.html":{},"controllers/PlacesController.html":{},"injectables/PlacesService.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"injectables/StorageService.html":{},"controllers/TranslationsController.html":{},"injectables/TranslationsService.html":{},"injectables/UserFromTokenPipe.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["miscellaneous",{"_index":1973,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":2013,"title":{},"body":{"index.html":{}}}],["mode",{"_index":2003,"title":{},"body":{"index.html":{}}}],["moderation",{"_index":923,"title":{},"body":{"entities/Place.html":{},"classes/PlaceDto.html":{},"injectables/PlacesService.html":{},"classes/SearchPlaceDto.html":{}}}],["module",{"_index":76,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommentsModule.html":{},"modules/DatabaseModule.html":{},"modules/ImagesModule.html":{},"modules/LanguagesModule.html":{},"modules/MailingModule.html":{},"modules/PlaceCategoriesModule.html":{},"modules/PlaceTypesModule.html":{},"modules/PlacesModule.html":{},"modules/RolesModule.html":{},"modules/StorageModule.html":{},"modules/TranslationsModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommentsModule.html":{},"modules/DatabaseModule.html":{},"modules/ImagesModule.html":{},"modules/LanguagesModule.html":{},"modules/MailingModule.html":{},"modules/PlaceCategoriesModule.html":{},"modules/PlaceTypesModule.html":{},"modules/PlacesModule.html":{},"modules/RolesModule.html":{},"modules/StorageModule.html":{},"modules/TranslationsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":78,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommentsModule.html":{},"modules/DatabaseModule.html":{},"modules/ImagesModule.html":{},"modules/LanguagesModule.html":{},"modules/MailingModule.html":{},"modules/PlaceCategoriesModule.html":{},"modules/PlaceTypesModule.html":{},"modules/PlacesModule.html":{},"modules/RolesModule.html":{},"modules/StorageModule.html":{},"modules/TranslationsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["modules/mailer",{"_index":855,"title":{},"body":{"modules/MailingModule.html":{},"injectables/MailingService.html":{},"dependencies.html":{}}}],["modules/mailer/dist/adapters/ejs.adapter",{"_index":857,"title":{},"body":{"modules/MailingModule.html":{}}}],["more",{"_index":2025,"title":{},"body":{"index.html":{}}}],["mssql",{"_index":525,"title":{},"body":{"modules/DatabaseModule.html":{},"dependencies.html":{}}}],["multer",{"_index":633,"title":{},"body":{"controllers/ImagesController.html":{}}}],["myśliwiec",{"_index":2030,"title":{},"body":{"index.html":{}}}],["name",{"_index":148,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthDto.html":{},"injectables/AuthService.html":{},"classes/CommentDto.html":{},"injectables/CommentsService.html":{},"classes/CreateRoleDto.html":{},"classes/CreateUserDto.html":{},"interfaces/IDatabaseConfig.html":{},"interfaces/IGoogleCloudConfig.html":{},"interfaces/IJwtConfig.html":{},"interfaces/IMailerConfig.html":{},"classes/ImageDto.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"guards/JwtAuthGuard.html":{},"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{},"injectables/MailingService.html":{},"injectables/PayloadFromTokenPipe.html":{},"controllers/PlaceCategoriesController.html":{},"injectables/PlaceCategoriesService.html":{},"classes/PlaceCategoryDto.html":{},"classes/PlaceDto.html":{},"classes/PlaceTypeDto.html":{},"controllers/PlaceTypesController.html":{},"injectables/PlaceTypesService.html":{},"controllers/PlacesController.html":{},"injectables/PlacesService.html":{},"entities/Role.html":{},"classes/RoleDto.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"classes/SearchPlaceDto.html":{},"injectables/StorageService.html":{},"classes/TokenPayloadDto.html":{},"classes/TranslationDto.html":{},"controllers/TranslationsController.html":{},"injectables/TranslationsService.html":{},"classes/UserDto.html":{},"injectables/UserFromTokenPipe.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["name'})@apiokresponse({description",{"_index":1496,"title":{},"body":{"controllers/RolesController.html":{}}}],["names.enum",{"_index":499,"title":{},"body":{"classes/CreateRoleDto.html":{},"controllers/ImagesController.html":{},"controllers/PlacesController.html":{},"entities/Role.html":{},"classes/RoleDto.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"injectables/UsersService.html":{}}}],["names.enum.ts",{"_index":1976,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["nest",{"_index":1992,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":2033,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":854,"title":{},"body":{"modules/MailingModule.html":{},"injectables/MailingService.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":63,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/CommentsModule.html":{},"injectables/CommentsService.html":{},"modules/DatabaseModule.html":{},"controllers/ImagesController.html":{},"modules/ImagesModule.html":{},"injectables/ImagesService.html":{},"guards/JwtAuthGuard.html":{},"controllers/LanguagesController.html":{},"modules/LanguagesModule.html":{},"injectables/LanguagesService.html":{},"modules/MailingModule.html":{},"injectables/MailingService.html":{},"injectables/PayloadFromTokenPipe.html":{},"controllers/PlaceCategoriesController.html":{},"modules/PlaceCategoriesModule.html":{},"injectables/PlaceCategoriesService.html":{},"controllers/PlaceTypesController.html":{},"modules/PlaceTypesModule.html":{},"injectables/PlaceTypesService.html":{},"controllers/PlacesController.html":{},"modules/PlacesModule.html":{},"injectables/PlacesService.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"modules/StorageModule.html":{},"injectables/StorageService.html":{},"controllers/TranslationsController.html":{},"modules/TranslationsModule.html":{},"injectables/TranslationsService.html":{},"injectables/UserFromTokenPipe.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":108,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/MailingModule.html":{},"injectables/StorageService.html":{},"injectables/TranslationsService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":1518,"title":{},"body":{"guards/RolesGuard.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":204,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/JwtAuthGuard.html":{},"injectables/PayloadFromTokenPipe.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":630,"title":{},"body":{"controllers/ImagesController.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":67,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"classes/CommentDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreateFileDto.html":{},"classes/CreateLanguageDto.html":{},"classes/CreatePlaceCategoryDto.html":{},"classes/CreatePlaceDto.html":{},"classes/CreatePlaceTypeDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateTranslationDto.html":{},"classes/CreateUserDto.html":{},"classes/FileDto.html":{},"classes/ImageDto.html":{},"controllers/ImagesController.html":{},"classes/LanguageDto.html":{},"controllers/LanguagesController.html":{},"classes/LoginDto.html":{},"controllers/PlaceCategoriesController.html":{},"classes/PlaceCategoryDto.html":{},"classes/PlaceDto.html":{},"classes/PlaceSlugDto.html":{},"classes/PlaceTypeDto.html":{},"controllers/PlaceTypesController.html":{},"controllers/PlacesController.html":{},"classes/RoleDto.html":{},"controllers/RolesController.html":{},"classes/SearchPlaceDto.html":{},"classes/TranslationDto.html":{},"controllers/TranslationsController.html":{},"classes/UpdateLanguageDto.html":{},"classes/UpdatePlaceCategoryDto.html":{},"classes/UpdatePlaceDto.html":{},"classes/UpdatePlaceTypeDto.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateTranslationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"classes/ValidationExceptionDto.html":{},"classes/ValidationMessageDto.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":338,"title":{},"body":{"modules/CommentsModule.html":{},"injectables/CommentsService.html":{},"modules/DatabaseModule.html":{},"modules/ImagesModule.html":{},"injectables/ImagesService.html":{},"modules/LanguagesModule.html":{},"injectables/LanguagesService.html":{},"modules/PlaceCategoriesModule.html":{},"injectables/PlaceCategoriesService.html":{},"modules/PlaceTypesModule.html":{},"injectables/PlaceTypesService.html":{},"modules/PlacesModule.html":{},"injectables/PlacesService.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"modules/TranslationsModule.html":{},"injectables/TranslationsService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["network",{"_index":1906,"title":{},"body":{"classes/ValidationExceptionDto.html":{},"classes/ValidationMessageDto.html":{}}}],["new",{"_index":183,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CommentsService.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"guards/JwtAuthGuard.html":{},"injectables/LanguagesService.html":{},"modules/MailingModule.html":{},"controllers/PlaceCategoriesController.html":{},"injectables/PlaceCategoriesService.html":{},"classes/PlaceDto.html":{},"controllers/PlaceTypesController.html":{},"injectables/PlaceTypesService.html":{},"controllers/PlacesController.html":{},"injectables/PlacesService.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"classes/SearchPlaceDto.html":{},"injectables/StorageService.html":{},"controllers/TranslationsController.html":{},"injectables/TranslationsService.html":{},"injectables/UserFromTokenPipe.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["newposition",{"_index":709,"title":{},"body":{"injectables/ImagesService.html":{}}}],["node.js",{"_index":1985,"title":{},"body":{"index.html":{}}}],["nodemailer",{"_index":1965,"title":{},"body":{"dependencies.html":{}}}],["non",{"_index":1165,"title":{},"body":{"injectables/PlaceTypesService.html":{}}}],["notfoundexception",{"_index":370,"title":{},"body":{"injectables/CommentsService.html":{},"injectables/ImagesService.html":{},"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{},"controllers/PlaceCategoriesController.html":{},"injectables/PlaceCategoriesService.html":{},"controllers/PlaceTypesController.html":{},"injectables/PlaceTypesService.html":{},"injectables/PlacesService.html":{},"controllers/RolesController.html":{}}}],["notfoundexception('no",{"_index":833,"title":{},"body":{"injectables/LanguagesService.html":{}}}],["notfoundexception})@apiparam({name",{"_index":980,"title":{},"body":{"controllers/PlaceCategoriesController.html":{},"controllers/PlaceTypesController.html":{},"controllers/RolesController.html":{}}}],["npm",{"_index":1996,"title":{},"body":{"index.html":{}}}],["null",{"_index":329,"title":{},"body":{"classes/CommentDto.html":{},"injectables/PayloadFromTokenPipe.html":{},"classes/PlaceCategoryDto.html":{},"classes/PlaceDto.html":{},"classes/PlaceTypeDto.html":{},"controllers/PlacesController.html":{},"injectables/PlacesService.html":{},"classes/SearchPlaceDto.html":{},"miscellaneous/variables.html":{}}}],["nullable",{"_index":962,"title":{},"body":{"entities/Place.html":{},"classes/PlaceCategoryDto.html":{},"classes/PlaceDto.html":{},"classes/PlaceTypeDto.html":{},"entities/Role.html":{},"classes/SearchPlaceDto.html":{}}}],["number",{"_index":24,"title":{},"body":{"entities/Admin.html":{},"entities/Comment.html":{},"classes/CommentDto.html":{},"injectables/CommentsService.html":{},"classes/CreatePlaceCategoryDto.html":{},"classes/CreatePlaceDto.html":{},"classes/CreatePlaceTypeDto.html":{},"classes/CreateTranslationDto.html":{},"entities/Image.html":{},"classes/ImageDto.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"entities/Language.html":{},"classes/LanguageDto.html":{},"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{},"entities/Like.html":{},"entities/Place.html":{},"controllers/PlaceCategoriesController.html":{},"injectables/PlaceCategoriesService.html":{},"entities/PlaceCategory.html":{},"classes/PlaceCategoryDto.html":{},"classes/PlaceDto.html":{},"classes/PlaceSlugDto.html":{},"entities/PlaceType.html":{},"classes/PlaceTypeDto.html":{},"controllers/PlaceTypesController.html":{},"injectables/PlaceTypesService.html":{},"controllers/PlacesController.html":{},"injectables/PlacesService.html":{},"entities/Role.html":{},"classes/RoleDto.html":{},"classes/SearchPlaceDto.html":{},"classes/TokenPayloadDto.html":{},"entities/Translation.html":{},"classes/TranslationDto.html":{},"controllers/TranslationsController.html":{},"injectables/TranslationsService.html":{},"classes/UpdatePlaceDto.html":{},"entities/User.html":{},"classes/UserDto.html":{},"injectables/UsersService.html":{},"classes/ValidationExceptionDto.html":{},"classes/ValidationMessageDto.html":{}}}],["number})@apibody({type",{"_index":1665,"title":{},"body":{"controllers/TranslationsController.html":{}}}],["number})@delete('/:id",{"_index":1659,"title":{},"body":{"controllers/TranslationsController.html":{}}}],["object",{"_index":2061,"title":{},"body":{"miscellaneous/variables.html":{}}}],["object.assign(this",{"_index":323,"title":{},"body":{"classes/CommentDto.html":{},"classes/ImageDto.html":{},"classes/PlaceCategoryDto.html":{},"classes/PlaceDto.html":{},"classes/PlaceTypeDto.html":{},"classes/RoleDto.html":{},"classes/SearchPlaceDto.html":{},"classes/TokenPayloadDto.html":{},"classes/TranslationDto.html":{},"classes/UserDto.html":{}}}],["object.values(error.constraints",{"_index":2071,"title":{},"body":{"miscellaneous/variables.html":{}}}],["occurred",{"_index":1912,"title":{},"body":{"classes/ValidationExceptionDto.html":{},"classes/ValidationMessageDto.html":{}}}],["ok",{"_index":75,"title":{},"body":{"controllers/AppController.html":{},"controllers/LanguagesController.html":{},"controllers/PlaceCategoriesController.html":{},"controllers/PlaceTypesController.html":{},"controllers/PlacesController.html":{},"controllers/RolesController.html":{},"controllers/TranslationsController.html":{},"controllers/UsersController.html":{}}}],["ok'})@apibadrequestresponse({type",{"_index":1193,"title":{},"body":{"controllers/PlacesController.html":{}}}],["ok'})@apiforbiddenresponse({type",{"_index":1217,"title":{},"body":{"controllers/PlacesController.html":{}}}],["ok'})@apiparam({name",{"_index":1206,"title":{},"body":{"controllers/PlacesController.html":{}}}],["ok'})@auth()@post('/confirm",{"_index":1843,"title":{},"body":{"controllers/UsersController.html":{}}}],["ondelete",{"_index":288,"title":{},"body":{"entities/Comment.html":{},"entities/Image.html":{},"entities/Like.html":{}}}],["onetomany",{"_index":39,"title":{},"body":{"entities/Admin.html":{},"entities/Language.html":{},"entities/Place.html":{},"entities/PlaceType.html":{},"entities/User.html":{}}}],["onetomany(undefined",{"_index":30,"title":{},"body":{"entities/Admin.html":{},"entities/Language.html":{},"entities/Place.html":{},"entities/PlaceType.html":{},"entities/User.html":{}}}],["onetoone",{"_index":38,"title":{},"body":{"entities/Admin.html":{},"entities/Image.html":{},"entities/PlaceCategory.html":{},"entities/PlaceType.html":{},"entities/User.html":{}}}],["onetoone(undefined",{"_index":33,"title":{},"body":{"entities/Admin.html":{},"entities/Image.html":{},"entities/PlaceCategory.html":{},"entities/PlaceType.html":{},"entities/User.html":{}}}],["open",{"_index":2015,"title":{},"body":{"index.html":{}}}],["optional",{"_index":149,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthDto.html":{},"injectables/AuthService.html":{},"classes/CommentDto.html":{},"injectables/CommentsService.html":{},"classes/CreatePlaceCategoryDto.html":{},"classes/CreatePlaceDto.html":{},"classes/CreatePlaceTypeDto.html":{},"classes/ImageDto.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"guards/JwtAuthGuard.html":{},"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{},"injectables/MailingService.html":{},"injectables/PayloadFromTokenPipe.html":{},"controllers/PlaceCategoriesController.html":{},"injectables/PlaceCategoriesService.html":{},"classes/PlaceCategoryDto.html":{},"classes/PlaceDto.html":{},"classes/PlaceTypeDto.html":{},"controllers/PlaceTypesController.html":{},"injectables/PlaceTypesService.html":{},"controllers/PlacesController.html":{},"injectables/PlacesService.html":{},"classes/RoleDto.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"classes/SearchPlaceDto.html":{},"injectables/StorageService.html":{},"classes/TokenPayloadDto.html":{},"classes/TranslationDto.html":{},"controllers/TranslationsController.html":{},"injectables/TranslationsService.html":{},"classes/UpdatePlaceDto.html":{},"classes/UserDto.html":{},"injectables/UserFromTokenPipe.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["optionssuccessstatus",{"_index":2065,"title":{},"body":{"miscellaneous/variables.html":{}}}],["orderby",{"_index":1429,"title":{},"body":{"injectables/PlacesService.html":{}}}],["origin",{"_index":1166,"title":{},"body":{"injectables/PlaceTypesService.html":{},"miscellaneous/variables.html":{}}}],["original",{"_index":505,"title":{},"body":{"classes/CreateTranslationDto.html":{},"entities/Translation.html":{},"classes/TranslationDto.html":{},"injectables/TranslationsService.html":{}}}],["originallangid",{"_index":1714,"title":{},"body":{"injectables/TranslationsService.html":{}}}],["originallanguage",{"_index":1745,"title":{},"body":{"injectables/TranslationsService.html":{}}}],["originallanguage.code",{"_index":1755,"title":{},"body":{"injectables/TranslationsService.html":{}}}],["out",{"_index":102,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommentsModule.html":{},"modules/ImagesModule.html":{},"modules/LanguagesModule.html":{},"modules/MailingModule.html":{},"modules/PlaceCategoriesModule.html":{},"modules/PlaceTypesModule.html":{},"modules/PlacesModule.html":{},"modules/RolesModule.html":{},"modules/StorageModule.html":{},"modules/TranslationsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["overview",{"_index":2040,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["owner",{"_index":377,"title":{},"body":{"injectables/CommentsService.html":{},"miscellaneous/enumerations.html":{}}}],["package",{"_index":1950,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":620,"title":{},"body":{"controllers/ImagesController.html":{},"controllers/LanguagesController.html":{},"controllers/PlaceCategoriesController.html":{},"controllers/PlaceTypesController.html":{},"controllers/PlacesController.html":{},"controllers/RolesController.html":{},"controllers/TranslationsController.html":{}}}],["param('commentid",{"_index":1298,"title":{},"body":{"controllers/PlacesController.html":{}}}],["param('id",{"_index":802,"title":{},"body":{"controllers/LanguagesController.html":{},"controllers/PlaceCategoriesController.html":{},"controllers/PlaceTypesController.html":{},"controllers/PlacesController.html":{},"controllers/TranslationsController.html":{}}}],["param('slug",{"_index":1279,"title":{},"body":{"controllers/PlacesController.html":{}}}],["parameters",{"_index":147,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthDto.html":{},"injectables/AuthService.html":{},"classes/CommentDto.html":{},"injectables/CommentsService.html":{},"classes/ImageDto.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"guards/JwtAuthGuard.html":{},"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{},"injectables/MailingService.html":{},"injectables/PayloadFromTokenPipe.html":{},"controllers/PlaceCategoriesController.html":{},"injectables/PlaceCategoriesService.html":{},"classes/PlaceCategoryDto.html":{},"classes/PlaceDto.html":{},"classes/PlaceTypeDto.html":{},"controllers/PlaceTypesController.html":{},"injectables/PlaceTypesService.html":{},"controllers/PlacesController.html":{},"injectables/PlacesService.html":{},"classes/RoleDto.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"classes/SearchPlaceDto.html":{},"injectables/StorageService.html":{},"classes/TokenPayloadDto.html":{},"classes/TranslationDto.html":{},"controllers/TranslationsController.html":{},"injectables/TranslationsService.html":{},"classes/UserDto.html":{},"injectables/UserFromTokenPipe.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["parse",{"_index":1598,"title":{},"body":{"injectables/StorageService.html":{}}}],["parse(uploadedfile.originalname",{"_index":1608,"title":{},"body":{"injectables/StorageService.html":{}}}],["parseint(process.env.port",{"_index":546,"title":{},"body":{"interfaces/IDatabaseConfig.html":{},"interfaces/IGoogleCloudConfig.html":{},"interfaces/IJwtConfig.html":{},"interfaces/IMailerConfig.html":{}}}],["parseintpipe",{"_index":621,"title":{},"body":{"controllers/ImagesController.html":{},"controllers/LanguagesController.html":{},"controllers/PlaceCategoriesController.html":{},"controllers/PlaceTypesController.html":{},"controllers/PlacesController.html":{},"controllers/TranslationsController.html":{}}}],["partial",{"_index":305,"title":{},"body":{"classes/CommentDto.html":{},"classes/ImageDto.html":{},"classes/PlaceCategoryDto.html":{},"classes/PlaceDto.html":{},"classes/PlaceTypeDto.html":{},"classes/RoleDto.html":{},"classes/SearchPlaceDto.html":{},"classes/TokenPayloadDto.html":{},"classes/TranslationDto.html":{},"classes/UserDto.html":{}}}],["partialtype",{"_index":1771,"title":{},"body":{"classes/UpdateLanguageDto.html":{},"classes/UpdatePlaceCategoryDto.html":{},"classes/UpdatePlaceTypeDto.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateTranslationDto.html":{},"classes/UpdateUserDto.html":{}}}],["partialtype(createlanguagedto",{"_index":1772,"title":{},"body":{"classes/UpdateLanguageDto.html":{}}}],["partialtype(createplacecategorydto",{"_index":1774,"title":{},"body":{"classes/UpdatePlaceCategoryDto.html":{}}}],["partialtype(createplacetypedto",{"_index":1789,"title":{},"body":{"classes/UpdatePlaceTypeDto.html":{}}}],["partialtype(createroledto",{"_index":1792,"title":{},"body":{"classes/UpdateRoleDto.html":{}}}],["partialtype(createtranslationdto",{"_index":1794,"title":{},"body":{"classes/UpdateTranslationDto.html":{}}}],["partialtype(createuserdto",{"_index":1797,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["password",{"_index":267,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"interfaces/IDatabaseConfig.html":{},"interfaces/IGoogleCloudConfig.html":{},"interfaces/IJwtConfig.html":{},"interfaces/IMailerConfig.html":{},"classes/LoginDto.html":{},"entities/User.html":{},"classes/UserDto.html":{}}}],["passwordequals",{"_index":262,"title":{},"body":{"injectables/AuthService.html":{}}}],["patch",{"_index":788,"title":{},"body":{"controllers/LanguagesController.html":{}}}],["patch(':id",{"_index":801,"title":{},"body":{"controllers/LanguagesController.html":{},"controllers/PlaceCategoriesController.html":{},"controllers/PlaceTypesController.html":{}}}],["path",{"_index":467,"title":{},"body":{"classes/CreatePlaceDto.html":{},"injectables/MailingService.html":{},"classes/PlaceDto.html":{},"classes/PlaceSlugDto.html":{},"classes/SearchPlaceDto.html":{},"injectables/StorageService.html":{},"classes/UpdatePlaceDto.html":{}}}],["payload",{"_index":268,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["payload.decorator",{"_index":639,"title":{},"body":{"controllers/ImagesController.html":{},"controllers/PlacesController.html":{},"controllers/UsersController.html":{}}}],["payload.decorator.ts",{"_index":1925,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["payload.dto",{"_index":241,"title":{},"body":{"injectables/AuthService.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"guards/JwtAuthGuard.html":{},"injectables/PayloadFromTokenPipe.html":{},"controllers/PlacesController.html":{},"injectables/PlacesService.html":{},"injectables/UserFromTokenPipe.html":{},"controllers/UsersController.html":{}}}],["payload.dto.ts",{"_index":1631,"title":{},"body":{"classes/TokenPayloadDto.html":{},"coverage.html":{}}}],["payload.dto.ts:4",{"_index":1634,"title":{},"body":{"classes/TokenPayloadDto.html":{}}}],["payload.dto.ts:5",{"_index":1633,"title":{},"body":{"classes/TokenPayloadDto.html":{}}}],["payload.dto.ts:6",{"_index":1632,"title":{},"body":{"classes/TokenPayloadDto.html":{}}}],["payloadfromtokenpipe",{"_index":198,"title":{"injectables/PayloadFromTokenPipe.html":{}},"body":{"modules/AuthModule.html":{},"injectables/PayloadFromTokenPipe.html":{},"controllers/PlacesController.html":{},"coverage.html":{},"overview.html":{}}}],["pc.title",{"_index":1034,"title":{},"body":{"injectables/PlaceCategoriesService.html":{}}}],["phone",{"_index":11,"title":{},"body":{"entities/Admin.html":{}}}],["picktype",{"_index":792,"title":{},"body":{"controllers/LanguagesController.html":{},"controllers/PlacesController.html":{},"controllers/TranslationsController.html":{}}}],["picktype(languagedto",{"_index":804,"title":{},"body":{"controllers/LanguagesController.html":{}}}],["picktype(place",{"_index":1267,"title":{},"body":{"controllers/PlacesController.html":{}}}],["picktype(translationdto",{"_index":1678,"title":{},"body":{"controllers/TranslationsController.html":{}}}],["pipes/payload",{"_index":209,"title":{},"body":{"modules/AuthModule.html":{}}}],["pipes/user",{"_index":207,"title":{},"body":{"modules/AuthModule.html":{}}}],["pipetransform",{"_index":917,"title":{},"body":{"injectables/PayloadFromTokenPipe.html":{},"injectables/UserFromTokenPipe.html":{}}}],["pl.user?.id",{"_index":1438,"title":{},"body":{"injectables/PlacesService.html":{}}}],["place",{"_index":29,"title":{"entities/Place.html":{}},"body":{"entities/Admin.html":{},"modules/AppModule.html":{},"entities/Comment.html":{},"injectables/CommentsService.html":{},"classes/CreatePlaceCategoryDto.html":{},"classes/CreatePlaceDto.html":{},"classes/CreatePlaceTypeDto.html":{},"entities/Image.html":{},"entities/Like.html":{},"entities/Place.html":{},"controllers/PlaceCategoriesController.html":{},"modules/PlaceCategoriesModule.html":{},"injectables/PlaceCategoriesService.html":{},"entities/PlaceCategory.html":{},"classes/PlaceCategoryDto.html":{},"classes/PlaceDto.html":{},"classes/PlaceSlugDto.html":{},"entities/PlaceType.html":{},"classes/PlaceTypeDto.html":{},"controllers/PlaceTypesController.html":{},"modules/PlaceTypesModule.html":{},"injectables/PlaceTypesService.html":{},"controllers/PlacesController.html":{},"modules/PlacesModule.html":{},"injectables/PlacesService.html":{},"classes/SearchPlaceDto.html":{},"classes/UpdatePlaceCategoryDto.html":{},"classes/UpdatePlaceDto.html":{},"classes/UpdatePlaceTypeDto.html":{},"entities/User.html":{},"coverage.html":{}}}],["place'})@apiokresponse({description",{"_index":1209,"title":{},"body":{"controllers/PlacesController.html":{}}}],["place'})@apiquery({name",{"_index":1233,"title":{},"body":{"controllers/PlacesController.html":{}}}],["place'})@auth()@put(':id/likes",{"_index":1207,"title":{},"body":{"controllers/PlacesController.html":{}}}],["place'})@useinterceptors(classserializerinterceptor)@auth()@post(':id/comments",{"_index":1214,"title":{},"body":{"controllers/PlacesController.html":{}}}],["place'})@useinterceptors(classserializerinterceptor)@get(':id/comments",{"_index":1228,"title":{},"body":{"controllers/PlacesController.html":{}}}],["place.address",{"_index":1392,"title":{},"body":{"injectables/PlacesService.html":{}}}],["place.admin",{"_index":31,"title":{},"body":{"entities/Admin.html":{}}}],["place.author",{"_index":1398,"title":{},"body":{"injectables/PlacesService.html":{},"entities/User.html":{}}}],["place.categories",{"_index":1045,"title":{},"body":{"entities/PlaceCategory.html":{},"injectables/PlacesService.html":{}}}],["place.comments",{"_index":287,"title":{},"body":{"entities/Comment.html":{}}}],["place.coordinates",{"_index":1394,"title":{},"body":{"injectables/PlacesService.html":{}}}],["place.createdat",{"_index":1433,"title":{},"body":{"injectables/PlacesService.html":{}}}],["place.description",{"_index":1390,"title":{},"body":{"injectables/PlacesService.html":{}}}],["place.dto",{"_index":1255,"title":{},"body":{"controllers/PlacesController.html":{},"injectables/PlacesService.html":{},"classes/UpdatePlaceDto.html":{}}}],["place.dto.ts",{"_index":448,"title":{},"body":{"classes/CreatePlaceDto.html":{},"classes/SearchPlaceDto.html":{},"classes/UpdatePlaceDto.html":{},"coverage.html":{}}}],["place.dto.ts:10",{"_index":1778,"title":{},"body":{"classes/UpdatePlaceDto.html":{}}}],["place.dto.ts:11",{"_index":462,"title":{},"body":{"classes/CreatePlaceDto.html":{}}}],["place.dto.ts:13",{"_index":1560,"title":{},"body":{"classes/SearchPlaceDto.html":{}}}],["place.dto.ts:14",{"_index":455,"title":{},"body":{"classes/CreatePlaceDto.html":{}}}],["place.dto.ts:16",{"_index":1565,"title":{},"body":{"classes/SearchPlaceDto.html":{}}}],["place.dto.ts:17",{"_index":465,"title":{},"body":{"classes/CreatePlaceDto.html":{}}}],["place.dto.ts:22",{"_index":1566,"title":{},"body":{"classes/SearchPlaceDto.html":{}}}],["place.dto.ts:24",{"_index":459,"title":{},"body":{"classes/CreatePlaceDto.html":{}}}],["place.dto.ts:25",{"_index":1559,"title":{},"body":{"classes/SearchPlaceDto.html":{}}}],["place.dto.ts:28",{"_index":1563,"title":{},"body":{"classes/SearchPlaceDto.html":{}}}],["place.dto.ts:31",{"_index":464,"title":{},"body":{"classes/CreatePlaceDto.html":{},"classes/SearchPlaceDto.html":{}}}],["place.dto.ts:34",{"_index":461,"title":{},"body":{"classes/CreatePlaceDto.html":{}}}],["place.dto.ts:37",{"_index":1554,"title":{},"body":{"classes/SearchPlaceDto.html":{}}}],["place.dto.ts:41",{"_index":470,"title":{},"body":{"classes/CreatePlaceDto.html":{}}}],["place.dto.ts:43",{"_index":1567,"title":{},"body":{"classes/SearchPlaceDto.html":{}}}],["place.dto.ts:5",{"_index":468,"title":{},"body":{"classes/CreatePlaceDto.html":{}}}],["place.dto.ts:53",{"_index":1557,"title":{},"body":{"classes/SearchPlaceDto.html":{}}}],["place.dto.ts:61",{"_index":1562,"title":{},"body":{"classes/SearchPlaceDto.html":{}}}],["place.dto.ts:64",{"_index":1558,"title":{},"body":{"classes/SearchPlaceDto.html":{}}}],["place.dto.ts:71",{"_index":1568,"title":{},"body":{"classes/SearchPlaceDto.html":{}}}],["place.dto.ts:77",{"_index":1556,"title":{},"body":{"classes/SearchPlaceDto.html":{}}}],["place.dto.ts:8",{"_index":469,"title":{},"body":{"classes/CreatePlaceDto.html":{}}}],["place.dto.ts:84",{"_index":1555,"title":{},"body":{"classes/SearchPlaceDto.html":{}}}],["place.dto.ts:87",{"_index":1564,"title":{},"body":{"classes/SearchPlaceDto.html":{}}}],["place.dto.ts:93",{"_index":1553,"title":{},"body":{"classes/SearchPlaceDto.html":{}}}],["place.entity",{"_index":845,"title":{},"body":{"entities/Like.html":{}}}],["place.id",{"_index":1407,"title":{},"body":{"injectables/PlacesService.html":{}}}],["place.images",{"_index":577,"title":{},"body":{"entities/Image.html":{},"injectables/PlacesService.html":{}}}],["place.likes",{"_index":841,"title":{},"body":{"entities/Like.html":{}}}],["place.likes.push(savedlike",{"_index":1462,"title":{},"body":{"injectables/PlacesService.html":{}}}],["place.likescount",{"_index":1430,"title":{},"body":{"injectables/PlacesService.html":{}}}],["place.slug",{"_index":1387,"title":{},"body":{"injectables/PlacesService.html":{}}}],["place.title",{"_index":1388,"title":{},"body":{"injectables/PlacesService.html":{}}}],["place.type",{"_index":1112,"title":{},"body":{"entities/PlaceType.html":{},"injectables/PlacesService.html":{}}}],["place.viewscount",{"_index":1432,"title":{},"body":{"injectables/PlacesService.html":{}}}],["place.website",{"_index":1397,"title":{},"body":{"injectables/PlacesService.html":{}}}],["place_image",{"_index":1405,"title":{},"body":{"injectables/PlacesService.html":{}}}],["place_image.place",{"_index":1406,"title":{},"body":{"injectables/PlacesService.html":{}}}],["place_image.position",{"_index":1408,"title":{},"body":{"injectables/PlacesService.html":{}}}],["placecategories",{"_index":966,"title":{},"body":{"controllers/PlaceCategoriesController.html":{},"injectables/PlacesService.html":{}}}],["placecategories.map((pc",{"_index":995,"title":{},"body":{"controllers/PlaceCategoriesController.html":{}}}],["placecategoriescontroller",{"_index":964,"title":{"controllers/PlaceCategoriesController.html":{}},"body":{"controllers/PlaceCategoriesController.html":{},"modules/PlaceCategoriesModule.html":{},"coverage.html":{}}}],["placecategoriesmodule",{"_index":93,"title":{"modules/PlaceCategoriesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PlaceCategoriesModule.html":{},"modules.html":{},"overview.html":{}}}],["placecategoriesrepository",{"_index":1013,"title":{},"body":{"injectables/PlaceCategoriesService.html":{},"injectables/PlacesService.html":{}}}],["placecategoriesservice",{"_index":985,"title":{"injectables/PlaceCategoriesService.html":{}},"body":{"controllers/PlaceCategoriesController.html":{},"modules/PlaceCategoriesModule.html":{},"injectables/PlaceCategoriesService.html":{},"coverage.html":{},"overview.html":{}}}],["placecategory",{"_index":572,"title":{"entities/PlaceCategory.html":{}},"body":{"entities/Image.html":{},"entities/Place.html":{},"controllers/PlaceCategoriesController.html":{},"modules/PlaceCategoriesModule.html":{},"injectables/PlaceCategoriesService.html":{},"entities/PlaceCategory.html":{},"classes/PlaceCategoryDto.html":{},"classes/PlaceDto.html":{},"modules/PlacesModule.html":{},"injectables/PlacesService.html":{},"classes/SearchPlaceDto.html":{},"coverage.html":{}}}],["placecategory.image",{"_index":579,"title":{},"body":{"entities/Image.html":{},"injectables/PlaceCategoriesService.html":{}}}],["placecategory.image.id",{"_index":1025,"title":{},"body":{"injectables/PlaceCategoriesService.html":{}}}],["placecategory.places",{"_index":963,"title":{},"body":{"entities/Place.html":{}}}],["placecategory.places)@jointable",{"_index":936,"title":{},"body":{"entities/Place.html":{}}}],["placecategorydto",{"_index":975,"title":{"classes/PlaceCategoryDto.html":{}},"body":{"controllers/PlaceCategoriesController.html":{},"injectables/PlaceCategoriesService.html":{},"classes/PlaceCategoryDto.html":{},"classes/PlaceDto.html":{},"classes/SearchPlaceDto.html":{},"coverage.html":{}}}],["placecategorydto(category",{"_index":1099,"title":{},"body":{"classes/PlaceDto.html":{},"classes/SearchPlaceDto.html":{}}}],["placecategorydto(pc",{"_index":996,"title":{},"body":{"controllers/PlaceCategoriesController.html":{}}}],["placecategorydto(placecategory",{"_index":998,"title":{},"body":{"controllers/PlaceCategoriesController.html":{},"injectables/PlaceCategoriesService.html":{}}}],["placecategorydto.title",{"_index":1029,"title":{},"body":{"injectables/PlaceCategoriesService.html":{}}}],["placecategorydto})@apinotfoundresponse({type",{"_index":979,"title":{},"body":{"controllers/PlaceCategoriesController.html":{}}}],["placecategorydto})@apiquery({name",{"_index":969,"title":{},"body":{"controllers/PlaceCategoriesController.html":{}}}],["placedto",{"_index":1060,"title":{"classes/PlaceDto.html":{}},"body":{"classes/PlaceDto.html":{},"controllers/PlacesController.html":{},"coverage.html":{}}}],["placedto(place",{"_index":1282,"title":{},"body":{"controllers/PlacesController.html":{}}}],["placedto})@apiparam({name",{"_index":1232,"title":{},"body":{"controllers/PlacesController.html":{}}}],["placeid",{"_index":358,"title":{},"body":{"injectables/CommentsService.html":{},"injectables/PlacesService.html":{}}}],["placeimages",{"_index":1381,"title":{},"body":{"injectables/PlacesService.html":{}}}],["placelikes",{"_index":1348,"title":{},"body":{"injectables/PlacesService.html":{}}}],["placelikes.findindex((pl",{"_index":1437,"title":{},"body":{"injectables/PlacesService.html":{}}}],["places",{"_index":12,"title":{},"body":{"entities/Admin.html":{},"modules/MailingModule.html":{},"entities/PlaceCategory.html":{},"entities/PlaceType.html":{},"controllers/PlacesController.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["places.controller",{"_index":1311,"title":{},"body":{"modules/PlacesModule.html":{}}}],["places.map((p",{"_index":1272,"title":{},"body":{"controllers/PlacesController.html":{}}}],["places.service",{"_index":1251,"title":{},"body":{"controllers/PlacesController.html":{},"modules/PlacesModule.html":{}}}],["places/entities/like.entity",{"_index":1817,"title":{},"body":{"entities/User.html":{}}}],["places/entities/place.entity",{"_index":43,"title":{},"body":{"entities/Admin.html":{},"entities/Comment.html":{},"injectables/CommentsService.html":{},"entities/Image.html":{},"entities/PlaceCategory.html":{},"entities/PlaceType.html":{},"entities/User.html":{}}}],["places/places.module",{"_index":106,"title":{},"body":{"modules/AppModule.html":{}}}],["placescontroller",{"_index":1179,"title":{"controllers/PlacesController.html":{}},"body":{"controllers/PlacesController.html":{},"modules/PlacesModule.html":{},"coverage.html":{}}}],["placeslugdto",{"_index":1103,"title":{"classes/PlaceSlugDto.html":{}},"body":{"classes/PlaceSlugDto.html":{},"controllers/PlacesController.html":{},"coverage.html":{}}}],["placesmodule",{"_index":95,"title":{"modules/PlacesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PlacesModule.html":{},"modules.html":{},"overview.html":{}}}],["placesrepository",{"_index":1328,"title":{},"body":{"injectables/PlacesService.html":{}}}],["placesservice",{"_index":1250,"title":{"injectables/PlacesService.html":{}},"body":{"controllers/PlacesController.html":{},"modules/PlacesModule.html":{},"injectables/PlacesService.html":{},"coverage.html":{},"overview.html":{}}}],["placetype",{"_index":573,"title":{"entities/PlaceType.html":{}},"body":{"entities/Image.html":{},"entities/Place.html":{},"classes/PlaceDto.html":{},"entities/PlaceType.html":{},"classes/PlaceTypeDto.html":{},"controllers/PlaceTypesController.html":{},"modules/PlaceTypesModule.html":{},"injectables/PlaceTypesService.html":{},"modules/PlacesModule.html":{},"injectables/PlacesService.html":{},"classes/SearchPlaceDto.html":{},"coverage.html":{}}}],["placetype.image",{"_index":581,"title":{},"body":{"entities/Image.html":{},"injectables/PlaceTypesService.html":{}}}],["placetype.image.id",{"_index":1170,"title":{},"body":{"injectables/PlaceTypesService.html":{}}}],["placetypedto",{"_index":1086,"title":{"classes/PlaceTypeDto.html":{}},"body":{"classes/PlaceDto.html":{},"classes/PlaceTypeDto.html":{},"controllers/PlaceTypesController.html":{},"injectables/PlaceTypesService.html":{},"classes/SearchPlaceDto.html":{},"coverage.html":{}}}],["placetypedto(placetype",{"_index":1146,"title":{},"body":{"controllers/PlaceTypesController.html":{},"injectables/PlaceTypesService.html":{}}}],["placetypedto(t",{"_index":1144,"title":{},"body":{"controllers/PlaceTypesController.html":{}}}],["placetypedto(value",{"_index":1097,"title":{},"body":{"classes/PlaceDto.html":{},"classes/SearchPlaceDto.html":{}}}],["placetypedto.title",{"_index":1172,"title":{},"body":{"injectables/PlaceTypesService.html":{}}}],["placetypedto})@apibadrequestresponse({description",{"_index":1123,"title":{},"body":{"controllers/PlaceTypesController.html":{}}}],["placetypedto})@apinotfoundresponse({type",{"_index":1131,"title":{},"body":{"controllers/PlaceTypesController.html":{}}}],["placetypeid",{"_index":452,"title":{},"body":{"classes/CreatePlaceDto.html":{},"classes/UpdatePlaceDto.html":{}}}],["placetypes",{"_index":1121,"title":{},"body":{"controllers/PlaceTypesController.html":{},"injectables/PlaceTypesService.html":{}}}],["placetypescontroller",{"_index":1119,"title":{"controllers/PlaceTypesController.html":{}},"body":{"controllers/PlaceTypesController.html":{},"modules/PlaceTypesModule.html":{},"coverage.html":{}}}],["placetypesmodule",{"_index":94,"title":{"modules/PlaceTypesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PlaceTypesModule.html":{},"modules.html":{},"overview.html":{}}}],["placetypesrepository",{"_index":1159,"title":{},"body":{"injectables/PlaceTypesService.html":{},"injectables/PlacesService.html":{}}}],["placetypesservice",{"_index":1134,"title":{"injectables/PlaceTypesService.html":{}},"body":{"controllers/PlaceTypesController.html":{},"modules/PlaceTypesModule.html":{},"injectables/PlaceTypesService.html":{},"coverage.html":{},"overview.html":{}}}],["please",{"_index":2023,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["port",{"_index":545,"title":{},"body":{"interfaces/IDatabaseConfig.html":{},"interfaces/IGoogleCloudConfig.html":{},"interfaces/IJwtConfig.html":{},"interfaces/IMailerConfig.html":{}}}],["position",{"_index":574,"title":{},"body":{"entities/Image.html":{},"classes/ImageDto.html":{},"injectables/ImagesService.html":{},"injectables/PlacesService.html":{}}}],["post",{"_index":159,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ImagesController.html":{},"controllers/LanguagesController.html":{},"controllers/PlaceCategoriesController.html":{},"controllers/PlaceTypesController.html":{},"controllers/PlacesController.html":{},"controllers/RolesController.html":{},"controllers/TranslationsController.html":{},"controllers/UsersController.html":{}}}],["post('/confirm",{"_index":1862,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('/login",{"_index":179,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/register",{"_index":175,"title":{},"body":{"controllers/AuthController.html":{}}}],["post(':id/comments",{"_index":1294,"title":{},"body":{"controllers/PlacesController.html":{}}}],["prefix",{"_index":131,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ImagesController.html":{},"controllers/LanguagesController.html":{},"controllers/PlaceCategoriesController.html":{},"controllers/PlaceTypesController.html":{},"controllers/PlacesController.html":{},"controllers/RolesController.html":{},"controllers/TranslationsController.html":{},"controllers/UsersController.html":{}}}],["preflightcontinue",{"_index":2064,"title":{},"body":{"miscellaneous/variables.html":{}}}],["primarycolumn",{"_index":1048,"title":{},"body":{"entities/PlaceCategory.html":{},"entities/PlaceType.html":{}}}],["primarygeneratedcolumn",{"_index":25,"title":{},"body":{"entities/Admin.html":{},"entities/Comment.html":{},"entities/Image.html":{},"entities/Language.html":{},"entities/Like.html":{},"entities/Place.html":{},"entities/PlaceCategory.html":{},"entities/PlaceType.html":{},"entities/Role.html":{},"entities/Translation.html":{},"entities/User.html":{}}}],["private",{"_index":221,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CommentsService.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"injectables/LanguagesService.html":{},"controllers/PlaceCategoriesController.html":{},"injectables/PlaceCategoriesService.html":{},"injectables/PlaceTypesService.html":{},"controllers/PlacesController.html":{},"injectables/PlacesService.html":{},"injectables/RolesService.html":{},"injectables/StorageService.html":{},"injectables/TranslationsService.html":{},"injectables/UsersService.html":{}}}],["process.cwd",{"_index":870,"title":{},"body":{"modules/MailingModule.html":{}}}],["process.env['database_host",{"_index":558,"title":{},"body":{"interfaces/IDatabaseConfig.html":{},"interfaces/IGoogleCloudConfig.html":{},"interfaces/IJwtConfig.html":{},"interfaces/IMailerConfig.html":{}}}],["process.env['database_name",{"_index":559,"title":{},"body":{"interfaces/IDatabaseConfig.html":{},"interfaces/IGoogleCloudConfig.html":{},"interfaces/IJwtConfig.html":{},"interfaces/IMailerConfig.html":{}}}],["process.env['database_password",{"_index":561,"title":{},"body":{"interfaces/IDatabaseConfig.html":{},"interfaces/IGoogleCloudConfig.html":{},"interfaces/IJwtConfig.html":{},"interfaces/IMailerConfig.html":{}}}],["process.env['database_user",{"_index":560,"title":{},"body":{"interfaces/IDatabaseConfig.html":{},"interfaces/IGoogleCloudConfig.html":{},"interfaces/IJwtConfig.html":{},"interfaces/IMailerConfig.html":{}}}],["process.env['email",{"_index":566,"title":{},"body":{"interfaces/IDatabaseConfig.html":{},"interfaces/IGoogleCloudConfig.html":{},"interfaces/IJwtConfig.html":{},"interfaces/IMailerConfig.html":{}}}],["process.env['email_pw",{"_index":568,"title":{},"body":{"interfaces/IDatabaseConfig.html":{},"interfaces/IGoogleCloudConfig.html":{},"interfaces/IJwtConfig.html":{},"interfaces/IMailerConfig.html":{}}}],["process.env['google_api_key",{"_index":553,"title":{},"body":{"interfaces/IDatabaseConfig.html":{},"interfaces/IGoogleCloudConfig.html":{},"interfaces/IJwtConfig.html":{},"interfaces/IMailerConfig.html":{}}}],["process.env['google_bucket_name",{"_index":555,"title":{},"body":{"interfaces/IDatabaseConfig.html":{},"interfaces/IGoogleCloudConfig.html":{},"interfaces/IJwtConfig.html":{},"interfaces/IMailerConfig.html":{}}}],["process.env['google_cloud_key_name",{"_index":557,"title":{},"body":{"interfaces/IDatabaseConfig.html":{},"interfaces/IGoogleCloudConfig.html":{},"interfaces/IJwtConfig.html":{},"interfaces/IMailerConfig.html":{}}}],["process.env['google_project_id",{"_index":551,"title":{},"body":{"interfaces/IDatabaseConfig.html":{},"interfaces/IGoogleCloudConfig.html":{},"interfaces/IJwtConfig.html":{},"interfaces/IMailerConfig.html":{}}}],["process.env['jwt_expiration",{"_index":564,"title":{},"body":{"interfaces/IDatabaseConfig.html":{},"interfaces/IGoogleCloudConfig.html":{},"interfaces/IJwtConfig.html":{},"interfaces/IMailerConfig.html":{}}}],["process.env['jwt_secret",{"_index":562,"title":{},"body":{"interfaces/IDatabaseConfig.html":{},"interfaces/IGoogleCloudConfig.html":{},"interfaces/IJwtConfig.html":{},"interfaces/IMailerConfig.html":{}}}],["production",{"_index":2005,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":1984,"title":{},"body":{"index.html":{}}}],["project",{"_index":2016,"title":{},"body":{"index.html":{}}}],["projectid",{"_index":550,"title":{},"body":{"interfaces/IDatabaseConfig.html":{},"interfaces/IGoogleCloudConfig.html":{},"interfaces/IJwtConfig.html":{},"interfaces/IMailerConfig.html":{},"injectables/TranslationsService.html":{}}}],["promise",{"_index":609,"title":{},"body":{"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"guards/JwtAuthGuard.html":{},"controllers/LanguagesController.html":{},"controllers/PlaceCategoriesController.html":{},"controllers/PlaceTypesController.html":{},"injectables/PlacesService.html":{},"guards/RolesGuard.html":{},"injectables/StorageService.html":{},"injectables/TranslationsService.html":{}}}],["promise.allsettled",{"_index":1750,"title":{},"body":{"injectables/TranslationsService.html":{}}}],["properties",{"_index":8,"title":{"properties.html":{}},"body":{"entities/Admin.html":{},"classes/AuthDto.html":{},"entities/Comment.html":{},"classes/CommentDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreateFileDto.html":{},"classes/CreateImageDto.html":{},"classes/CreateLanguageDto.html":{},"classes/CreatePlaceCategoryDto.html":{},"classes/CreatePlaceDto.html":{},"classes/CreatePlaceTypeDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateTranslationDto.html":{},"classes/CreateUserDto.html":{},"classes/FileDto.html":{},"interfaces/IDatabaseConfig.html":{},"interfaces/IGoogleCloudConfig.html":{},"interfaces/IJwtConfig.html":{},"interfaces/IMailerConfig.html":{},"entities/Image.html":{},"classes/ImageDto.html":{},"guards/JwtAuthGuard.html":{},"entities/Language.html":{},"classes/LanguageDto.html":{},"entities/Like.html":{},"classes/LoginDto.html":{},"entities/Place.html":{},"entities/PlaceCategory.html":{},"classes/PlaceCategoryDto.html":{},"classes/PlaceDto.html":{},"classes/PlaceSlugDto.html":{},"entities/PlaceType.html":{},"classes/PlaceTypeDto.html":{},"entities/Role.html":{},"classes/RoleDto.html":{},"guards/RolesGuard.html":{},"classes/SearchPlaceDto.html":{},"injectables/StorageService.html":{},"classes/TokenPayloadDto.html":{},"entities/Translation.html":{},"classes/TranslationDto.html":{},"injectables/TranslationsService.html":{},"classes/UpdateCommentDto.html":{},"classes/UpdatePlaceDto.html":{},"entities/User.html":{},"classes/UserDto.html":{},"classes/ValidationExceptionDto.html":{},"classes/ValidationMessageDto.html":{},"properties.html":{}}}],["protected",{"_index":720,"title":{},"body":{"guards/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["provided",{"_index":664,"title":{},"body":{"controllers/ImagesController.html":{},"guards/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["providers",{"_index":83,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommentsModule.html":{},"modules/ImagesModule.html":{},"modules/LanguagesModule.html":{},"modules/MailingModule.html":{},"modules/PlaceCategoriesModule.html":{},"modules/PlaceTypesModule.html":{},"modules/PlacesModule.html":{},"modules/RolesModule.html":{},"modules/StorageModule.html":{},"modules/TranslationsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["pt.title",{"_index":1177,"title":{},"body":{"injectables/PlaceTypesService.html":{}}}],["public",{"_index":1832,"title":{},"body":{"injectables/UserFromTokenPipe.html":{}}}],["publicurl",{"_index":540,"title":{},"body":{"classes/FileDto.html":{},"injectables/StorageService.html":{}}}],["put",{"_index":1249,"title":{},"body":{"controllers/PlacesController.html":{},"controllers/TranslationsController.html":{}}}],["put('/:id",{"_index":1679,"title":{},"body":{"controllers/TranslationsController.html":{}}}],["put(':id",{"_index":1283,"title":{},"body":{"controllers/PlacesController.html":{},"controllers/UsersController.html":{}}}],["put(':id/likes",{"_index":1288,"title":{},"body":{"controllers/PlacesController.html":{}}}],["put('comments/:commentid",{"_index":1297,"title":{},"body":{"controllers/PlacesController.html":{}}}],["put('comments/:commentid/administration",{"_index":1303,"title":{},"body":{"controllers/PlacesController.html":{}}}],["query",{"_index":984,"title":{},"body":{"controllers/PlaceCategoriesController.html":{},"controllers/PlaceTypesController.html":{},"controllers/PlacesController.html":{}}}],["query('lang",{"_index":992,"title":{},"body":{"controllers/PlaceCategoriesController.html":{},"controllers/PlaceTypesController.html":{},"controllers/PlacesController.html":{}}}],["read",{"_index":2024,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":173,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CommentsService.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"guards/JwtAuthGuard.html":{},"controllers/LanguagesController.html":{},"injectables/MailingService.html":{},"injectables/PayloadFromTokenPipe.html":{},"controllers/PlaceCategoriesController.html":{},"controllers/PlaceTypesController.html":{},"controllers/PlacesController.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/StorageService.html":{},"controllers/TranslationsController.html":{},"injectables/TranslationsService.html":{},"injectables/UserFromTokenPipe.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["receivers",{"_index":898,"title":{},"body":{"injectables/MailingService.html":{}}}],["reflect",{"_index":1967,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":1515,"title":{},"body":{"guards/RolesGuard.html":{}}}],["register",{"_index":174,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["register'})@apiokresponse({description",{"_index":138,"title":{},"body":{"controllers/AuthController.html":{}}}],["register(dto",{"_index":232,"title":{},"body":{"injectables/AuthService.html":{}}}],["relations",{"_index":383,"title":{},"body":{"injectables/CommentsService.html":{},"injectables/PlacesService.html":{},"injectables/UsersService.html":{}}}],["remove",{"_index":602,"title":{},"body":{"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{},"injectables/UsersService.html":{}}}],["remove(@param('id",{"_index":675,"title":{},"body":{"controllers/ImagesController.html":{},"controllers/LanguagesController.html":{},"controllers/PlaceCategoriesController.html":{},"controllers/PlaceTypesController.html":{},"controllers/UsersController.html":{}}}],["remove(id",{"_index":613,"title":{},"body":{"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{},"injectables/PlaceCategoriesService.html":{},"injectables/PlaceTypesService.html":{},"injectables/UsersService.html":{}}}],["removefile",{"_index":1576,"title":{},"body":{"injectables/StorageService.html":{}}}],["removefile(filename",{"_index":1582,"title":{},"body":{"injectables/StorageService.html":{}}}],["removes",{"_index":837,"title":{},"body":{"injectables/LanguagesService.html":{},"injectables/PlaceCategoriesService.html":{},"injectables/PlaceTypesService.html":{},"injectables/UsersService.html":{}}}],["replace(/[\\r\\n]/g",{"_index":1612,"title":{},"body":{"injectables/StorageService.html":{}}}],["replace(/^\\.+/g",{"_index":1606,"title":{},"body":{"injectables/StorageService.html":{}}}],["replace(/^\\/+/g",{"_index":1611,"title":{},"body":{"injectables/StorageService.html":{}}}],["replace(/^\\/+|\\/+$/g",{"_index":1607,"title":{},"body":{"injectables/StorageService.html":{}}}],["repository",{"_index":348,"title":{},"body":{"injectables/CommentsService.html":{},"injectables/ImagesService.html":{},"injectables/LanguagesService.html":{},"injectables/PlaceCategoriesService.html":{},"injectables/PlaceTypesService.html":{},"injectables/PlacesService.html":{},"injectables/RolesService.html":{},"injectables/TranslationsService.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["req",{"_index":654,"title":{},"body":{"controllers/ImagesController.html":{},"guards/JwtAuthGuard.html":{},"guards/RolesGuard.html":{},"miscellaneous/variables.html":{}}}],["req.headers.authorization",{"_index":736,"title":{},"body":{"guards/JwtAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["req.tokenpayload",{"_index":741,"title":{},"body":{"guards/JwtAuthGuard.html":{}}}],["req?.tokenpayload",{"_index":1526,"title":{},"body":{"guards/RolesGuard.html":{}}}],["request",{"_index":2089,"title":{},"body":{"miscellaneous/variables.html":{}}}],["request.tokenpayload",{"_index":2090,"title":{},"body":{"miscellaneous/variables.html":{}}}],["requestwithtokenpayload",{"_index":729,"title":{},"body":{"guards/JwtAuthGuard.html":{},"guards/RolesGuard.html":{},"miscellaneous/typealiases.html":{}}}],["required",{"_index":419,"title":{},"body":{"classes/CreateFileDto.html":{},"classes/CreateImageDto.html":{},"classes/CreatePlaceCategoryDto.html":{},"classes/CreatePlaceDto.html":{},"classes/CreatePlaceTypeDto.html":{},"classes/UpdatePlaceDto.html":{}}}],["requiredroles",{"_index":1522,"title":{},"body":{"guards/RolesGuard.html":{}}}],["requiredroles.includes(role?.name",{"_index":1530,"title":{},"body":{"guards/RolesGuard.html":{}}}],["requiredroles?.length",{"_index":1527,"title":{},"body":{"guards/RolesGuard.html":{}}}],["reset",{"_index":101,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommentsModule.html":{},"modules/ImagesModule.html":{},"modules/LanguagesModule.html":{},"modules/MailingModule.html":{},"modules/PlaceCategoriesModule.html":{},"modules/PlaceTypesModule.html":{},"modules/PlacesModule.html":{},"modules/RolesModule.html":{},"modules/StorageModule.html":{},"modules/TranslationsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resolve",{"_index":883,"title":{},"body":{"injectables/MailingService.html":{}}}],["resolve(mail_templates_path",{"_index":893,"title":{},"body":{"injectables/MailingService.html":{},"miscellaneous/variables.html":{}}}],["response",{"_index":140,"title":{},"body":{"controllers/AuthController.html":{},"classes/ValidationExceptionDto.html":{},"classes/ValidationMessageDto.html":{}}}],["result",{"_index":403,"title":{},"body":{"injectables/CommentsService.html":{},"injectables/LanguagesService.html":{},"injectables/TranslationsService.html":{}}}],["result.affected",{"_index":407,"title":{},"body":{"injectables/CommentsService.html":{},"injectables/LanguagesService.html":{},"injectables/TranslationsService.html":{}}}],["result.max",{"_index":1735,"title":{},"body":{"injectables/TranslationsService.html":{}}}],["result?.max",{"_index":1734,"title":{},"body":{"injectables/TranslationsService.html":{}}}],["results",{"_index":48,"title":{},"body":{"entities/Admin.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Comment.html":{},"classes/CommentDto.html":{},"modules/CommentsModule.html":{},"injectables/CommentsService.html":{},"classes/CreateCommentDto.html":{},"classes/CreateFileDto.html":{},"classes/CreateImageDto.html":{},"classes/CreateLanguageDto.html":{},"classes/CreatePlaceCategoryDto.html":{},"classes/CreatePlaceDto.html":{},"classes/CreatePlaceTypeDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateTranslationDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"classes/FileDto.html":{},"interfaces/IDatabaseConfig.html":{},"interfaces/IGoogleCloudConfig.html":{},"interfaces/IJwtConfig.html":{},"interfaces/IMailerConfig.html":{},"entities/Image.html":{},"classes/ImageDto.html":{},"controllers/ImagesController.html":{},"modules/ImagesModule.html":{},"injectables/ImagesService.html":{},"guards/JwtAuthGuard.html":{},"entities/Language.html":{},"classes/LanguageDto.html":{},"controllers/LanguagesController.html":{},"modules/LanguagesModule.html":{},"injectables/LanguagesService.html":{},"entities/Like.html":{},"classes/LoginDto.html":{},"modules/MailingModule.html":{},"injectables/MailingService.html":{},"injectables/PayloadFromTokenPipe.html":{},"entities/Place.html":{},"controllers/PlaceCategoriesController.html":{},"modules/PlaceCategoriesModule.html":{},"injectables/PlaceCategoriesService.html":{},"entities/PlaceCategory.html":{},"classes/PlaceCategoryDto.html":{},"classes/PlaceDto.html":{},"classes/PlaceSlugDto.html":{},"entities/PlaceType.html":{},"classes/PlaceTypeDto.html":{},"controllers/PlaceTypesController.html":{},"modules/PlaceTypesModule.html":{},"injectables/PlaceTypesService.html":{},"controllers/PlacesController.html":{},"modules/PlacesModule.html":{},"injectables/PlacesService.html":{},"entities/Role.html":{},"classes/RoleDto.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/SearchPlaceDto.html":{},"modules/StorageModule.html":{},"injectables/StorageService.html":{},"classes/TokenPayloadDto.html":{},"entities/Translation.html":{},"classes/TranslationDto.html":{},"controllers/TranslationsController.html":{},"modules/TranslationsModule.html":{},"injectables/TranslationsService.html":{},"classes/UpdateCommentDto.html":{},"classes/UpdateLanguageDto.html":{},"classes/UpdatePlaceCategoryDto.html":{},"classes/UpdatePlaceDto.html":{},"classes/UpdatePlaceTypeDto.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateTranslationDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserDto.html":{},"injectables/UserFromTokenPipe.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ValidationExceptionDto.html":{},"classes/ValidationMessageDto.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":74,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CommentDto.html":{},"injectables/CommentsService.html":{},"interfaces/IDatabaseConfig.html":{},"interfaces/IGoogleCloudConfig.html":{},"interfaces/IJwtConfig.html":{},"interfaces/IMailerConfig.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"guards/JwtAuthGuard.html":{},"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{},"injectables/MailingService.html":{},"injectables/PayloadFromTokenPipe.html":{},"controllers/PlaceCategoriesController.html":{},"injectables/PlaceCategoriesService.html":{},"controllers/PlaceTypesController.html":{},"injectables/PlaceTypesService.html":{},"controllers/PlacesController.html":{},"injectables/PlacesService.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"injectables/StorageService.html":{},"controllers/TranslationsController.html":{},"injectables/TranslationsService.html":{},"injectables/UserFromTokenPipe.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":62,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CommentsService.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"guards/JwtAuthGuard.html":{},"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{},"injectables/MailingService.html":{},"injectables/PayloadFromTokenPipe.html":{},"controllers/PlaceCategoriesController.html":{},"injectables/PlaceCategoriesService.html":{},"controllers/PlaceTypesController.html":{},"injectables/PlaceTypesService.html":{},"controllers/PlacesController.html":{},"injectables/PlacesService.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"injectables/StorageService.html":{},"controllers/TranslationsController.html":{},"injectables/TranslationsService.html":{},"injectables/UserFromTokenPipe.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["role",{"_index":44,"title":{"entities/Role.html":{}},"body":{"entities/Admin.html":{},"classes/CreateRoleDto.html":{},"entities/Role.html":{},"classes/RoleDto.html":{},"controllers/RolesController.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/TokenPayloadDto.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["role'})@apiokresponse({description",{"_index":1489,"title":{},"body":{"controllers/RolesController.html":{}}}],["role'})@get(':name",{"_index":1498,"title":{},"body":{"controllers/RolesController.html":{}}}],["role.dto",{"_index":1502,"title":{},"body":{"controllers/RolesController.html":{},"injectables/RolesService.html":{},"classes/UpdateRoleDto.html":{}}}],["role.dto.ts",{"_index":493,"title":{},"body":{"classes/CreateRoleDto.html":{},"classes/UpdateRoleDto.html":{},"coverage.html":{}}}],["role.dto.ts:10",{"_index":497,"title":{},"body":{"classes/CreateRoleDto.html":{}}}],["role.users",{"_index":1818,"title":{},"body":{"entities/User.html":{}}}],["role.users)@jointable",{"_index":1815,"title":{},"body":{"entities/User.html":{}}}],["roledto",{"_index":1480,"title":{"classes/RoleDto.html":{}},"body":{"classes/RoleDto.html":{},"controllers/RolesController.html":{},"classes/UserDto.html":{},"coverage.html":{}}}],["roledto(role",{"_index":1511,"title":{},"body":{"controllers/RolesController.html":{}}}],["roledto})@apibadrequestresponse({description",{"_index":1490,"title":{},"body":{"controllers/RolesController.html":{}}}],["roledto})@apinotfoundresponse({type",{"_index":1497,"title":{},"body":{"controllers/RolesController.html":{}}}],["rolename",{"_index":1546,"title":{},"body":{"injectables/RolesService.html":{}}}],["rolenamesenum",{"_index":494,"title":{},"body":{"classes/CreateRoleDto.html":{},"controllers/ImagesController.html":{},"controllers/PlacesController.html":{},"entities/Role.html":{},"classes/RoleDto.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["rolenamesenum.admin",{"_index":673,"title":{},"body":{"controllers/ImagesController.html":{},"controllers/PlacesController.html":{}}}],["rolenamesenum.admin)@delete(':id",{"_index":617,"title":{},"body":{"controllers/ImagesController.html":{}}}],["rolenamesenum.admin)@delete('comments/:commentid/administration",{"_index":1196,"title":{},"body":{"controllers/PlacesController.html":{}}}],["rolenamesenum.admin)@put('comments/:commentid/administration",{"_index":1201,"title":{},"body":{"controllers/PlacesController.html":{}}}],["rolenamesenum.user",{"_index":500,"title":{},"body":{"classes/CreateRoleDto.html":{},"injectables/UsersService.html":{}}}],["roles",{"_index":271,"title":{},"body":{"injectables/AuthService.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"classes/TokenPayloadDto.html":{},"entities/User.html":{},"classes/UserDto.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["roles.controller",{"_index":1536,"title":{},"body":{"modules/RolesModule.html":{}}}],["roles.service",{"_index":1501,"title":{},"body":{"controllers/RolesController.html":{},"modules/RolesModule.html":{}}}],["roles/dto/role.dto",{"_index":1829,"title":{},"body":{"classes/UserDto.html":{}}}],["roles/entities/role.entity",{"_index":45,"title":{},"body":{"entities/Admin.html":{},"classes/TokenPayloadDto.html":{},"entities/User.html":{}}}],["roles/enums/role",{"_index":641,"title":{},"body":{"controllers/ImagesController.html":{},"controllers/PlacesController.html":{},"injectables/UsersService.html":{}}}],["roles/roles.module",{"_index":120,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["roles/roles.service",{"_index":1891,"title":{},"body":{"injectables/UsersService.html":{}}}],["roles_key",{"_index":1519,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["rolescontroller",{"_index":1485,"title":{"controllers/RolesController.html":{}},"body":{"controllers/RolesController.html":{},"modules/RolesModule.html":{},"coverage.html":{}}}],["rolesguard",{"_index":1512,"title":{"guards/RolesGuard.html":{}},"body":{"guards/RolesGuard.html":{},"coverage.html":{}}}],["rolesmodule",{"_index":96,"title":{"modules/RolesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["rolesrepository",{"_index":1541,"title":{},"body":{"injectables/RolesService.html":{}}}],["rolesservice",{"_index":1500,"title":{"injectables/RolesService.html":{}},"body":{"controllers/RolesController.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["run",{"_index":2000,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":1970,"title":{},"body":{"dependencies.html":{}}}],["sanitizedfilename",{"_index":1623,"title":{},"body":{"injectables/StorageService.html":{}}}],["saved",{"_index":399,"title":{},"body":{"injectables/CommentsService.html":{}}}],["savedimage",{"_index":667,"title":{},"body":{"controllers/ImagesController.html":{}}}],["savedlike",{"_index":1460,"title":{},"body":{"injectables/PlacesService.html":{}}}],["scalable",{"_index":1989,"title":{},"body":{"index.html":{}}}],["scheme",{"_index":2082,"title":{},"body":{"miscellaneous/variables.html":{}}}],["searchplacedto",{"_index":1222,"title":{"classes/SearchPlaceDto.html":{}},"body":{"controllers/PlacesController.html":{},"classes/SearchPlaceDto.html":{},"coverage.html":{}}}],["searchplacedto(p",{"_index":1273,"title":{},"body":{"controllers/PlacesController.html":{}}}],["secret",{"_index":212,"title":{},"body":{"modules/AuthModule.html":{},"interfaces/IDatabaseConfig.html":{},"interfaces/IGoogleCloudConfig.html":{},"interfaces/IJwtConfig.html":{},"interfaces/IMailerConfig.html":{}}}],["select",{"_index":385,"title":{},"body":{"injectables/CommentsService.html":{},"injectables/ImagesService.html":{},"injectables/PlacesService.html":{}}}],["select('max(textid",{"_index":1731,"title":{},"body":{"injectables/TranslationsService.html":{}}}],["select(['place.id",{"_index":1450,"title":{},"body":{"injectables/PlacesService.html":{}}}],["sendemailconfirm",{"_index":874,"title":{},"body":{"injectables/MailingService.html":{}}}],["sendemailconfirm(userdto",{"_index":878,"title":{},"body":{"injectables/MailingService.html":{}}}],["server",{"_index":58,"title":{},"body":{"controllers/AppController.html":{},"index.html":{}}}],["service",{"_index":1594,"title":{},"body":{"injectables/StorageService.html":{},"injectables/TranslationsService.html":{}}}],["set",{"_index":1435,"title":{},"body":{"injectables/PlacesService.html":{},"injectables/UsersService.html":{}}}],["setdescription('the",{"_index":2076,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setdestination",{"_index":1577,"title":{},"body":{"injectables/StorageService.html":{}}}],["setdestination(destination",{"_index":1585,"title":{},"body":{"injectables/StorageService.html":{}}}],["setfilename",{"_index":1578,"title":{},"body":{"injectables/StorageService.html":{}}}],["setfilename(uploadedfile",{"_index":1588,"title":{},"body":{"injectables/StorageService.html":{}}}],["setmetadata(roles_key",{"_index":2072,"title":{},"body":{"miscellaneous/variables.html":{}}}],["settitle('my",{"_index":2074,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setversion('1.0",{"_index":2077,"title":{},"body":{"miscellaneous/variables.html":{}}}],["shared/types",{"_index":730,"title":{},"body":{"guards/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["shared/validation/validation",{"_index":1138,"title":{},"body":{"controllers/PlaceTypesController.html":{}}}],["shouldtranslate",{"_index":1776,"title":{},"body":{"classes/UpdatePlaceDto.html":{}}}],["side",{"_index":1990,"title":{},"body":{"index.html":{}}}],["signoptions",{"_index":214,"title":{},"body":{"modules/AuthModule.html":{}}}],["size",{"_index":659,"title":{},"body":{"controllers/ImagesController.html":{}}}],["slug",{"_index":453,"title":{},"body":{"classes/CreatePlaceDto.html":{},"entities/Place.html":{},"classes/PlaceDto.html":{},"classes/PlaceSlugDto.html":{},"controllers/PlacesController.html":{},"injectables/PlacesService.html":{},"classes/SearchPlaceDto.html":{},"classes/UpdatePlaceDto.html":{}}}],["slug.dto",{"_index":1264,"title":{},"body":{"controllers/PlacesController.html":{}}}],["slug.dto.ts",{"_index":1105,"title":{},"body":{"classes/PlaceSlugDto.html":{},"coverage.html":{}}}],["slug.dto.ts:5",{"_index":1106,"title":{},"body":{"classes/PlaceSlugDto.html":{}}}],["slug.dto.ts:8",{"_index":1107,"title":{},"body":{"classes/PlaceSlugDto.html":{}}}],["slugexists",{"_index":1376,"title":{},"body":{"injectables/PlacesService.html":{}}}],["slugs",{"_index":1274,"title":{},"body":{"controllers/PlacesController.html":{}}}],["slugs'})@apiokresponse({description",{"_index":1236,"title":{},"body":{"controllers/PlacesController.html":{}}}],["smtp.gmail.com",{"_index":864,"title":{},"body":{"modules/MailingModule.html":{}}}],["smtps",{"_index":861,"title":{},"body":{"modules/MailingModule.html":{}}}],["source",{"_index":4,"title":{},"body":{"entities/Admin.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Comment.html":{},"classes/CommentDto.html":{},"modules/CommentsModule.html":{},"injectables/CommentsService.html":{},"classes/CreateCommentDto.html":{},"classes/CreateFileDto.html":{},"classes/CreateImageDto.html":{},"classes/CreateLanguageDto.html":{},"classes/CreatePlaceCategoryDto.html":{},"classes/CreatePlaceDto.html":{},"classes/CreatePlaceTypeDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateTranslationDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"classes/FileDto.html":{},"interfaces/IDatabaseConfig.html":{},"interfaces/IGoogleCloudConfig.html":{},"interfaces/IJwtConfig.html":{},"interfaces/IMailerConfig.html":{},"entities/Image.html":{},"classes/ImageDto.html":{},"controllers/ImagesController.html":{},"modules/ImagesModule.html":{},"injectables/ImagesService.html":{},"guards/JwtAuthGuard.html":{},"entities/Language.html":{},"classes/LanguageDto.html":{},"controllers/LanguagesController.html":{},"modules/LanguagesModule.html":{},"injectables/LanguagesService.html":{},"entities/Like.html":{},"classes/LoginDto.html":{},"modules/MailingModule.html":{},"injectables/MailingService.html":{},"injectables/PayloadFromTokenPipe.html":{},"entities/Place.html":{},"controllers/PlaceCategoriesController.html":{},"modules/PlaceCategoriesModule.html":{},"injectables/PlaceCategoriesService.html":{},"entities/PlaceCategory.html":{},"classes/PlaceCategoryDto.html":{},"classes/PlaceDto.html":{},"classes/PlaceSlugDto.html":{},"entities/PlaceType.html":{},"classes/PlaceTypeDto.html":{},"controllers/PlaceTypesController.html":{},"modules/PlaceTypesModule.html":{},"injectables/PlaceTypesService.html":{},"controllers/PlacesController.html":{},"modules/PlacesModule.html":{},"injectables/PlacesService.html":{},"entities/Role.html":{},"classes/RoleDto.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/SearchPlaceDto.html":{},"modules/StorageModule.html":{},"injectables/StorageService.html":{},"classes/TokenPayloadDto.html":{},"entities/Translation.html":{},"classes/TranslationDto.html":{},"controllers/TranslationsController.html":{},"modules/TranslationsModule.html":{},"injectables/TranslationsService.html":{},"classes/UpdateCommentDto.html":{},"classes/UpdateLanguageDto.html":{},"classes/UpdatePlaceCategoryDto.html":{},"classes/UpdatePlaceDto.html":{},"classes/UpdatePlaceTypeDto.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateTranslationDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserDto.html":{},"injectables/UserFromTokenPipe.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ValidationExceptionDto.html":{},"classes/ValidationMessageDto.html":{},"index.html":{}}}],["sourcelanguage",{"_index":1711,"title":{},"body":{"injectables/TranslationsService.html":{}}}],["sponsors",{"_index":2019,"title":{},"body":{"index.html":{}}}],["src/.../auth.decorator.ts",{"_index":1979,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../cors.config.ts",{"_index":2054,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../exception",{"_index":2055,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../mailing.service.ts",{"_index":2056,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":1980,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../role",{"_index":1975,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../roles.decorator.ts",{"_index":2057,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../swagger.config.ts",{"_index":2058,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../token",{"_index":2060,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../token.decorator.ts",{"_index":2059,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../types.ts",{"_index":2051,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/app.controller.ts",{"_index":53,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:12",{"_index":61,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":103,"title":{},"body":{"modules/AppModule.html":{}}}],["src/auth/auth.controller.ts",{"_index":130,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:32",{"_index":146,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:49",{"_index":157,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":200,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":220,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:12",{"_index":228,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:19",{"_index":233,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:32",{"_index":231,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:37",{"_index":236,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:56",{"_index":230,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/decorators/auth.decorator.ts",{"_index":1922,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/auth/decorators/token",{"_index":1924,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/decorators/token.decorator.ts",{"_index":1927,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/dto/auth.dto.ts",{"_index":186,"title":{},"body":{"classes/AuthDto.html":{},"coverage.html":{}}}],["src/auth/dto/auth.dto.ts:5",{"_index":189,"title":{},"body":{"classes/AuthDto.html":{}}}],["src/auth/dto/login.dto.ts",{"_index":846,"title":{},"body":{"classes/LoginDto.html":{},"coverage.html":{}}}],["src/auth/dto/login.dto.ts:5",{"_index":847,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/auth/dto/login.dto.ts:8",{"_index":848,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/auth/dto/token",{"_index":1630,"title":{},"body":{"classes/TokenPayloadDto.html":{},"coverage.html":{}}}],["src/auth/guards/jwt",{"_index":718,"title":{},"body":{"guards/JwtAuthGuard.html":{},"coverage.html":{}}}],["src/auth/pipes/payload",{"_index":909,"title":{},"body":{"injectables/PayloadFromTokenPipe.html":{},"coverage.html":{}}}],["src/auth/pipes/user",{"_index":1831,"title":{},"body":{"injectables/UserFromTokenPipe.html":{},"coverage.html":{}}}],["src/comments/comments.module.ts",{"_index":335,"title":{},"body":{"modules/CommentsModule.html":{}}}],["src/comments/comments.service.ts",{"_index":340,"title":{},"body":{"injectables/CommentsService.html":{},"coverage.html":{}}}],["src/comments/comments.service.ts:106",{"_index":360,"title":{},"body":{"injectables/CommentsService.html":{}}}],["src/comments/comments.service.ts:15",{"_index":349,"title":{},"body":{"injectables/CommentsService.html":{}}}],["src/comments/comments.service.ts:21",{"_index":353,"title":{},"body":{"injectables/CommentsService.html":{}}}],["src/comments/comments.service.ts:33",{"_index":362,"title":{},"body":{"injectables/CommentsService.html":{}}}],["src/comments/comments.service.ts:57",{"_index":365,"title":{},"body":{"injectables/CommentsService.html":{}}}],["src/comments/comments.service.ts:78",{"_index":357,"title":{},"body":{"injectables/CommentsService.html":{}}}],["src/comments/comments.service.ts:93",{"_index":368,"title":{},"body":{"injectables/CommentsService.html":{}}}],["src/comments/dto/comment.dto.ts",{"_index":300,"title":{},"body":{"classes/CommentDto.html":{},"coverage.html":{}}}],["src/comments/dto/comment.dto.ts:12",{"_index":312,"title":{},"body":{"classes/CommentDto.html":{}}}],["src/comments/dto/comment.dto.ts:16",{"_index":317,"title":{},"body":{"classes/CommentDto.html":{}}}],["src/comments/dto/comment.dto.ts:22",{"_index":319,"title":{},"body":{"classes/CommentDto.html":{}}}],["src/comments/dto/comment.dto.ts:27",{"_index":309,"title":{},"body":{"classes/CommentDto.html":{}}}],["src/comments/dto/comment.dto.ts:30",{"_index":315,"title":{},"body":{"classes/CommentDto.html":{}}}],["src/comments/dto/comment.dto.ts:33",{"_index":313,"title":{},"body":{"classes/CommentDto.html":{}}}],["src/comments/dto/comment.dto.ts:36",{"_index":311,"title":{},"body":{"classes/CommentDto.html":{}}}],["src/comments/dto/comment.dto.ts:6",{"_index":306,"title":{},"body":{"classes/CommentDto.html":{}}}],["src/comments/dto/create",{"_index":409,"title":{},"body":{"classes/CreateCommentDto.html":{},"coverage.html":{}}}],["src/comments/dto/update",{"_index":1768,"title":{},"body":{"classes/UpdateCommentDto.html":{},"coverage.html":{}}}],["src/comments/entities/comment.entity.ts",{"_index":275,"title":{},"body":{"entities/Comment.html":{},"coverage.html":{}}}],["src/comments/entities/comment.entity.ts:11",{"_index":292,"title":{},"body":{"entities/Comment.html":{}}}],["src/comments/entities/comment.entity.ts:14",{"_index":284,"title":{},"body":{"entities/Comment.html":{}}}],["src/comments/entities/comment.entity.ts:17",{"_index":294,"title":{},"body":{"entities/Comment.html":{}}}],["src/comments/entities/comment.entity.ts:20",{"_index":290,"title":{},"body":{"entities/Comment.html":{}}}],["src/comments/entities/comment.entity.ts:23",{"_index":280,"title":{},"body":{"entities/Comment.html":{}}}],["src/comments/entities/comment.entity.ts:8",{"_index":285,"title":{},"body":{"entities/Comment.html":{}}}],["src/config/configuration.ts",{"_index":544,"title":{},"body":{"interfaces/IDatabaseConfig.html":{},"interfaces/IGoogleCloudConfig.html":{},"interfaces/IJwtConfig.html":{},"interfaces/IMailerConfig.html":{},"coverage.html":{}}}],["src/config/cors.config.ts",{"_index":1932,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/swagger.config.ts",{"_index":1934,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/database/database.module.ts",{"_index":522,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["src/entities/admin.entity.ts",{"_index":6,"title":{},"body":{"entities/Admin.html":{},"coverage.html":{}}}],["src/entities/admin.entity.ts:17",{"_index":26,"title":{},"body":{"entities/Admin.html":{}}}],["src/entities/admin.entity.ts:20",{"_index":35,"title":{},"body":{"entities/Admin.html":{}}}],["src/entities/admin.entity.ts:23",{"_index":23,"title":{},"body":{"entities/Admin.html":{}}}],["src/entities/admin.entity.ts:26",{"_index":28,"title":{},"body":{"entities/Admin.html":{}}}],["src/entities/admin.entity.ts:29",{"_index":32,"title":{},"body":{"entities/Admin.html":{}}}],["src/images/dto/create",{"_index":422,"title":{},"body":{"classes/CreateImageDto.html":{},"coverage.html":{}}}],["src/images/dto/image.dto.ts",{"_index":593,"title":{},"body":{"classes/ImageDto.html":{},"coverage.html":{}}}],["src/images/dto/image.dto.ts:12",{"_index":596,"title":{},"body":{"classes/ImageDto.html":{}}}],["src/images/dto/image.dto.ts:15",{"_index":594,"title":{},"body":{"classes/ImageDto.html":{}}}],["src/images/dto/image.dto.ts:6",{"_index":595,"title":{},"body":{"classes/ImageDto.html":{}}}],["src/images/dto/image.dto.ts:9",{"_index":597,"title":{},"body":{"classes/ImageDto.html":{}}}],["src/images/entities/image.entity.ts",{"_index":571,"title":{},"body":{"entities/Image.html":{},"coverage.html":{}}}],["src/images/entities/image.entity.ts:16",{"_index":576,"title":{},"body":{"entities/Image.html":{}}}],["src/images/entities/image.entity.ts:19",{"_index":585,"title":{},"body":{"entities/Image.html":{}}}],["src/images/entities/image.entity.ts:22",{"_index":584,"title":{},"body":{"entities/Image.html":{}}}],["src/images/entities/image.entity.ts:25",{"_index":575,"title":{},"body":{"entities/Image.html":{}}}],["src/images/entities/image.entity.ts:28",{"_index":578,"title":{},"body":{"entities/Image.html":{}}}],["src/images/entities/image.entity.ts:31",{"_index":587,"title":{},"body":{"entities/Image.html":{}}}],["src/images/entities/image.entity.ts:34",{"_index":582,"title":{},"body":{"entities/Image.html":{}}}],["src/images/entities/image.entity.ts:37",{"_index":580,"title":{},"body":{"entities/Image.html":{}}}],["src/images/images.controller.ts",{"_index":600,"title":{},"body":{"controllers/ImagesController.html":{},"coverage.html":{}}}],["src/images/images.controller.ts:62",{"_index":608,"title":{},"body":{"controllers/ImagesController.html":{}}}],["src/images/images.controller.ts:82",{"_index":612,"title":{},"body":{"controllers/ImagesController.html":{}}}],["src/images/images.controller.ts:93",{"_index":618,"title":{},"body":{"controllers/ImagesController.html":{}}}],["src/images/images.module.ts",{"_index":681,"title":{},"body":{"modules/ImagesModule.html":{}}}],["src/images/images.service.ts",{"_index":684,"title":{},"body":{"injectables/ImagesService.html":{},"coverage.html":{}}}],["src/images/images.service.ts:10",{"_index":687,"title":{},"body":{"injectables/ImagesService.html":{}}}],["src/images/images.service.ts:17",{"_index":690,"title":{},"body":{"injectables/ImagesService.html":{}}}],["src/images/images.service.ts:25",{"_index":692,"title":{},"body":{"injectables/ImagesService.html":{}}}],["src/images/images.service.ts:29",{"_index":695,"title":{},"body":{"injectables/ImagesService.html":{}}}],["src/images/images.service.ts:45",{"_index":693,"title":{},"body":{"injectables/ImagesService.html":{}}}],["src/languages/dto/create",{"_index":430,"title":{},"body":{"classes/CreateLanguageDto.html":{},"coverage.html":{}}}],["src/languages/dto/language.dto.ts",{"_index":756,"title":{},"body":{"classes/LanguageDto.html":{},"coverage.html":{}}}],["src/languages/dto/language.dto.ts:6",{"_index":757,"title":{},"body":{"classes/LanguageDto.html":{}}}],["src/languages/dto/update",{"_index":1770,"title":{},"body":{"classes/UpdateLanguageDto.html":{},"coverage.html":{}}}],["src/languages/entities/language.entity.ts",{"_index":746,"title":{},"body":{"entities/Language.html":{},"coverage.html":{}}}],["src/languages/entities/language.entity.ts:10",{"_index":751,"title":{},"body":{"entities/Language.html":{}}}],["src/languages/entities/language.entity.ts:13",{"_index":748,"title":{},"body":{"entities/Language.html":{}}}],["src/languages/entities/language.entity.ts:16",{"_index":753,"title":{},"body":{"entities/Language.html":{}}}],["src/languages/entities/language.entity.ts:7",{"_index":749,"title":{},"body":{"entities/Language.html":{}}}],["src/languages/languages.controller.ts",{"_index":762,"title":{},"body":{"controllers/LanguagesController.html":{},"coverage.html":{}}}],["src/languages/languages.controller.ts:113",{"_index":783,"title":{},"body":{"controllers/LanguagesController.html":{}}}],["src/languages/languages.controller.ts:40",{"_index":771,"title":{},"body":{"controllers/LanguagesController.html":{}}}],["src/languages/languages.controller.ts:53",{"_index":774,"title":{},"body":{"controllers/LanguagesController.html":{}}}],["src/languages/languages.controller.ts:72",{"_index":780,"title":{},"body":{"controllers/LanguagesController.html":{}}}],["src/languages/languages.controller.ts:91",{"_index":787,"title":{},"body":{"controllers/LanguagesController.html":{}}}],["src/languages/languages.module.ts",{"_index":810,"title":{},"body":{"modules/LanguagesModule.html":{}}}],["src/languages/languages.service.ts",{"_index":814,"title":{},"body":{"injectables/LanguagesService.html":{},"coverage.html":{}}}],["src/languages/languages.service.ts:16",{"_index":818,"title":{},"body":{"injectables/LanguagesService.html":{}}}],["src/languages/languages.service.ts:25",{"_index":819,"title":{},"body":{"injectables/LanguagesService.html":{}}}],["src/languages/languages.service.ts:30",{"_index":820,"title":{},"body":{"injectables/LanguagesService.html":{}}}],["src/languages/languages.service.ts:43",{"_index":822,"title":{},"body":{"injectables/LanguagesService.html":{}}}],["src/languages/languages.service.ts:53",{"_index":821,"title":{},"body":{"injectables/LanguagesService.html":{}}}],["src/languages/languages.service.ts:9",{"_index":816,"title":{},"body":{"injectables/LanguagesService.html":{}}}],["src/mailing/mailing.module.ts",{"_index":852,"title":{},"body":{"modules/MailingModule.html":{}}}],["src/mailing/mailing.service.ts",{"_index":873,"title":{},"body":{"injectables/MailingService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/mailing/mailing.service.ts:14",{"_index":877,"title":{},"body":{"injectables/MailingService.html":{}}}],["src/mailing/mailing.service.ts:17",{"_index":880,"title":{},"body":{"injectables/MailingService.html":{}}}],["src/main.ts",{"_index":1936,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/place",{"_index":437,"title":{},"body":{"classes/CreatePlaceCategoryDto.html":{},"classes/CreatePlaceTypeDto.html":{},"controllers/PlaceCategoriesController.html":{},"modules/PlaceCategoriesModule.html":{},"injectables/PlaceCategoriesService.html":{},"entities/PlaceCategory.html":{},"classes/PlaceCategoryDto.html":{},"entities/PlaceType.html":{},"classes/PlaceTypeDto.html":{},"controllers/PlaceTypesController.html":{},"modules/PlaceTypesModule.html":{},"injectables/PlaceTypesService.html":{},"classes/UpdatePlaceCategoryDto.html":{},"classes/UpdatePlaceTypeDto.html":{},"coverage.html":{}}}],["src/places/dto/create",{"_index":447,"title":{},"body":{"classes/CreatePlaceDto.html":{},"coverage.html":{}}}],["src/places/dto/place",{"_index":1104,"title":{},"body":{"classes/PlaceSlugDto.html":{},"coverage.html":{}}}],["src/places/dto/place.dto.ts",{"_index":1061,"title":{},"body":{"classes/PlaceDto.html":{},"coverage.html":{}}}],["src/places/dto/place.dto.ts:102",{"_index":1082,"title":{},"body":{"classes/PlaceDto.html":{}}}],["src/places/dto/place.dto.ts:108",{"_index":1063,"title":{},"body":{"classes/PlaceDto.html":{}}}],["src/places/dto/place.dto.ts:14",{"_index":1074,"title":{},"body":{"classes/PlaceDto.html":{}}}],["src/places/dto/place.dto.ts:17",{"_index":1083,"title":{},"body":{"classes/PlaceDto.html":{}}}],["src/places/dto/place.dto.ts:23",{"_index":1085,"title":{},"body":{"classes/PlaceDto.html":{}}}],["src/places/dto/place.dto.ts:29",{"_index":1073,"title":{},"body":{"classes/PlaceDto.html":{}}}],["src/places/dto/place.dto.ts:35",{"_index":1065,"title":{},"body":{"classes/PlaceDto.html":{}}}],["src/places/dto/place.dto.ts:41",{"_index":1088,"title":{},"body":{"classes/PlaceDto.html":{}}}],["src/places/dto/place.dto.ts:44",{"_index":1081,"title":{},"body":{"classes/PlaceDto.html":{}}}],["src/places/dto/place.dto.ts:47",{"_index":1090,"title":{},"body":{"classes/PlaceDto.html":{}}}],["src/places/dto/place.dto.ts:50",{"_index":1078,"title":{},"body":{"classes/PlaceDto.html":{}}}],["src/places/dto/place.dto.ts:60",{"_index":1069,"title":{},"body":{"classes/PlaceDto.html":{}}}],["src/places/dto/place.dto.ts:63",{"_index":1070,"title":{},"body":{"classes/PlaceDto.html":{}}}],["src/places/dto/place.dto.ts:66",{"_index":1079,"title":{},"body":{"classes/PlaceDto.html":{}}}],["src/places/dto/place.dto.ts:76",{"_index":1076,"title":{},"body":{"classes/PlaceDto.html":{}}}],["src/places/dto/place.dto.ts:79",{"_index":1071,"title":{},"body":{"classes/PlaceDto.html":{}}}],["src/places/dto/place.dto.ts:86",{"_index":1091,"title":{},"body":{"classes/PlaceDto.html":{}}}],["src/places/dto/place.dto.ts:92",{"_index":1068,"title":{},"body":{"classes/PlaceDto.html":{}}}],["src/places/dto/place.dto.ts:99",{"_index":1067,"title":{},"body":{"classes/PlaceDto.html":{}}}],["src/places/dto/search",{"_index":1552,"title":{},"body":{"classes/SearchPlaceDto.html":{},"coverage.html":{}}}],["src/places/dto/update",{"_index":1775,"title":{},"body":{"classes/UpdatePlaceDto.html":{},"coverage.html":{}}}],["src/places/entities/like.entity.ts",{"_index":839,"title":{},"body":{"entities/Like.html":{},"coverage.html":{}}}],["src/places/entities/like.entity.ts:11",{"_index":844,"title":{},"body":{"entities/Like.html":{}}}],["src/places/entities/like.entity.ts:14",{"_index":842,"title":{},"body":{"entities/Like.html":{}}}],["src/places/entities/like.entity.ts:8",{"_index":840,"title":{},"body":{"entities/Like.html":{}}}],["src/places/entities/place.entity.ts",{"_index":918,"title":{},"body":{"entities/Place.html":{},"coverage.html":{}}}],["src/places/entities/place.entity.ts:22",{"_index":942,"title":{},"body":{"entities/Place.html":{}}}],["src/places/entities/place.entity.ts:26",{"_index":951,"title":{},"body":{"entities/Place.html":{}}}],["src/places/entities/place.entity.ts:29",{"_index":952,"title":{},"body":{"entities/Place.html":{}}}],["src/places/entities/place.entity.ts:32",{"_index":941,"title":{},"body":{"entities/Place.html":{}}}],["src/places/entities/place.entity.ts:35",{"_index":944,"title":{},"body":{"entities/Place.html":{}}}],["src/places/entities/place.entity.ts:38",{"_index":938,"title":{},"body":{"entities/Place.html":{}}}],["src/places/entities/place.entity.ts:41",{"_index":927,"title":{},"body":{"entities/Place.html":{}}}],["src/places/entities/place.entity.ts:44",{"_index":956,"title":{},"body":{"entities/Place.html":{}}}],["src/places/entities/place.entity.ts:47",{"_index":954,"title":{},"body":{"entities/Place.html":{}}}],["src/places/entities/place.entity.ts:51",{"_index":937,"title":{},"body":{"entities/Place.html":{}}}],["src/places/entities/place.entity.ts:54",{"_index":939,"title":{},"body":{"entities/Place.html":{}}}],["src/places/entities/place.entity.ts:57",{"_index":932,"title":{},"body":{"entities/Place.html":{}}}],["src/places/entities/place.entity.ts:60",{"_index":931,"title":{},"body":{"entities/Place.html":{}}}],["src/places/entities/place.entity.ts:63",{"_index":934,"title":{},"body":{"entities/Place.html":{}}}],["src/places/entities/place.entity.ts:66",{"_index":929,"title":{},"body":{"entities/Place.html":{}}}],["src/places/entities/place.entity.ts:69",{"_index":947,"title":{},"body":{"entities/Place.html":{}}}],["src/places/entities/place.entity.ts:72",{"_index":955,"title":{},"body":{"entities/Place.html":{}}}],["src/places/entities/place.entity.ts:75",{"_index":946,"title":{},"body":{"entities/Place.html":{}}}],["src/places/entities/place.entity.ts:78",{"_index":948,"title":{},"body":{"entities/Place.html":{}}}],["src/places/entities/place.entity.ts:81",{"_index":940,"title":{},"body":{"entities/Place.html":{}}}],["src/places/places.controller.ts",{"_index":1180,"title":{},"body":{"controllers/PlacesController.html":{},"coverage.html":{}}}],["src/places/places.controller.ts:104",{"_index":1238,"title":{},"body":{"controllers/PlacesController.html":{}}}],["src/places/places.controller.ts:127",{"_index":1235,"title":{},"body":{"controllers/PlacesController.html":{}}}],["src/places/places.controller.ts:160",{"_index":1242,"title":{},"body":{"controllers/PlacesController.html":{}}}],["src/places/places.controller.ts:188",{"_index":1208,"title":{},"body":{"controllers/PlacesController.html":{}}}],["src/places/places.controller.ts:209",{"_index":1229,"title":{},"body":{"controllers/PlacesController.html":{}}}],["src/places/places.controller.ts:233",{"_index":1215,"title":{},"body":{"controllers/PlacesController.html":{}}}],["src/places/places.controller.ts:262",{"_index":1247,"title":{},"body":{"controllers/PlacesController.html":{}}}],["src/places/places.controller.ts:293",{"_index":1202,"title":{},"body":{"controllers/PlacesController.html":{}}}],["src/places/places.controller.ts:321",{"_index":1220,"title":{},"body":{"controllers/PlacesController.html":{}}}],["src/places/places.controller.ts:349",{"_index":1197,"title":{},"body":{"controllers/PlacesController.html":{}}}],["src/places/places.controller.ts:71",{"_index":1212,"title":{},"body":{"controllers/PlacesController.html":{}}}],["src/places/places.controller.ts:92",{"_index":1223,"title":{},"body":{"controllers/PlacesController.html":{}}}],["src/places/places.module.ts",{"_index":1310,"title":{},"body":{"modules/PlacesModule.html":{}}}],["src/places/places.service.ts",{"_index":1313,"title":{},"body":{"injectables/PlacesService.html":{},"coverage.html":{}}}],["src/places/places.service.ts:106",{"_index":1356,"title":{},"body":{"injectables/PlacesService.html":{}}}],["src/places/places.service.ts:114",{"_index":1337,"title":{},"body":{"injectables/PlacesService.html":{}}}],["src/places/places.service.ts:145",{"_index":1342,"title":{},"body":{"injectables/PlacesService.html":{}}}],["src/places/places.service.ts:205",{"_index":1330,"title":{},"body":{"injectables/PlacesService.html":{}}}],["src/places/places.service.ts:21",{"_index":1327,"title":{},"body":{"injectables/PlacesService.html":{}}}],["src/places/places.service.ts:214",{"_index":1347,"title":{},"body":{"injectables/PlacesService.html":{}}}],["src/places/places.service.ts:218",{"_index":1334,"title":{},"body":{"injectables/PlacesService.html":{}}}],["src/places/places.service.ts:226",{"_index":1344,"title":{},"body":{"injectables/PlacesService.html":{}}}],["src/places/places.service.ts:298",{"_index":1336,"title":{},"body":{"injectables/PlacesService.html":{}}}],["src/places/places.service.ts:309",{"_index":1345,"title":{},"body":{"injectables/PlacesService.html":{}}}],["src/places/places.service.ts:316",{"_index":1338,"title":{},"body":{"injectables/PlacesService.html":{}}}],["src/places/places.service.ts:323",{"_index":1332,"title":{},"body":{"injectables/PlacesService.html":{}}}],["src/places/places.service.ts:35",{"_index":1341,"title":{},"body":{"injectables/PlacesService.html":{}}}],["src/places/places.service.ts:371",{"_index":1350,"title":{},"body":{"injectables/PlacesService.html":{}}}],["src/places/places.service.ts:86",{"_index":1354,"title":{},"body":{"injectables/PlacesService.html":{}}}],["src/places/places.service.ts:99",{"_index":1352,"title":{},"body":{"injectables/PlacesService.html":{}}}],["src/roles/decorators/roles.decorator.ts",{"_index":1943,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/roles/dto/create",{"_index":492,"title":{},"body":{"classes/CreateRoleDto.html":{},"coverage.html":{}}}],["src/roles/dto/role.dto.ts",{"_index":1481,"title":{},"body":{"classes/RoleDto.html":{},"coverage.html":{}}}],["src/roles/dto/role.dto.ts:10",{"_index":1482,"title":{},"body":{"classes/RoleDto.html":{}}}],["src/roles/dto/role.dto.ts:7",{"_index":1483,"title":{},"body":{"classes/RoleDto.html":{}}}],["src/roles/dto/update",{"_index":1791,"title":{},"body":{"classes/UpdateRoleDto.html":{},"coverage.html":{}}}],["src/roles/entities/role.entity.ts",{"_index":1476,"title":{},"body":{"entities/Role.html":{},"coverage.html":{}}}],["src/roles/entities/role.entity.ts:16",{"_index":1478,"title":{},"body":{"entities/Role.html":{}}}],["src/roles/entities/role.entity.ts:19",{"_index":1479,"title":{},"body":{"entities/Role.html":{}}}],["src/roles/entities/role.entity.ts:8",{"_index":1477,"title":{},"body":{"entities/Role.html":{}}}],["src/roles/enums/role",{"_index":1977,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/roles/guards/rolesguard.ts",{"_index":1513,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{}}}],["src/roles/guards/rolesguard.ts:14",{"_index":1516,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/roles/guards/rolesguard.ts:19",{"_index":1517,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/roles/roles.controller.ts",{"_index":1486,"title":{},"body":{"controllers/RolesController.html":{},"coverage.html":{}}}],["src/roles/roles.controller.ts:38",{"_index":1493,"title":{},"body":{"controllers/RolesController.html":{}}}],["src/roles/roles.controller.ts:43",{"_index":1494,"title":{},"body":{"controllers/RolesController.html":{}}}],["src/roles/roles.controller.ts:61",{"_index":1499,"title":{},"body":{"controllers/RolesController.html":{}}}],["src/roles/roles.module.ts",{"_index":1535,"title":{},"body":{"modules/RolesModule.html":{}}}],["src/roles/roles.service.ts",{"_index":1538,"title":{},"body":{"injectables/RolesService.html":{},"coverage.html":{}}}],["src/roles/roles.service.ts:15",{"_index":1542,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/roles/roles.service.ts:24",{"_index":1543,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/roles/roles.service.ts:28",{"_index":1545,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/roles/roles.service.ts:9",{"_index":1540,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/shared/types.ts",{"_index":2052,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/shared/validation/exception",{"_index":1944,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/shared/validation/validation",{"_index":1903,"title":{},"body":{"classes/ValidationExceptionDto.html":{},"classes/ValidationMessageDto.html":{},"coverage.html":{}}}],["src/storage/dto/create",{"_index":413,"title":{},"body":{"classes/CreateFileDto.html":{},"coverage.html":{}}}],["src/storage/dto/file.dto.ts",{"_index":539,"title":{},"body":{"classes/FileDto.html":{},"coverage.html":{}}}],["src/storage/dto/file.dto.ts:5",{"_index":541,"title":{},"body":{"classes/FileDto.html":{}}}],["src/storage/storage.module.ts",{"_index":1572,"title":{},"body":{"modules/StorageModule.html":{}}}],["src/storage/storage.service.ts",{"_index":1574,"title":{},"body":{"injectables/StorageService.html":{},"coverage.html":{}}}],["src/storage/storage.service.ts:10",{"_index":1592,"title":{},"body":{"injectables/StorageService.html":{}}}],["src/storage/storage.service.ts:11",{"_index":1595,"title":{},"body":{"injectables/StorageService.html":{}}}],["src/storage/storage.service.ts:12",{"_index":1581,"title":{},"body":{"injectables/StorageService.html":{}}}],["src/storage/storage.service.ts:25",{"_index":1586,"title":{},"body":{"injectables/StorageService.html":{}}}],["src/storage/storage.service.ts:34",{"_index":1589,"title":{},"body":{"injectables/StorageService.html":{}}}],["src/storage/storage.service.ts:42",{"_index":1591,"title":{},"body":{"injectables/StorageService.html":{}}}],["src/storage/storage.service.ts:65",{"_index":1583,"title":{},"body":{"injectables/StorageService.html":{}}}],["src/translations/dto/create",{"_index":502,"title":{},"body":{"classes/CreateTranslationDto.html":{},"coverage.html":{}}}],["src/translations/dto/translation.dto.ts",{"_index":1644,"title":{},"body":{"classes/TranslationDto.html":{},"coverage.html":{}}}],["src/translations/dto/translation.dto.ts:12",{"_index":1648,"title":{},"body":{"classes/TranslationDto.html":{}}}],["src/translations/dto/translation.dto.ts:18",{"_index":1647,"title":{},"body":{"classes/TranslationDto.html":{}}}],["src/translations/dto/translation.dto.ts:21",{"_index":1645,"title":{},"body":{"classes/TranslationDto.html":{}}}],["src/translations/dto/translation.dto.ts:6",{"_index":1646,"title":{},"body":{"classes/TranslationDto.html":{}}}],["src/translations/dto/translation.dto.ts:9",{"_index":1649,"title":{},"body":{"classes/TranslationDto.html":{}}}],["src/translations/dto/update",{"_index":1793,"title":{},"body":{"classes/UpdateTranslationDto.html":{},"coverage.html":{}}}],["src/translations/entities/translation.entity.ts",{"_index":1635,"title":{},"body":{"entities/Translation.html":{},"coverage.html":{}}}],["src/translations/entities/translation.entity.ts:13",{"_index":1636,"title":{},"body":{"entities/Translation.html":{}}}],["src/translations/entities/translation.entity.ts:17",{"_index":1642,"title":{},"body":{"entities/Translation.html":{}}}],["src/translations/entities/translation.entity.ts:20",{"_index":1638,"title":{},"body":{"entities/Translation.html":{}}}],["src/translations/entities/translation.entity.ts:23",{"_index":1640,"title":{},"body":{"entities/Translation.html":{}}}],["src/translations/entities/translation.entity.ts:26",{"_index":1639,"title":{},"body":{"entities/Translation.html":{}}}],["src/translations/translations.controller.ts",{"_index":1652,"title":{},"body":{"controllers/TranslationsController.html":{},"coverage.html":{}}}],["src/translations/translations.controller.ts:41",{"_index":1657,"title":{},"body":{"controllers/TranslationsController.html":{}}}],["src/translations/translations.controller.ts:65",{"_index":1667,"title":{},"body":{"controllers/TranslationsController.html":{}}}],["src/translations/translations.controller.ts:79",{"_index":1663,"title":{},"body":{"controllers/TranslationsController.html":{}}}],["src/translations/translations.controller.ts:95",{"_index":1660,"title":{},"body":{"controllers/TranslationsController.html":{}}}],["src/translations/translations.module.ts",{"_index":1691,"title":{},"body":{"modules/TranslationsModule.html":{}}}],["src/translations/translations.service.ts",{"_index":1694,"title":{},"body":{"injectables/TranslationsService.html":{},"coverage.html":{}}}],["src/translations/translations.service.ts:112",{"_index":1706,"title":{},"body":{"injectables/TranslationsService.html":{}}}],["src/translations/translations.service.ts:118",{"_index":1707,"title":{},"body":{"injectables/TranslationsService.html":{}}}],["src/translations/translations.service.ts:125",{"_index":1716,"title":{},"body":{"injectables/TranslationsService.html":{}}}],["src/translations/translations.service.ts:14",{"_index":1701,"title":{},"body":{"injectables/TranslationsService.html":{}}}],["src/translations/translations.service.ts:31",{"_index":1719,"title":{},"body":{"injectables/TranslationsService.html":{}}}],["src/translations/translations.service.ts:34",{"_index":1708,"title":{},"body":{"injectables/TranslationsService.html":{}}}],["src/translations/translations.service.ts:44",{"_index":1704,"title":{},"body":{"injectables/TranslationsService.html":{}}}],["src/translations/translations.service.ts:67",{"_index":1712,"title":{},"body":{"injectables/TranslationsService.html":{}}}],["src/translations/translations.service.ts:85",{"_index":1715,"title":{},"body":{"injectables/TranslationsService.html":{}}}],["src/users/dto/create",{"_index":511,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dto/update",{"_index":1796,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/users/dto/user.dto.ts",{"_index":1819,"title":{},"body":{"classes/UserDto.html":{},"coverage.html":{}}}],["src/users/dto/user.dto.ts:12",{"_index":1824,"title":{},"body":{"classes/UserDto.html":{}}}],["src/users/dto/user.dto.ts:15",{"_index":1827,"title":{},"body":{"classes/UserDto.html":{}}}],["src/users/dto/user.dto.ts:18",{"_index":1823,"title":{},"body":{"classes/UserDto.html":{}}}],["src/users/dto/user.dto.ts:21",{"_index":1826,"title":{},"body":{"classes/UserDto.html":{}}}],["src/users/dto/user.dto.ts:24",{"_index":1828,"title":{},"body":{"classes/UserDto.html":{}}}],["src/users/dto/user.dto.ts:27",{"_index":1822,"title":{},"body":{"classes/UserDto.html":{}}}],["src/users/dto/user.dto.ts:30",{"_index":1821,"title":{},"body":{"classes/UserDto.html":{}}}],["src/users/dto/user.dto.ts:33",{"_index":1820,"title":{},"body":{"classes/UserDto.html":{}}}],["src/users/dto/user.dto.ts:9",{"_index":1825,"title":{},"body":{"classes/UserDto.html":{}}}],["src/users/entities/user.entity.ts",{"_index":1798,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/users/entities/user.entity.ts:22",{"_index":1808,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:25",{"_index":1807,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:28",{"_index":1811,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:31",{"_index":1806,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:34",{"_index":1810,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:37",{"_index":1813,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:40",{"_index":1804,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:43",{"_index":1814,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:47",{"_index":1802,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:51",{"_index":1816,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:54",{"_index":1812,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:57",{"_index":1809,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:60",{"_index":1803,"title":{},"body":{"entities/User.html":{}}}],["src/users/users.controller.ts",{"_index":1838,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:31",{"_index":1847,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:44",{"_index":1851,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:54",{"_index":1844,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module.ts",{"_index":1872,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.service.ts",{"_index":1875,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/users.service.ts:11",{"_index":1879,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:18",{"_index":1883,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:29",{"_index":1882,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:39",{"_index":1888,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:50",{"_index":1884,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:54",{"_index":1886,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:66",{"_index":1890,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:70",{"_index":1889,"title":{},"body":{"injectables/UsersService.html":{}}}],["start",{"_index":2001,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":2004,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":2006,"title":{},"body":{"index.html":{}}}],["started",{"_index":1983,"title":{"index.html":{}},"body":{}}],["starter",{"_index":1994,"title":{},"body":{"index.html":{}}}],["statements",{"_index":1918,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":70,"title":{},"body":{"controllers/AppController.html":{},"classes/ValidationExceptionDto.html":{},"classes/ValidationMessageDto.html":{}}}],["status'})@apiokresponse({description",{"_index":59,"title":{},"body":{"controllers/AppController.html":{}}}],["statuscode",{"_index":1905,"title":{},"body":{"classes/ValidationExceptionDto.html":{},"classes/ValidationMessageDto.html":{}}}],["stay",{"_index":2027,"title":{},"body":{"index.html":{}}}],["storage",{"_index":647,"title":{},"body":{"controllers/ImagesController.html":{},"injectables/StorageService.html":{}}}],["storage.service",{"_index":1573,"title":{},"body":{"modules/StorageModule.html":{}}}],["storage/dto/create",{"_index":427,"title":{},"body":{"classes/CreateImageDto.html":{}}}],["storage/storage.module",{"_index":116,"title":{},"body":{"modules/AppModule.html":{},"modules/ImagesModule.html":{}}}],["storage/storage.service",{"_index":635,"title":{},"body":{"controllers/ImagesController.html":{},"injectables/ImagesService.html":{}}}],["storagemodule",{"_index":97,"title":{"modules/StorageModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ImagesModule.html":{},"modules/StorageModule.html":{},"modules.html":{},"overview.html":{}}}],["storageservice",{"_index":634,"title":{"injectables/StorageService.html":{}},"body":{"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"modules/StorageModule.html":{},"injectables/StorageService.html":{},"coverage.html":{},"overview.html":{}}}],["string",{"_index":16,"title":{},"body":{"entities/Admin.html":{},"controllers/AppController.html":{},"classes/AuthDto.html":{},"entities/Comment.html":{},"classes/CommentDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreateFileDto.html":{},"classes/CreateImageDto.html":{},"classes/CreateLanguageDto.html":{},"classes/CreatePlaceCategoryDto.html":{},"classes/CreatePlaceDto.html":{},"classes/CreatePlaceTypeDto.html":{},"classes/CreateTranslationDto.html":{},"classes/CreateUserDto.html":{},"classes/FileDto.html":{},"interfaces/IDatabaseConfig.html":{},"interfaces/IGoogleCloudConfig.html":{},"interfaces/IJwtConfig.html":{},"interfaces/IMailerConfig.html":{},"entities/Image.html":{},"classes/ImageDto.html":{},"injectables/ImagesService.html":{},"entities/Language.html":{},"classes/LanguageDto.html":{},"classes/LoginDto.html":{},"injectables/MailingService.html":{},"injectables/PayloadFromTokenPipe.html":{},"entities/Place.html":{},"controllers/PlaceCategoriesController.html":{},"classes/PlaceCategoryDto.html":{},"classes/PlaceDto.html":{},"classes/PlaceSlugDto.html":{},"classes/PlaceTypeDto.html":{},"controllers/PlacesController.html":{},"injectables/PlacesService.html":{},"injectables/RolesService.html":{},"classes/SearchPlaceDto.html":{},"injectables/StorageService.html":{},"classes/TokenPayloadDto.html":{},"entities/Translation.html":{},"classes/TranslationDto.html":{},"injectables/TranslationsService.html":{},"classes/UpdateCommentDto.html":{},"classes/UpdatePlaceDto.html":{},"entities/User.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/ValidationExceptionDto.html":{},"classes/ValidationMessageDto.html":{},"miscellaneous/variables.html":{}}}],["string})@isstring()@maxlength(100",{"_index":480,"title":{},"body":{"classes/CreatePlaceTypeDto.html":{}}}],["string})@transform",{"_index":1054,"title":{},"body":{"classes/PlaceCategoryDto.html":{},"classes/PlaceTypeDto.html":{}}}],["subject",{"_index":899,"title":{},"body":{"injectables/MailingService.html":{}}}],["summary",{"_index":69,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ImagesController.html":{},"controllers/LanguagesController.html":{},"controllers/PlaceCategoriesController.html":{},"controllers/PlaceTypesController.html":{},"controllers/PlacesController.html":{},"controllers/RolesController.html":{},"controllers/TranslationsController.html":{},"controllers/UsersController.html":{}}}],["support",{"_index":866,"title":{},"body":{"modules/MailingModule.html":{},"index.html":{},"modules.html":{}}}],["svg",{"_index":2036,"title":{},"body":{"modules.html":{}}}],["swaggerconfig",{"_index":1935,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["synchronize",{"_index":534,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["t",{"_index":1035,"title":{},"body":{"injectables/PlaceCategoriesService.html":{},"injectables/PlaceTypesService.html":{}}}],["t.language",{"_index":1037,"title":{},"body":{"injectables/PlaceCategoriesService.html":{},"injectables/PlaceTypesService.html":{}}}],["t.textid",{"_index":1036,"title":{},"body":{"injectables/PlaceCategoriesService.html":{},"injectables/PlaceTypesService.html":{}}}],["table",{"_index":1949,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1948,"title":{},"body":{"coverage.html":{}}}],["targetlanguage",{"_index":1710,"title":{},"body":{"injectables/TranslationsService.html":{}}}],["template",{"_index":868,"title":{},"body":{"modules/MailingModule.html":{},"injectables/MailingService.html":{}}}],["templatepath",{"_index":892,"title":{},"body":{"injectables/MailingService.html":{},"miscellaneous/variables.html":{}}}],["templatepath.split",{"_index":894,"title":{},"body":{"injectables/MailingService.html":{},"miscellaneous/variables.html":{}}}],["templates",{"_index":871,"title":{},"body":{"modules/MailingModule.html":{},"injectables/MailingService.html":{},"miscellaneous/variables.html":{}}}],["test",{"_index":2009,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":2012,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":2011,"title":{},"body":{"index.html":{}}}],["tests",{"_index":2008,"title":{},"body":{"index.html":{}}}],["text",{"_index":278,"title":{},"body":{"entities/Comment.html":{},"classes/CommentDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreateTranslationDto.html":{},"injectables/PlacesService.html":{},"entities/Translation.html":{},"classes/TranslationDto.html":{},"injectables/TranslationsService.html":{},"classes/UpdateCommentDto.html":{}}}],["textid",{"_index":506,"title":{},"body":{"classes/CreateTranslationDto.html":{},"entities/Translation.html":{},"classes/TranslationDto.html":{},"injectables/TranslationsService.html":{}}}],["texttranslation",{"_index":1739,"title":{},"body":{"injectables/TranslationsService.html":{}}}],["thanks",{"_index":2018,"title":{},"body":{"index.html":{}}}],["this.addview(place.id",{"_index":1448,"title":{},"body":{"injectables/PlacesService.html":{}}}],["this.authservice.login(logindto",{"_index":182,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.register(createuserdto",{"_index":178,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.bucket",{"_index":1602,"title":{},"body":{"injectables/StorageService.html":{}}}],["this.bucket.file(filename",{"_index":1616,"title":{},"body":{"injectables/StorageService.html":{}}}],["this.bucket.file(sanitizedfilename",{"_index":1626,"title":{},"body":{"injectables/StorageService.html":{}}}],["this.checkexist(placeid",{"_index":1464,"title":{},"body":{"injectables/PlacesService.html":{}}}],["this.commentsrepository.delete",{"_index":404,"title":{},"body":{"injectables/CommentsService.html":{}}}],["this.commentsrepository.exist",{"_index":378,"title":{},"body":{"injectables/CommentsService.html":{}}}],["this.commentsrepository.find",{"_index":382,"title":{},"body":{"injectables/CommentsService.html":{}}}],["this.commentsrepository.findone",{"_index":392,"title":{},"body":{"injectables/CommentsService.html":{}}}],["this.commentsrepository.save(comment",{"_index":400,"title":{},"body":{"injectables/CommentsService.html":{}}}],["this.commentsservice.checkcanmanage",{"_index":1300,"title":{},"body":{"controllers/PlacesController.html":{}}}],["this.commentsservice.createplacecomment",{"_index":1295,"title":{},"body":{"controllers/PlacesController.html":{}}}],["this.commentsservice.deletecomment(commentid",{"_index":1305,"title":{},"body":{"controllers/PlacesController.html":{}}}],["this.commentsservice.findallplacecomments",{"_index":1291,"title":{},"body":{"controllers/PlacesController.html":{}}}],["this.commentsservice.updateplacecomment",{"_index":1302,"title":{},"body":{"controllers/PlacesController.html":{}}}],["this.configservice.get('googlecloud')?.apikey",{"_index":1726,"title":{},"body":{"injectables/TranslationsService.html":{}}}],["this.configservice.get('googlecloud')?.bucketname",{"_index":1604,"title":{},"body":{"injectables/StorageService.html":{}}}],["this.configservice.get('googlecloud')?.keyfilename",{"_index":1601,"title":{},"body":{"injectables/StorageService.html":{}}}],["this.configservice.get('googlecloud')?.projectid",{"_index":1727,"title":{},"body":{"injectables/TranslationsService.html":{}}}],["this.createlike",{"_index":1457,"title":{},"body":{"injectables/PlacesService.html":{}}}],["this.createtranslations",{"_index":1469,"title":{},"body":{"injectables/PlacesService.html":{}}}],["this.createtranslations(langid",{"_index":1385,"title":{},"body":{"injectables/PlacesService.html":{}}}],["this.findoneplacecomment(saved.id",{"_index":401,"title":{},"body":{"injectables/CommentsService.html":{}}}],["this.generatetoken(user",{"_index":257,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.generatetoken(users",{"_index":255,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.getmaxtextid",{"_index":1738,"title":{},"body":{"injectables/TranslationsService.html":{}}}],["this.imagesrepository.create",{"_index":698,"title":{},"body":{"injectables/ImagesService.html":{}}}],["this.imagesrepository.delete",{"_index":714,"title":{},"body":{"injectables/ImagesService.html":{}}}],["this.imagesrepository.find",{"_index":704,"title":{},"body":{"injectables/ImagesService.html":{}}}],["this.imagesrepository.findby",{"_index":705,"title":{},"body":{"injectables/ImagesService.html":{}}}],["this.imagesrepository.findone",{"_index":712,"title":{},"body":{"injectables/ImagesService.html":{}}}],["this.imagesrepository.save",{"_index":707,"title":{},"body":{"injectables/ImagesService.html":{}}}],["this.imagesrepository.save(image",{"_index":703,"title":{},"body":{"injectables/ImagesService.html":{}}}],["this.imagesservice.create",{"_index":668,"title":{},"body":{"controllers/ImagesController.html":{}}}],["this.imagesservice.findall",{"_index":671,"title":{},"body":{"controllers/ImagesController.html":{}}}],["this.imagesservice.remove(id",{"_index":676,"title":{},"body":{"controllers/ImagesController.html":{}}}],["this.imagesservice.updatepositions",{"_index":1382,"title":{},"body":{"injectables/PlacesService.html":{}}}],["this.islikedbyuser(place.likes",{"_index":1449,"title":{},"body":{"injectables/PlacesService.html":{}}}],["this.jwtservice.sign(payload",{"_index":273,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.verify(token",{"_index":740,"title":{},"body":{"guards/JwtAuthGuard.html":{},"injectables/PayloadFromTokenPipe.html":{}}}],["this.languagesrepository",{"_index":1747,"title":{},"body":{"injectables/TranslationsService.html":{}}}],["this.languagesrepository.create",{"_index":826,"title":{},"body":{"injectables/LanguagesService.html":{}}}],["this.languagesrepository.delete(id",{"_index":838,"title":{},"body":{"injectables/LanguagesService.html":{}}}],["this.languagesrepository.find",{"_index":830,"title":{},"body":{"injectables/LanguagesService.html":{}}}],["this.languagesrepository.findone",{"_index":1736,"title":{},"body":{"injectables/TranslationsService.html":{}}}],["this.languagesrepository.findoneby",{"_index":835,"title":{},"body":{"injectables/LanguagesService.html":{}}}],["this.languagesrepository.findoneorfail",{"_index":831,"title":{},"body":{"injectables/LanguagesService.html":{}}}],["this.languagesrepository.save",{"_index":836,"title":{},"body":{"injectables/LanguagesService.html":{}}}],["this.languagesrepository.save(language",{"_index":829,"title":{},"body":{"injectables/LanguagesService.html":{}}}],["this.languagesservice.create(createlanguagedto",{"_index":796,"title":{},"body":{"controllers/LanguagesController.html":{}}}],["this.languagesservice.findall",{"_index":797,"title":{},"body":{"controllers/LanguagesController.html":{}}}],["this.languagesservice.findone",{"_index":1746,"title":{},"body":{"injectables/TranslationsService.html":{}}}],["this.languagesservice.findone(id",{"_index":800,"title":{},"body":{"controllers/LanguagesController.html":{}}}],["this.languagesservice.remove(id",{"_index":806,"title":{},"body":{"controllers/LanguagesController.html":{}}}],["this.languagesservice.update(id",{"_index":803,"title":{},"body":{"controllers/LanguagesController.html":{}}}],["this.likesrepository.create",{"_index":1451,"title":{},"body":{"injectables/PlacesService.html":{}}}],["this.likesrepository.delete",{"_index":1456,"title":{},"body":{"injectables/PlacesService.html":{}}}],["this.likesrepository.exist",{"_index":1455,"title":{},"body":{"injectables/PlacesService.html":{}}}],["this.likesrepository.save(like",{"_index":1461,"title":{},"body":{"injectables/PlacesService.html":{}}}],["this.logger.error('translation",{"_index":1743,"title":{},"body":{"injectables/TranslationsService.html":{}}}],["this.logger.error(error",{"_index":744,"title":{},"body":{"guards/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["this.logger.log",{"_index":1617,"title":{},"body":{"injectables/StorageService.html":{}}}],["this.logger.warn('file",{"_index":1628,"title":{},"body":{"injectables/StorageService.html":{}}}],["this.logger.warn(`access",{"_index":1531,"title":{},"body":{"guards/RolesGuard.html":{}}}],["this.logger.warn(requiredroles",{"_index":1528,"title":{},"body":{"guards/RolesGuard.html":{}}}],["this.mailerservice.sendmail",{"_index":895,"title":{},"body":{"injectables/MailingService.html":{}}}],["this.mailingservice.sendemailconfirm(dto",{"_index":254,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.placecategoriesrepository",{"_index":1030,"title":{},"body":{"injectables/PlaceCategoriesService.html":{}}}],["this.placecategoriesrepository.create",{"_index":1022,"title":{},"body":{"injectables/PlaceCategoriesService.html":{}}}],["this.placecategoriesrepository.findby",{"_index":1372,"title":{},"body":{"injectables/PlacesService.html":{}}}],["this.placecategoriesrepository.save(placecategory",{"_index":1026,"title":{},"body":{"injectables/PlaceCategoriesService.html":{}}}],["this.placecategoriesservice.create",{"_index":993,"title":{},"body":{"controllers/PlaceCategoriesController.html":{}}}],["this.placecategoriesservice.findall(langid",{"_index":994,"title":{},"body":{"controllers/PlaceCategoriesController.html":{}}}],["this.placecategoriesservice.findone(id",{"_index":997,"title":{},"body":{"controllers/PlaceCategoriesController.html":{}}}],["this.placecategoriesservice.remove(+id",{"_index":1001,"title":{},"body":{"controllers/PlaceCategoriesController.html":{}}}],["this.placecategoriesservice.update(+id",{"_index":1000,"title":{},"body":{"controllers/PlaceCategoriesController.html":{}}}],["this.placesrepository",{"_index":1400,"title":{},"body":{"injectables/PlacesService.html":{}}}],["this.placesrepository.create",{"_index":1386,"title":{},"body":{"injectables/PlacesService.html":{}}}],["this.placesrepository.exist",{"_index":1374,"title":{},"body":{"injectables/PlacesService.html":{}}}],["this.placesrepository.findone",{"_index":1453,"title":{},"body":{"injectables/PlacesService.html":{}}}],["this.placesrepository.save",{"_index":1471,"title":{},"body":{"injectables/PlacesService.html":{}}}],["this.placesrepository.save(place",{"_index":1399,"title":{},"body":{"injectables/PlacesService.html":{}}}],["this.placesservice.changelike(tokenpayload.id",{"_index":1289,"title":{},"body":{"controllers/PlacesController.html":{}}}],["this.placesservice.checkuserrelation",{"_index":1285,"title":{},"body":{"controllers/PlacesController.html":{}}}],["this.placesservice.create(langid",{"_index":1269,"title":{},"body":{"controllers/PlacesController.html":{}}}],["this.placesservice.findall(langid",{"_index":1271,"title":{},"body":{"controllers/PlacesController.html":{}}}],["this.placesservice.findonebyslug",{"_index":1281,"title":{},"body":{"controllers/PlacesController.html":{}}}],["this.placesservice.getplacesslugs",{"_index":1276,"title":{},"body":{"controllers/PlacesController.html":{}}}],["this.placesservice.updateplace(id",{"_index":1287,"title":{},"body":{"controllers/PlacesController.html":{}}}],["this.placetypesrepository",{"_index":1174,"title":{},"body":{"injectables/PlaceTypesService.html":{}}}],["this.placetypesrepository.create",{"_index":1167,"title":{},"body":{"injectables/PlaceTypesService.html":{}}}],["this.placetypesrepository.findone",{"_index":1369,"title":{},"body":{"injectables/PlacesService.html":{}}}],["this.placetypesrepository.save(placetype",{"_index":1171,"title":{},"body":{"injectables/PlaceTypesService.html":{}}}],["this.placetypesservice.create(langid",{"_index":1141,"title":{},"body":{"controllers/PlaceTypesController.html":{}}}],["this.placetypesservice.findall(langid",{"_index":1142,"title":{},"body":{"controllers/PlaceTypesController.html":{}}}],["this.placetypesservice.findone(id",{"_index":1145,"title":{},"body":{"controllers/PlaceTypesController.html":{}}}],["this.placetypesservice.remove(id",{"_index":1149,"title":{},"body":{"controllers/PlaceTypesController.html":{}}}],["this.placetypesservice.update(id",{"_index":1148,"title":{},"body":{"controllers/PlaceTypesController.html":{}}}],["this.reflector.getallandoverride",{"_index":1523,"title":{},"body":{"guards/RolesGuard.html":{}}}],["this.rolesrepository.create(createroledto",{"_index":1548,"title":{},"body":{"injectables/RolesService.html":{}}}],["this.rolesrepository.findone",{"_index":1550,"title":{},"body":{"injectables/RolesService.html":{}}}],["this.rolesrepository.save(role",{"_index":1549,"title":{},"body":{"injectables/RolesService.html":{}}}],["this.rolesservice.create(createroledto",{"_index":1506,"title":{},"body":{"controllers/RolesController.html":{}}}],["this.rolesservice.findall",{"_index":1507,"title":{},"body":{"controllers/RolesController.html":{}}}],["this.rolesservice.getrolebyname",{"_index":1895,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.rolesservice.getrolebyname(name",{"_index":1510,"title":{},"body":{"controllers/RolesController.html":{}}}],["this.setdestination(destination",{"_index":1614,"title":{},"body":{"injectables/StorageService.html":{}}}],["this.setfilename(uploadedfile",{"_index":1615,"title":{},"body":{"injectables/StorageService.html":{}}}],["this.storage",{"_index":1600,"title":{},"body":{"injectables/StorageService.html":{}}}],["this.storage.bucket",{"_index":1603,"title":{},"body":{"injectables/StorageService.html":{}}}],["this.storageservice.removefile(image.url",{"_index":713,"title":{},"body":{"injectables/ImagesService.html":{}}}],["this.storageservice.uploadfile(image",{"_index":666,"title":{},"body":{"controllers/ImagesController.html":{}}}],["this.token",{"_index":193,"title":{},"body":{"classes/AuthDto.html":{}}}],["this.translate",{"_index":1753,"title":{},"body":{"injectables/TranslationsService.html":{}}}],["this.translateclient",{"_index":1724,"title":{},"body":{"injectables/TranslationsService.html":{}}}],["this.translateclient.translate(text",{"_index":1742,"title":{},"body":{"injectables/TranslationsService.html":{}}}],["this.translationsrepository",{"_index":1729,"title":{},"body":{"injectables/TranslationsService.html":{}}}],["this.translationsrepository.create",{"_index":1740,"title":{},"body":{"injectables/TranslationsService.html":{}}}],["this.translationsrepository.delete(id",{"_index":1760,"title":{},"body":{"injectables/TranslationsService.html":{}}}],["this.translationsrepository.find",{"_index":1761,"title":{},"body":{"injectables/TranslationsService.html":{}}}],["this.translationsrepository.save(texttranslation",{"_index":1741,"title":{},"body":{"injectables/TranslationsService.html":{}}}],["this.translationsrepository.save(translation",{"_index":1759,"title":{},"body":{"injectables/TranslationsService.html":{}}}],["this.translationsrepository.update(id",{"_index":1763,"title":{},"body":{"injectables/TranslationsService.html":{}}}],["this.translationsservice.createtranslation",{"_index":1020,"title":{},"body":{"injectables/PlaceCategoriesService.html":{},"injectables/PlaceTypesService.html":{},"injectables/PlacesService.html":{},"controllers/TranslationsController.html":{}}}],["this.translationsservice.deletetranslation(id",{"_index":1686,"title":{},"body":{"controllers/TranslationsController.html":{}}}],["this.translationsservice.getall",{"_index":1681,"title":{},"body":{"controllers/TranslationsController.html":{}}}],["this.translationsservice.translateall",{"_index":1027,"title":{},"body":{"injectables/PlaceCategoriesService.html":{},"injectables/PlaceTypesService.html":{},"injectables/PlacesService.html":{}}}],["this.translationsservice.update(id",{"_index":1680,"title":{},"body":{"controllers/TranslationsController.html":{}}}],["this.user?.firstname",{"_index":327,"title":{},"body":{"classes/CommentDto.html":{}}}],["this.user?.id",{"_index":330,"title":{},"body":{"classes/CommentDto.html":{}}}],["this.user?.lastname",{"_index":328,"title":{},"body":{"classes/CommentDto.html":{}}}],["this.usersrepository",{"_index":1897,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.create(createuserdto",{"_index":1893,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.find",{"_index":1902,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.findone",{"_index":1900,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.save(user",{"_index":1896,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersservice.confirmemail(tokenpayload.id",{"_index":1864,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.create(dto",{"_index":253,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.findall",{"_index":1856,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findonebyid(tokenpayload.id",{"_index":1836,"title":{},"body":{"injectables/UserFromTokenPipe.html":{}}}],["this.usersservice.getuserbyemail(dto.email",{"_index":244,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.getuserbyemail(logindto.email",{"_index":258,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.remove(+id",{"_index":1867,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.update(+id",{"_index":1866,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.validateplacecategories",{"_index":1467,"title":{},"body":{"injectables/PlacesService.html":{}}}],["this.validateplacecategories(createplacedto",{"_index":1380,"title":{},"body":{"injectables/PlacesService.html":{}}}],["this.validateplacetype(createplacedto",{"_index":1379,"title":{},"body":{"injectables/PlacesService.html":{}}}],["this.validateplacetype(updateplacedto",{"_index":1466,"title":{},"body":{"injectables/PlacesService.html":{}}}],["this.validateslugexists(createplacedto.slug",{"_index":1377,"title":{},"body":{"injectables/PlacesService.html":{}}}],["this.validateuser(logindto",{"_index":256,"title":{},"body":{"injectables/AuthService.html":{}}}],["throw",{"_index":245,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CommentsService.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"guards/JwtAuthGuard.html":{},"injectables/LanguagesService.html":{},"injectables/PlaceCategoriesService.html":{},"injectables/PlaceTypesService.html":{},"controllers/PlacesController.html":{},"injectables/PlacesService.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"injectables/StorageService.html":{},"injectables/TranslationsService.html":{},"injectables/UserFromTokenPipe.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["tinyint",{"_index":583,"title":{},"body":{"entities/Image.html":{}}}],["title",{"_index":324,"title":{},"body":{"classes/CommentDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreateLanguageDto.html":{},"classes/CreatePlaceCategoryDto.html":{},"classes/CreatePlaceDto.html":{},"classes/CreatePlaceTypeDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateTranslationDto.html":{},"classes/CreateUserDto.html":{},"classes/ImageDto.html":{},"entities/Language.html":{},"classes/LanguageDto.html":{},"injectables/LanguagesService.html":{},"classes/LoginDto.html":{},"entities/Place.html":{},"injectables/PlaceCategoriesService.html":{},"entities/PlaceCategory.html":{},"classes/PlaceCategoryDto.html":{},"classes/PlaceDto.html":{},"classes/PlaceSlugDto.html":{},"entities/PlaceType.html":{},"classes/PlaceTypeDto.html":{},"injectables/PlaceTypesService.html":{},"injectables/PlacesService.html":{},"classes/RoleDto.html":{},"classes/SearchPlaceDto.html":{},"classes/TranslationDto.html":{},"classes/UpdatePlaceDto.html":{},"classes/UserDto.html":{}}}],["title'})@transform",{"_index":1084,"title":{},"body":{"classes/PlaceDto.html":{},"classes/SearchPlaceDto.html":{}}}],["title_t",{"_index":1423,"title":{},"body":{"injectables/PlacesService.html":{}}}],["title_t.language",{"_index":1425,"title":{},"body":{"injectables/PlacesService.html":{}}}],["title_t.textid",{"_index":1424,"title":{},"body":{"injectables/PlacesService.html":{}}}],["titletranslation",{"_index":1019,"title":{},"body":{"injectables/PlaceCategoriesService.html":{},"injectables/PlaceTypesService.html":{},"injectables/PlacesService.html":{}}}],["titletranslation.text",{"_index":1028,"title":{},"body":{"injectables/PlaceCategoriesService.html":{},"injectables/PlaceTypesService.html":{},"injectables/PlacesService.html":{}}}],["titletranslation.textid",{"_index":1023,"title":{},"body":{"injectables/PlaceCategoriesService.html":{},"injectables/PlaceTypesService.html":{},"injectables/PlacesService.html":{}}}],["token",{"_index":139,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthDto.html":{},"injectables/AuthService.html":{},"guards/JwtAuthGuard.html":{},"injectables/PayloadFromTokenPipe.html":{},"controllers/PlacesController.html":{},"guards/RolesGuard.html":{},"injectables/UserFromTokenPipe.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["token')@apiokresponse({description",{"_index":1226,"title":{},"body":{"controllers/PlacesController.html":{}}}],["token(payloadfromtokenpipe",{"_index":1280,"title":{},"body":{"controllers/PlacesController.html":{}}}],["token.pipe",{"_index":208,"title":{},"body":{"modules/AuthModule.html":{},"controllers/PlacesController.html":{},"controllers/UsersController.html":{}}}],["token.pipe.ts",{"_index":910,"title":{},"body":{"injectables/PayloadFromTokenPipe.html":{},"injectables/UserFromTokenPipe.html":{},"coverage.html":{}}}],["token.pipe.ts:11",{"_index":1833,"title":{},"body":{"injectables/UserFromTokenPipe.html":{}}}],["token.pipe.ts:14",{"_index":1835,"title":{},"body":{"injectables/UserFromTokenPipe.html":{}}}],["token.pipe.ts:6",{"_index":912,"title":{},"body":{"injectables/PayloadFromTokenPipe.html":{}}}],["token.pipe.ts:9",{"_index":916,"title":{},"body":{"injectables/PayloadFromTokenPipe.html":{}}}],["tokenpayload",{"_index":604,"title":{},"body":{"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"guards/JwtAuthGuard.html":{},"injectables/PayloadFromTokenPipe.html":{},"controllers/PlacesController.html":{},"injectables/PlacesService.html":{},"guards/RolesGuard.html":{},"injectables/UserFromTokenPipe.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["tokenpayload(userfromtokenpipe",{"_index":1268,"title":{},"body":{"controllers/PlacesController.html":{}}}],["tokenpayload.id",{"_index":702,"title":{},"body":{"injectables/ImagesService.html":{},"controllers/PlacesController.html":{},"injectables/PlacesService.html":{}}}],["tokenpayload.roles?.some((role",{"_index":1529,"title":{},"body":{"guards/RolesGuard.html":{}}}],["tokenpayload?.id",{"_index":1292,"title":{},"body":{"controllers/PlacesController.html":{},"injectables/PlacesService.html":{}}}],["tokenpayloaddto",{"_index":239,"title":{"classes/TokenPayloadDto.html":{}},"body":{"injectables/AuthService.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"guards/JwtAuthGuard.html":{},"injectables/PayloadFromTokenPipe.html":{},"controllers/PlacesController.html":{},"injectables/PlacesService.html":{},"classes/TokenPayloadDto.html":{},"injectables/UserFromTokenPipe.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["touch",{"_index":2028,"title":{},"body":{"index.html":{}}}],["transform",{"_index":911,"title":{},"body":{"injectables/PayloadFromTokenPipe.html":{},"classes/PlaceCategoryDto.html":{},"classes/PlaceDto.html":{},"classes/PlaceTypeDto.html":{},"classes/SearchPlaceDto.html":{},"injectables/UserFromTokenPipe.html":{}}}],["transform(token",{"_index":913,"title":{},"body":{"injectables/PayloadFromTokenPipe.html":{}}}],["transform(tokenpayload",{"_index":1834,"title":{},"body":{"injectables/UserFromTokenPipe.html":{}}}],["transformer",{"_index":322,"title":{},"body":{"classes/CommentDto.html":{},"classes/PlaceCategoryDto.html":{},"classes/PlaceDto.html":{},"classes/PlaceTypeDto.html":{},"classes/SearchPlaceDto.html":{},"classes/UserDto.html":{},"dependencies.html":{}}}],["translate",{"_index":1699,"title":{},"body":{"injectables/TranslationsService.html":{},"classes/UpdatePlaceDto.html":{}}}],["translate(text",{"_index":1709,"title":{},"body":{"injectables/TranslationsService.html":{}}}],["translateall",{"_index":1340,"title":{},"body":{"injectables/PlacesService.html":{},"injectables/TranslationsService.html":{}}}],["translateall(text",{"_index":1713,"title":{},"body":{"injectables/TranslationsService.html":{}}}],["translateclient",{"_index":1695,"title":{},"body":{"injectables/TranslationsService.html":{}}}],["translatedtext",{"_index":1752,"title":{},"body":{"injectables/TranslationsService.html":{}}}],["translation",{"_index":747,"title":{"entities/Translation.html":{}},"body":{"entities/Language.html":{},"injectables/PlaceCategoriesService.html":{},"classes/PlaceDto.html":{},"classes/PlaceTypeDto.html":{},"injectables/PlaceTypesService.html":{},"injectables/PlacesService.html":{},"classes/SearchPlaceDto.html":{},"entities/Translation.html":{},"classes/TranslationDto.html":{},"controllers/TranslationsController.html":{},"modules/TranslationsModule.html":{},"injectables/TranslationsService.html":{},"coverage.html":{}}}],["translation'})@apiokresponse({description",{"_index":1654,"title":{},"body":{"controllers/TranslationsController.html":{}}}],["translation.dto",{"_index":1669,"title":{},"body":{"controllers/TranslationsController.html":{},"injectables/TranslationsService.html":{},"classes/UpdateTranslationDto.html":{}}}],["translation.dto.ts",{"_index":503,"title":{},"body":{"classes/CreateTranslationDto.html":{},"classes/UpdateTranslationDto.html":{},"coverage.html":{}}}],["translation.dto.ts:15",{"_index":508,"title":{},"body":{"classes/CreateTranslationDto.html":{}}}],["translation.dto.ts:18",{"_index":507,"title":{},"body":{"classes/CreateTranslationDto.html":{}}}],["translation.dto.ts:5",{"_index":510,"title":{},"body":{"classes/CreateTranslationDto.html":{}}}],["translation.dto.ts:8",{"_index":509,"title":{},"body":{"classes/CreateTranslationDto.html":{}}}],["translation.language",{"_index":752,"title":{},"body":{"entities/Language.html":{},"injectables/TranslationsService.html":{}}}],["translation.original",{"_index":1758,"title":{},"body":{"injectables/TranslationsService.html":{}}}],["translation.text",{"_index":1756,"title":{},"body":{"injectables/TranslationsService.html":{}}}],["translation.textid",{"_index":1757,"title":{},"body":{"injectables/TranslationsService.html":{}}}],["translationdto",{"_index":1057,"title":{"classes/TranslationDto.html":{}},"body":{"classes/PlaceCategoryDto.html":{},"classes/TranslationDto.html":{},"controllers/TranslationsController.html":{},"coverage.html":{}}}],["translationdto(t",{"_index":1683,"title":{},"body":{"controllers/TranslationsController.html":{}}}],["translationdto(translation",{"_index":1677,"title":{},"body":{"controllers/TranslationsController.html":{}}}],["translationdto})@apibody({type",{"_index":1655,"title":{},"body":{"controllers/TranslationsController.html":{}}}],["translations",{"_index":1384,"title":{},"body":{"injectables/PlacesService.html":{},"controllers/TranslationsController.html":{},"injectables/TranslationsService.html":{}}}],["translations'})@apiokresponse({description",{"_index":1662,"title":{},"body":{"controllers/TranslationsController.html":{}}}],["translations.addresstranslation.textid",{"_index":1393,"title":{},"body":{"injectables/PlacesService.html":{}}}],["translations.controller",{"_index":1692,"title":{},"body":{"modules/TranslationsModule.html":{}}}],["translations.descriptiontranslation.textid",{"_index":1391,"title":{},"body":{"injectables/PlacesService.html":{}}}],["translations.map((t",{"_index":1682,"title":{},"body":{"controllers/TranslationsController.html":{}}}],["translations.service",{"_index":1668,"title":{},"body":{"controllers/TranslationsController.html":{},"modules/TranslationsModule.html":{}}}],["translations.titletranslation.textid",{"_index":1389,"title":{},"body":{"injectables/PlacesService.html":{}}}],["translations/dto/translation.dto",{"_index":1058,"title":{},"body":{"classes/PlaceCategoryDto.html":{}}}],["translations/entities/translation.entity",{"_index":754,"title":{},"body":{"entities/Language.html":{},"classes/PlaceDto.html":{},"classes/PlaceTypeDto.html":{},"classes/SearchPlaceDto.html":{}}}],["translations/translations.module",{"_index":115,"title":{},"body":{"modules/AppModule.html":{},"modules/PlaceCategoriesModule.html":{},"modules/PlaceTypesModule.html":{},"modules/PlacesModule.html":{}}}],["translations/translations.service",{"_index":1017,"title":{},"body":{"injectables/PlaceCategoriesService.html":{},"injectables/PlaceTypesService.html":{},"injectables/PlacesService.html":{}}}],["translationscontroller",{"_index":1651,"title":{"controllers/TranslationsController.html":{}},"body":{"controllers/TranslationsController.html":{},"modules/TranslationsModule.html":{},"coverage.html":{}}}],["translationsmodule",{"_index":98,"title":{"modules/TranslationsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PlaceCategoriesModule.html":{},"modules/PlaceTypesModule.html":{},"modules/PlacesModule.html":{},"modules/TranslationsModule.html":{},"modules.html":{},"overview.html":{}}}],["translationsrepository",{"_index":1702,"title":{},"body":{"injectables/TranslationsService.html":{}}}],["translationsservice",{"_index":1011,"title":{"injectables/TranslationsService.html":{}},"body":{"injectables/PlaceCategoriesService.html":{},"injectables/PlaceTypesService.html":{},"injectables/PlacesService.html":{},"controllers/TranslationsController.html":{},"modules/TranslationsModule.html":{},"injectables/TranslationsService.html":{},"coverage.html":{},"overview.html":{}}}],["transport",{"_index":860,"title":{},"body":{"modules/MailingModule.html":{}}}],["true",{"_index":128,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/CommentsService.html":{},"classes/CreateFileDto.html":{},"classes/CreateImageDto.html":{},"classes/CreatePlaceDto.html":{},"modules/DatabaseModule.html":{},"controllers/ImagesController.html":{},"guards/JwtAuthGuard.html":{},"controllers/LanguagesController.html":{},"entities/Place.html":{},"controllers/PlaceCategoriesController.html":{},"injectables/PlaceCategoriesService.html":{},"entities/PlaceCategory.html":{},"classes/PlaceCategoryDto.html":{},"classes/PlaceDto.html":{},"entities/PlaceType.html":{},"classes/PlaceTypeDto.html":{},"controllers/PlaceTypesController.html":{},"injectables/PlaceTypesService.html":{},"controllers/PlacesController.html":{},"injectables/PlacesService.html":{},"entities/Role.html":{},"guards/RolesGuard.html":{},"classes/SearchPlaceDto.html":{},"controllers/TranslationsController.html":{},"injectables/TranslationsService.html":{},"classes/UpdatePlaceDto.html":{},"entities/User.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/ValidationExceptionDto.html":{},"classes/ValidationMessageDto.html":{}}}],["true})@apioperation({summary",{"_index":772,"title":{},"body":{"controllers/LanguagesController.html":{}}}],["true})@apiparam({name",{"_index":1227,"title":{},"body":{"controllers/PlacesController.html":{}}}],["true})@apiquery({name",{"_index":976,"title":{},"body":{"controllers/PlaceCategoriesController.html":{},"controllers/PlaceTypesController.html":{},"controllers/PlacesController.html":{}}}],["true})@column({unique",{"_index":950,"title":{},"body":{"entities/Place.html":{}}}],["true})@get",{"_index":611,"title":{},"body":{"controllers/ImagesController.html":{},"controllers/TranslationsController.html":{}}}],["true})@get('slugs",{"_index":1237,"title":{},"body":{"controllers/PlacesController.html":{}}}],["true})@joincolumn",{"_index":1801,"title":{},"body":{"entities/User.html":{}}}],["true})@transform",{"_index":1053,"title":{},"body":{"classes/PlaceCategoryDto.html":{},"classes/PlaceDto.html":{},"classes/PlaceTypeDto.html":{},"classes/SearchPlaceDto.html":{}}}],["true})@useinterceptors(classserializerinterceptor)@auth()@get",{"_index":1846,"title":{},"body":{"controllers/UsersController.html":{}}}],["trustservercertificate",{"_index":537,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["try",{"_index":734,"title":{},"body":{"guards/JwtAuthGuard.html":{},"injectables/LanguagesService.html":{},"injectables/PayloadFromTokenPipe.html":{},"injectables/PlacesService.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"injectables/StorageService.html":{},"injectables/TranslationsService.html":{},"injectables/UserFromTokenPipe.html":{}}}],["twitter",{"_index":2032,"title":{},"body":{"index.html":{}}}],["type",{"_index":14,"title":{},"body":{"entities/Admin.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"injectables/AuthService.html":{},"entities/Comment.html":{},"classes/CommentDto.html":{},"injectables/CommentsService.html":{},"classes/CreateCommentDto.html":{},"classes/CreateFileDto.html":{},"classes/CreateImageDto.html":{},"classes/CreateLanguageDto.html":{},"classes/CreatePlaceCategoryDto.html":{},"classes/CreatePlaceDto.html":{},"classes/CreatePlaceTypeDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateTranslationDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"classes/FileDto.html":{},"interfaces/IDatabaseConfig.html":{},"interfaces/IGoogleCloudConfig.html":{},"interfaces/IJwtConfig.html":{},"interfaces/IMailerConfig.html":{},"entities/Image.html":{},"classes/ImageDto.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"guards/JwtAuthGuard.html":{},"entities/Language.html":{},"classes/LanguageDto.html":{},"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{},"entities/Like.html":{},"classes/LoginDto.html":{},"injectables/MailingService.html":{},"injectables/PayloadFromTokenPipe.html":{},"entities/Place.html":{},"controllers/PlaceCategoriesController.html":{},"injectables/PlaceCategoriesService.html":{},"entities/PlaceCategory.html":{},"classes/PlaceCategoryDto.html":{},"classes/PlaceDto.html":{},"classes/PlaceSlugDto.html":{},"entities/PlaceType.html":{},"classes/PlaceTypeDto.html":{},"controllers/PlaceTypesController.html":{},"injectables/PlaceTypesService.html":{},"controllers/PlacesController.html":{},"injectables/PlacesService.html":{},"entities/Role.html":{},"classes/RoleDto.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"classes/SearchPlaceDto.html":{},"injectables/StorageService.html":{},"classes/TokenPayloadDto.html":{},"entities/Translation.html":{},"classes/TranslationDto.html":{},"controllers/TranslationsController.html":{},"injectables/TranslationsService.html":{},"classes/UpdateCommentDto.html":{},"classes/UpdatePlaceDto.html":{},"entities/User.html":{},"classes/UserDto.html":{},"injectables/UserFromTokenPipe.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/ValidationExceptionDto.html":{},"classes/ValidationMessageDto.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["type'})@apiokresponse({description",{"_index":1122,"title":{},"body":{"controllers/PlaceTypesController.html":{}}}],["type'})@apiquery({name",{"_index":1132,"title":{},"body":{"controllers/PlaceTypesController.html":{}}}],["type'})@transform",{"_index":1087,"title":{},"body":{"classes/PlaceDto.html":{},"classes/SearchPlaceDto.html":{}}}],["type.dto",{"_index":1093,"title":{},"body":{"classes/PlaceDto.html":{},"controllers/PlaceTypesController.html":{},"injectables/PlaceTypesService.html":{},"classes/SearchPlaceDto.html":{},"classes/UpdatePlaceTypeDto.html":{}}}],["type.dto.ts",{"_index":473,"title":{},"body":{"classes/CreatePlaceTypeDto.html":{},"classes/PlaceTypeDto.html":{},"classes/UpdatePlaceTypeDto.html":{},"coverage.html":{}}}],["type.dto.ts:13",{"_index":1118,"title":{},"body":{"classes/PlaceTypeDto.html":{}}}],["type.dto.ts:14",{"_index":481,"title":{},"body":{"classes/CreatePlaceTypeDto.html":{}}}],["type.dto.ts:20",{"_index":1116,"title":{},"body":{"classes/PlaceTypeDto.html":{}}}],["type.dto.ts:22",{"_index":476,"title":{},"body":{"classes/CreatePlaceTypeDto.html":{}}}],["type.dto.ts:26",{"_index":1115,"title":{},"body":{"classes/PlaceTypeDto.html":{}}}],["type.dto.ts:27",{"_index":479,"title":{},"body":{"classes/CreatePlaceTypeDto.html":{}}}],["type.dto.ts:9",{"_index":1117,"title":{},"body":{"classes/PlaceTypeDto.html":{}}}],["type.entity",{"_index":589,"title":{},"body":{"entities/Image.html":{},"entities/Place.html":{},"classes/PlaceDto.html":{},"classes/PlaceTypeDto.html":{},"modules/PlaceTypesModule.html":{},"injectables/PlaceTypesService.html":{},"modules/PlacesModule.html":{},"injectables/PlacesService.html":{},"classes/SearchPlaceDto.html":{}}}],["type.entity.ts",{"_index":1108,"title":{},"body":{"entities/PlaceType.html":{},"coverage.html":{}}}],["type.entity.ts:16",{"_index":1110,"title":{},"body":{"entities/PlaceType.html":{}}}],["type.entity.ts:19",{"_index":1114,"title":{},"body":{"entities/PlaceType.html":{}}}],["type.entity.ts:22",{"_index":1109,"title":{},"body":{"entities/PlaceType.html":{}}}],["type.entity.ts:26",{"_index":1111,"title":{},"body":{"entities/PlaceType.html":{}}}],["type.entity.ts:29",{"_index":1113,"title":{},"body":{"entities/PlaceType.html":{}}}],["type.image",{"_index":1409,"title":{},"body":{"injectables/PlacesService.html":{}}}],["type.places",{"_index":953,"title":{},"body":{"entities/Place.html":{}}}],["type.title",{"_index":1415,"title":{},"body":{"injectables/PlacesService.html":{}}}],["type_image",{"_index":1410,"title":{},"body":{"injectables/PlacesService.html":{}}}],["type_image.id",{"_index":1411,"title":{},"body":{"injectables/PlacesService.html":{}}}],["type_t",{"_index":1416,"title":{},"body":{"injectables/PlacesService.html":{}}}],["type_t.language",{"_index":1418,"title":{},"body":{"injectables/PlacesService.html":{}}}],["type_t.textid",{"_index":1417,"title":{},"body":{"injectables/PlacesService.html":{}}}],["typealiases",{"_index":2049,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":406,"title":{},"body":{"injectables/CommentsService.html":{},"miscellaneous/variables.html":{}}}],["typeorm",{"_index":41,"title":{},"body":{"entities/Admin.html":{},"entities/Comment.html":{},"injectables/CommentsService.html":{},"entities/Image.html":{},"injectables/ImagesService.html":{},"entities/Language.html":{},"injectables/LanguagesService.html":{},"entities/Like.html":{},"entities/Place.html":{},"injectables/PlaceCategoriesService.html":{},"entities/PlaceCategory.html":{},"entities/PlaceType.html":{},"injectables/PlaceTypesService.html":{},"injectables/PlacesService.html":{},"entities/Role.html":{},"injectables/RolesService.html":{},"entities/Translation.html":{},"injectables/TranslationsService.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":337,"title":{},"body":{"modules/CommentsModule.html":{},"modules/DatabaseModule.html":{},"modules/ImagesModule.html":{},"modules/LanguagesModule.html":{},"modules/PlaceCategoriesModule.html":{},"modules/PlaceTypesModule.html":{},"modules/PlacesModule.html":{},"modules/RolesModule.html":{},"modules/TranslationsModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([comment",{"_index":339,"title":{},"body":{"modules/CommentsModule.html":{}}}],["typeormmodule.forfeature([image",{"_index":683,"title":{},"body":{"modules/ImagesModule.html":{}}}],["typeormmodule.forfeature([language",{"_index":813,"title":{},"body":{"modules/LanguagesModule.html":{}}}],["typeormmodule.forfeature([place",{"_index":1312,"title":{},"body":{"modules/PlacesModule.html":{}}}],["typeormmodule.forfeature([placecategory",{"_index":1008,"title":{},"body":{"modules/PlaceCategoriesModule.html":{}}}],["typeormmodule.forfeature([placetype",{"_index":1155,"title":{},"body":{"modules/PlaceTypesModule.html":{}}}],["typeormmodule.forfeature([role",{"_index":1537,"title":{},"body":{"modules/RolesModule.html":{}}}],["typeormmodule.forfeature([translation",{"_index":1693,"title":{},"body":{"modules/TranslationsModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":1874,"title":{},"body":{"modules/UsersModule.html":{}}}],["typeormmodule.forrootasync",{"_index":524,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["types",{"_index":1129,"title":{},"body":{"controllers/PlaceTypesController.html":{}}}],["types.controller",{"_index":1154,"title":{},"body":{"modules/PlaceTypesModule.html":{}}}],["types.controller.ts",{"_index":1120,"title":{},"body":{"controllers/PlaceTypesController.html":{},"coverage.html":{}}}],["types.controller.ts:51",{"_index":1128,"title":{},"body":{"controllers/PlaceTypesController.html":{}}}],["types.controller.ts:71",{"_index":1130,"title":{},"body":{"controllers/PlaceTypesController.html":{}}}],["types.controller.ts:98",{"_index":1133,"title":{},"body":{"controllers/PlaceTypesController.html":{}}}],["types.map((t",{"_index":1143,"title":{},"body":{"controllers/PlaceTypesController.html":{}}}],["types.module",{"_index":113,"title":{},"body":{"modules/AppModule.html":{}}}],["types.module.ts",{"_index":1153,"title":{},"body":{"modules/PlaceTypesModule.html":{}}}],["types.service",{"_index":1135,"title":{},"body":{"controllers/PlaceTypesController.html":{},"modules/PlaceTypesModule.html":{}}}],["types.service.ts",{"_index":1156,"title":{},"body":{"injectables/PlaceTypesService.html":{},"coverage.html":{}}}],["types.service.ts:11",{"_index":1158,"title":{},"body":{"injectables/PlaceTypesService.html":{}}}],["types.service.ts:19",{"_index":1160,"title":{},"body":{"injectables/PlaceTypesService.html":{}}}],["types.service.ts:46",{"_index":1161,"title":{},"body":{"injectables/PlaceTypesService.html":{}}}],["types.service.ts:60",{"_index":1162,"title":{},"body":{"injectables/PlaceTypesService.html":{}}}],["types/dto/create",{"_index":472,"title":{},"body":{"classes/CreatePlaceTypeDto.html":{},"coverage.html":{}}}],["types/dto/place",{"_index":1092,"title":{},"body":{"classes/PlaceDto.html":{},"classes/PlaceTypeDto.html":{},"classes/SearchPlaceDto.html":{},"coverage.html":{}}}],["types/dto/update",{"_index":1788,"title":{},"body":{"classes/UpdatePlaceTypeDto.html":{},"coverage.html":{}}}],["types/entities/place",{"_index":588,"title":{},"body":{"entities/Image.html":{},"entities/Place.html":{},"classes/PlaceDto.html":{},"entities/PlaceType.html":{},"modules/PlacesModule.html":{},"injectables/PlacesService.html":{},"classes/SearchPlaceDto.html":{},"coverage.html":{}}}],["types/place",{"_index":112,"title":{},"body":{"modules/AppModule.html":{},"controllers/PlaceTypesController.html":{},"modules/PlaceTypesModule.html":{},"injectables/PlaceTypesService.html":{},"coverage.html":{}}}],["typescript",{"_index":1993,"title":{},"body":{"index.html":{}}}],["unauthorizedexception",{"_index":160,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/JwtAuthGuard.html":{},"guards/RolesGuard.html":{},"injectables/UserFromTokenPipe.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["unauthorizedexception})@apibody({type",{"_index":144,"title":{},"body":{"controllers/AuthController.html":{}}}],["undefined",{"_index":495,"title":{},"body":{"classes/CreateRoleDto.html":{},"miscellaneous/functions.html":{}}}],["undefined})@apinotfoundresponse({type",{"_index":781,"title":{},"body":{"controllers/LanguagesController.html":{}}}],["undefined})@apiparam({name",{"_index":1240,"title":{},"body":{"controllers/PlacesController.html":{},"controllers/TranslationsController.html":{}}}],["undefined})@apiquery({name",{"_index":1210,"title":{},"body":{"controllers/PlacesController.html":{}}}],["unique",{"_index":926,"title":{},"body":{"entities/Place.html":{},"entities/PlaceCategory.html":{},"entities/PlaceType.html":{},"entities/Role.html":{},"entities/Translation.html":{}}}],["unit",{"_index":2007,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":150,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CommentsService.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{},"injectables/PayloadFromTokenPipe.html":{},"controllers/PlaceCategoriesController.html":{},"injectables/PlaceCategoriesService.html":{},"controllers/PlaceTypesController.html":{},"injectables/PlaceTypesService.html":{},"controllers/PlacesController.html":{},"injectables/PlacesService.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"controllers/TranslationsController.html":{},"injectables/TranslationsService.html":{},"injectables/UserFromTokenPipe.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["unlicensed",{"_index":2048,"title":{},"body":{"properties.html":{}}}],["update",{"_index":765,"title":{},"body":{"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{},"controllers/PlaceCategoriesController.html":{},"controllers/PlaceTypesController.html":{},"controllers/PlacesController.html":{},"injectables/PlacesService.html":{},"controllers/TranslationsController.html":{},"injectables/TranslationsService.html":{},"injectables/UsersService.html":{}}}],["update(@param('id",{"_index":1865,"title":{},"body":{"controllers/UsersController.html":{}}}],["update(id",{"_index":784,"title":{},"body":{"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{},"injectables/PlaceCategoriesService.html":{},"injectables/PlaceTypesService.html":{},"controllers/PlacesController.html":{},"controllers/TranslationsController.html":{},"injectables/TranslationsService.html":{},"injectables/UsersService.html":{}}}],["updatecomment",{"_index":1189,"title":{},"body":{"controllers/PlacesController.html":{}}}],["updatecomment(commentid",{"_index":1243,"title":{},"body":{"controllers/PlacesController.html":{}}}],["updatecommentdto",{"_index":367,"title":{"classes/UpdateCommentDto.html":{}},"body":{"injectables/CommentsService.html":{},"controllers/PlacesController.html":{},"classes/UpdateCommentDto.html":{},"coverage.html":{}}}],["updatecommentdto.text",{"_index":402,"title":{},"body":{"injectables/CommentsService.html":{}}}],["updatelanguagedto",{"_index":785,"title":{"classes/UpdateLanguageDto.html":{}},"body":{"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{},"classes/UpdateLanguageDto.html":{},"coverage.html":{}}}],["updateplace",{"_index":1321,"title":{},"body":{"injectables/PlacesService.html":{}}}],["updateplace(placeid",{"_index":1349,"title":{},"body":{"injectables/PlacesService.html":{}}}],["updateplacecategorydto",{"_index":999,"title":{"classes/UpdatePlaceCategoryDto.html":{}},"body":{"controllers/PlaceCategoriesController.html":{},"injectables/PlaceCategoriesService.html":{},"classes/UpdatePlaceCategoryDto.html":{},"coverage.html":{}}}],["updateplacecomment",{"_index":346,"title":{},"body":{"injectables/CommentsService.html":{}}}],["updateplacecomment(commentid",{"_index":366,"title":{},"body":{"injectables/CommentsService.html":{}}}],["updateplacedto",{"_index":1239,"title":{"classes/UpdatePlaceDto.html":{}},"body":{"controllers/PlacesController.html":{},"injectables/PlacesService.html":{},"classes/UpdatePlaceDto.html":{},"coverage.html":{}}}],["updateplacedto.coordinates",{"_index":1473,"title":{},"body":{"injectables/PlacesService.html":{}}}],["updateplacedto.imagesids",{"_index":1468,"title":{},"body":{"injectables/PlacesService.html":{}}}],["updateplacedto.shouldtranslate",{"_index":1470,"title":{},"body":{"injectables/PlacesService.html":{}}}],["updateplacedto.slug",{"_index":1472,"title":{},"body":{"injectables/PlacesService.html":{}}}],["updateplacedto.website",{"_index":1474,"title":{},"body":{"injectables/PlacesService.html":{}}}],["updateplacedto})@auth()@put(':id",{"_index":1241,"title":{},"body":{"controllers/PlacesController.html":{}}}],["updateplacetypedto",{"_index":1147,"title":{"classes/UpdatePlaceTypeDto.html":{}},"body":{"controllers/PlaceTypesController.html":{},"injectables/PlaceTypesService.html":{},"classes/UpdatePlaceTypeDto.html":{},"coverage.html":{}}}],["updatepositions",{"_index":685,"title":{},"body":{"injectables/ImagesService.html":{}}}],["updatepositions(imageids",{"_index":694,"title":{},"body":{"injectables/ImagesService.html":{}}}],["updateroledto",{"_index":1790,"title":{"classes/UpdateRoleDto.html":{}},"body":{"classes/UpdateRoleDto.html":{},"coverage.html":{}}}],["updates",{"_index":834,"title":{},"body":{"injectables/LanguagesService.html":{},"injectables/PlaceCategoriesService.html":{},"injectables/PlaceTypesService.html":{},"injectables/UsersService.html":{}}}],["updatetranslationdto",{"_index":1664,"title":{"classes/UpdateTranslationDto.html":{}},"body":{"controllers/TranslationsController.html":{},"injectables/TranslationsService.html":{},"classes/UpdateTranslationDto.html":{},"coverage.html":{}}}],["updatetranslationdto.langid",{"_index":1764,"title":{},"body":{"injectables/TranslationsService.html":{}}}],["updatetranslationdto.original",{"_index":1767,"title":{},"body":{"injectables/TranslationsService.html":{}}}],["updatetranslationdto.text",{"_index":1765,"title":{},"body":{"injectables/TranslationsService.html":{}}}],["updatetranslationdto.textid",{"_index":1766,"title":{},"body":{"injectables/TranslationsService.html":{}}}],["updatetranslationdto})@put('/:id",{"_index":1666,"title":{},"body":{"controllers/TranslationsController.html":{}}}],["updateuserdto",{"_index":1795,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["uploaded",{"_index":665,"title":{},"body":{"controllers/ImagesController.html":{}}}],["uploaded.publicurl",{"_index":669,"title":{},"body":{"controllers/ImagesController.html":{}}}],["uploadedfile",{"_index":622,"title":{},"body":{"controllers/ImagesController.html":{},"injectables/StorageService.html":{}}}],["uploadedfile.mimetype",{"_index":1621,"title":{},"body":{"injectables/StorageService.html":{}}}],["uploadfile",{"_index":1579,"title":{},"body":{"injectables/StorageService.html":{}}}],["uploadfile(uploadedfile",{"_index":1590,"title":{},"body":{"injectables/StorageService.html":{}}}],["url",{"_index":466,"title":{},"body":{"classes/CreatePlaceDto.html":{},"entities/Image.html":{},"classes/ImageDto.html":{},"injectables/ImagesService.html":{},"classes/PlaceCategoryDto.html":{},"classes/PlaceDto.html":{},"classes/PlaceSlugDto.html":{},"classes/PlaceTypeDto.html":{},"classes/SearchPlaceDto.html":{},"classes/UpdatePlaceDto.html":{}}}],["usefactory",{"_index":211,"title":{},"body":{"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/MailingModule.html":{}}}],["useinterceptors",{"_index":623,"title":{},"body":{"controllers/ImagesController.html":{},"controllers/PlaceCategoriesController.html":{},"controllers/PlaceTypesController.html":{},"controllers/PlacesController.html":{},"controllers/TranslationsController.html":{},"controllers/UsersController.html":{}}}],["useinterceptors(classserializerinterceptor",{"_index":662,"title":{},"body":{"controllers/ImagesController.html":{},"controllers/PlaceCategoriesController.html":{},"controllers/PlaceTypesController.html":{},"controllers/PlacesController.html":{},"controllers/TranslationsController.html":{},"controllers/UsersController.html":{}}}],["user",{"_index":13,"title":{"entities/User.html":{}},"body":{"entities/Admin.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"entities/Comment.html":{},"classes/CommentDto.html":{},"injectables/CommentsService.html":{},"interfaces/IDatabaseConfig.html":{},"interfaces/IGoogleCloudConfig.html":{},"interfaces/IJwtConfig.html":{},"interfaces/IMailerConfig.html":{},"entities/Image.html":{},"injectables/ImagesService.html":{},"entities/Like.html":{},"entities/Place.html":{},"classes/PlaceDto.html":{},"controllers/PlacesController.html":{},"injectables/PlacesService.html":{},"entities/Role.html":{},"entities/User.html":{},"classes/UserDto.html":{},"injectables/UserFromTokenPipe.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["user.admin",{"_index":34,"title":{},"body":{"entities/Admin.html":{}}}],["user.comments",{"_index":293,"title":{},"body":{"entities/Comment.html":{}}}],["user.dto",{"_index":166,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/MailingService.html":{},"classes/UpdateUserDto.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":512,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:11",{"_index":514,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:14",{"_index":521,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:5",{"_index":517,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:8",{"_index":520,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.email",{"_index":269,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.id",{"_index":270,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.images",{"_index":586,"title":{},"body":{"entities/Image.html":{}}}],["user.isemailconfirmed",{"_index":260,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.likes",{"_index":843,"title":{},"body":{"entities/Like.html":{}}}],["user.password",{"_index":265,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.places",{"_index":933,"title":{},"body":{"entities/Place.html":{}}}],["user.roles",{"_index":272,"title":{},"body":{"injectables/AuthService.html":{},"entities/Role.html":{},"injectables/UsersService.html":{}}}],["user_firstname",{"_index":903,"title":{},"body":{"injectables/MailingService.html":{}}}],["userdata",{"_index":1840,"title":{},"body":{"controllers/UsersController.html":{}}}],["userdata(@tokenpayload(userfromtokenpipe",{"_index":1860,"title":{},"body":{"controllers/UsersController.html":{}}}],["userdata(user",{"_index":1848,"title":{},"body":{"controllers/UsersController.html":{}}}],["userdto",{"_index":881,"title":{"classes/UserDto.html":{}},"body":{"injectables/MailingService.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["userdto(u",{"_index":1858,"title":{},"body":{"controllers/UsersController.html":{}}}],["userdto(user",{"_index":1861,"title":{},"body":{"controllers/UsersController.html":{}}}],["userdto.email",{"_index":896,"title":{},"body":{"injectables/MailingService.html":{}}}],["userdto.firstname",{"_index":904,"title":{},"body":{"injectables/MailingService.html":{}}}],["userdto})@useinterceptors(classserializerinterceptor)@auth()@get('/userdata",{"_index":1850,"title":{},"body":{"controllers/UsersController.html":{}}}],["userfromtokenpipe",{"_index":199,"title":{"injectables/UserFromTokenPipe.html":{}},"body":{"modules/AuthModule.html":{},"controllers/PlacesController.html":{},"injectables/UserFromTokenPipe.html":{},"controllers/UsersController.html":{},"coverage.html":{},"overview.html":{}}}],["userid",{"_index":354,"title":{},"body":{"injectables/CommentsService.html":{},"injectables/PlacesService.html":{},"injectables/UsersService.html":{}}}],["useriscommentowner",{"_index":1299,"title":{},"body":{"controllers/PlacesController.html":{}}}],["userisplaceauthor",{"_index":1284,"title":{},"body":{"controllers/PlacesController.html":{}}}],["username",{"_index":326,"title":{},"body":{"classes/CommentDto.html":{},"modules/DatabaseModule.html":{}}}],["users",{"_index":252,"title":{},"body":{"injectables/AuthService.html":{},"entities/Role.html":{},"controllers/UsersController.html":{}}}],["users'})@apiokresponse({description",{"_index":1845,"title":{},"body":{"controllers/UsersController.html":{}}}],["users.controller",{"_index":1873,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.map((u",{"_index":1857,"title":{},"body":{"controllers/UsersController.html":{}}}],["users.service",{"_index":1852,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/dto/create",{"_index":165,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/MailingService.html":{}}}],["users/entities/user.entity",{"_index":42,"title":{},"body":{"entities/Admin.html":{},"injectables/AuthService.html":{},"entities/Comment.html":{},"classes/CommentDto.html":{},"injectables/CommentsService.html":{},"entities/Image.html":{},"injectables/ImagesService.html":{},"entities/Like.html":{},"entities/Place.html":{},"controllers/PlacesController.html":{},"injectables/PlacesService.html":{},"entities/Role.html":{}}}],["users/users.module",{"_index":119,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["users/users.service",{"_index":237,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserFromTokenPipe.html":{}}}],["userscontroller",{"_index":1837,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":99,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersrepository",{"_index":1880,"title":{},"body":{"injectables/UsersService.html":{}}}],["usersservice",{"_index":225,"title":{"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/UserFromTokenPipe.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["v.url",{"_index":1102,"title":{},"body":{"classes/PlaceDto.html":{}}}],["v2",{"_index":1720,"title":{},"body":{"injectables/TranslationsService.html":{}}}],["v2.translate",{"_index":1718,"title":{},"body":{"injectables/TranslationsService.html":{}}}],["validateif",{"_index":486,"title":{},"body":{"classes/CreatePlaceTypeDto.html":{}}}],["validateif((object",{"_index":489,"title":{},"body":{"classes/CreatePlaceTypeDto.html":{}}}],["validateplacecategories",{"_index":1322,"title":{},"body":{"injectables/PlacesService.html":{}}}],["validateplacecategories(dto",{"_index":1351,"title":{},"body":{"injectables/PlacesService.html":{}}}],["validateplacetype",{"_index":1323,"title":{},"body":{"injectables/PlacesService.html":{}}}],["validateplacetype(dto",{"_index":1353,"title":{},"body":{"injectables/PlacesService.html":{}}}],["validateslugexists",{"_index":1324,"title":{},"body":{"injectables/PlacesService.html":{}}}],["validateslugexists(slug",{"_index":1355,"title":{},"body":{"injectables/PlacesService.html":{}}}],["validateuser",{"_index":223,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(logindto",{"_index":235,"title":{},"body":{"injectables/AuthService.html":{}}}],["validation",{"_index":1124,"title":{},"body":{"controllers/PlaceTypesController.html":{},"classes/ValidationExceptionDto.html":{},"classes/ValidationMessageDto.html":{}}}],["validationerror",{"_index":2068,"title":{},"body":{"miscellaneous/variables.html":{}}}],["validationerrors",{"_index":2067,"title":{},"body":{"miscellaneous/variables.html":{}}}],["validationerrors.map((error",{"_index":2069,"title":{},"body":{"miscellaneous/variables.html":{}}}],["validationexceptiondto",{"_index":1137,"title":{"classes/ValidationExceptionDto.html":{}},"body":{"controllers/PlaceTypesController.html":{},"classes/ValidationExceptionDto.html":{},"classes/ValidationMessageDto.html":{},"coverage.html":{}}}],["validationexceptiondto})@apiquery({name",{"_index":1126,"title":{},"body":{"controllers/PlaceTypesController.html":{}}}],["validationmessagedto",{"_index":1908,"title":{"classes/ValidationMessageDto.html":{}},"body":{"classes/ValidationExceptionDto.html":{},"classes/ValidationMessageDto.html":{},"coverage.html":{}}}],["validator",{"_index":487,"title":{},"body":{"classes/CreatePlaceTypeDto.html":{},"dependencies.html":{}}}],["value",{"_index":478,"title":{},"body":{"classes/CreatePlaceTypeDto.html":{},"classes/PlaceCategoryDto.html":{},"classes/PlaceDto.html":{},"classes/PlaceTypeDto.html":{},"injectables/PlacesService.html":{},"classes/SearchPlaceDto.html":{},"injectables/StorageService.html":{},"injectables/TranslationsService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["value.map((category",{"_index":1098,"title":{},"body":{"classes/PlaceDto.html":{},"classes/SearchPlaceDto.html":{}}}],["value.text",{"_index":1055,"title":{},"body":{"classes/PlaceCategoryDto.html":{},"classes/PlaceTypeDto.html":{}}}],["value?.filter((v",{"_index":1100,"title":{},"body":{"classes/PlaceDto.html":{}}}],["value?.text",{"_index":1096,"title":{},"body":{"classes/PlaceDto.html":{},"classes/PlaceTypeDto.html":{},"classes/SearchPlaceDto.html":{}}}],["value?.url",{"_index":1059,"title":{},"body":{"classes/PlaceCategoryDto.html":{},"classes/PlaceTypeDto.html":{},"classes/SearchPlaceDto.html":{}}}],["varchar",{"_index":19,"title":{},"body":{"entities/Admin.html":{},"entities/Comment.html":{},"entities/Language.html":{},"entities/Role.html":{},"entities/Translation.html":{},"entities/User.html":{}}}],["variable",{"_index":1926,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":2053,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":2046,"title":{},"body":{"properties.html":{}}}],["views",{"_index":1089,"title":{},"body":{"classes/PlaceDto.html":{},"classes/SearchPlaceDto.html":{}}}],["viewscount",{"_index":924,"title":{},"body":{"entities/Place.html":{},"classes/PlaceDto.html":{},"injectables/PlacesService.html":{},"classes/SearchPlaceDto.html":{}}}],["watch",{"_index":2002,"title":{},"body":{"index.html":{}}}],["website",{"_index":454,"title":{},"body":{"classes/CreatePlaceDto.html":{},"entities/Place.html":{},"classes/PlaceDto.html":{},"injectables/PlacesService.html":{},"classes/SearchPlaceDto.html":{},"classes/UpdatePlaceDto.html":{},"index.html":{}}}],["where('id",{"_index":1899,"title":{},"body":{"injectables/UsersService.html":{}}}],["where('lang.id",{"_index":1749,"title":{},"body":{"injectables/TranslationsService.html":{}}}],["where('pc.id",{"_index":1039,"title":{},"body":{"injectables/PlaceCategoriesService.html":{}}}],["where('place.slug",{"_index":1439,"title":{},"body":{"injectables/PlacesService.html":{}}}],["where('pt.id",{"_index":1178,"title":{},"body":{"injectables/PlaceTypesService.html":{}}}],["working",{"_index":72,"title":{},"body":{"controllers/AppController.html":{}}}],["working'})@get('status",{"_index":60,"title":{},"body":{"controllers/AppController.html":{}}}],["yes",{"_index":363,"title":{},"body":{"injectables/CommentsService.html":{},"injectables/PlacesService.html":{},"injectables/TranslationsService.html":{}}}],["you'd",{"_index":2022,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":100,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommentsModule.html":{},"modules/ImagesModule.html":{},"modules/LanguagesModule.html":{},"modules/MailingModule.html":{},"modules/PlaceCategoriesModule.html":{},"modules/PlaceTypesModule.html":{},"modules/PlacesModule.html":{},"modules/RolesModule.html":{},"modules/StorageModule.html":{},"modules/TranslationsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"entities/Admin.html":{"url":"entities/Admin.html","title":"entity - Admin","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Admin\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/entities/admin.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                address\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                phone\n                            \n                            \n                                    \n                                places\n                            \n                            \n                                    \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 50})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/admin.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/admin.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 20})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/admin.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        places\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Place[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, place => place.admin)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/admin.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, user => user.admin)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/admin.entity.ts:20\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  Column,\n  OneToOne,\n  OneToMany,\n  PrimaryGeneratedColumn,\n  ManyToMany,\n} from 'typeorm';\n\nimport { User } from '../users/entities/user.entity';\nimport { Place } from '../places/entities/place.entity';\nimport { Role } from '../roles/entities/role.entity';\n\n@Entity()\nexport class Admin {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @OneToOne(() => User, (user) => user.admin)\n  user: User;\n\n  @Column({ type: 'varchar', length: 50 })\n  address: string;\n\n  @Column({ type: 'varchar', length: 20 })\n  phone: string;\n\n  @OneToMany(() => Place, (place) => place.admin)\n  places: Place[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                getStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        getStatus\n                        \n                    \n                \n            \n            \n                \n                    \n                    getStatus()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Check server status'})@ApiOkResponse({description: 'Server is working'})@Get('status')\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { ApiOkResponse, ApiOperation, ApiTags } from '@nestjs/swagger';\n\n@ApiTags('System')\n@Controller()\nexport class AppController {\n  @ApiOperation({ summary: 'Check server status' })\n  @ApiOkResponse({\n    description: 'Server is working',\n  })\n  @Get('status')\n  getStatus(): string {\n    return 'OK';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nCommentsModule\n\nCommentsModule\n\nAppModule -->\n\nCommentsModule->AppModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nImagesModule\n\nImagesModule\n\nAppModule -->\n\nImagesModule->AppModule\n\n\n\n\n\nLanguagesModule\n\nLanguagesModule\n\nAppModule -->\n\nLanguagesModule->AppModule\n\n\n\n\n\nMailingModule\n\nMailingModule\n\nAppModule -->\n\nMailingModule->AppModule\n\n\n\n\n\nPlaceCategoriesModule\n\nPlaceCategoriesModule\n\nAppModule -->\n\nPlaceCategoriesModule->AppModule\n\n\n\n\n\nPlaceTypesModule\n\nPlaceTypesModule\n\nAppModule -->\n\nPlaceTypesModule->AppModule\n\n\n\n\n\nPlacesModule\n\nPlacesModule\n\nAppModule -->\n\nPlacesModule->AppModule\n\n\n\n\n\nRolesModule\n\nRolesModule\n\nAppModule -->\n\nRolesModule->AppModule\n\n\n\n\n\nStorageModule\n\nStorageModule\n\nAppModule -->\n\nStorageModule->AppModule\n\n\n\n\n\nTranslationsModule\n\nTranslationsModule\n\nAppModule -->\n\nTranslationsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            CommentsModule\n                        \n                        \n                            DatabaseModule\n                        \n                        \n                            ImagesModule\n                        \n                        \n                            LanguagesModule\n                        \n                        \n                            MailingModule\n                        \n                        \n                            PlaceCategoriesModule\n                        \n                        \n                            PlaceTypesModule\n                        \n                        \n                            PlacesModule\n                        \n                        \n                            RolesModule\n                        \n                        \n                            StorageModule\n                        \n                        \n                            TranslationsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { PlacesModule } from './places/places.module';\nimport { ConfigModule } from '@nestjs/config';\nimport configuration from './config/configuration';\nimport { DatabaseModule } from './database/database.module';\nimport { PlaceTypesModule } from './place-types/place-types.module';\nimport { LanguagesModule } from './languages/languages.module';\nimport { TranslationsModule } from './translations/translations.module';\nimport { StorageModule } from './storage/storage.module';\nimport { ImagesModule } from './images/images.module';\nimport { AuthModule } from './auth/auth.module';\nimport { UsersModule } from './users/users.module';\nimport { RolesModule } from './roles/roles.module';\nimport { MailingModule } from './mailing/mailing.module';\nimport { PlaceCategoriesModule } from './place-categories/place-categories.module';\nimport { CommentsModule } from './comments/comments.module';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      load: [configuration],\n      isGlobal: true,\n    }),\n    PlacesModule,\n    DatabaseModule,\n    PlaceTypesModule,\n    LanguagesModule,\n    TranslationsModule,\n    StorageModule,\n    ImagesModule,\n    AuthModule,\n    UsersModule,\n    RolesModule,\n    MailingModule,\n    PlaceCategoriesModule,\n    CommentsModule,\n  ],\n  controllers: [AppController],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Register'})@ApiOkResponse({description: 'token response', type: AuthDto})@ApiUnauthorizedResponse({description: 'User already exists', type: UnauthorizedException})@ApiBody({type: CreateUserDto})@Post('/register')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(loginDto: LoginDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Login'})@ApiOkResponse({description: 'token response', type: AuthDto})@ApiUnauthorizedResponse({description: 'Invalid credentials', type: UnauthorizedException})@ApiBody({type: LoginDto})@Post('/login')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    loginDto\n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post, UnauthorizedException } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport {\n  ApiBody,\n  ApiOkResponse,\n  ApiOperation,\n  ApiTags,\n  ApiUnauthorizedResponse,\n} from '@nestjs/swagger';\nimport { CreateUserDto } from '../users/dto/create-user.dto';\nimport { AuthDto } from './dto/auth.dto';\nimport { LoginDto } from './dto/login.dto';\n\n@ApiTags('Authentication')\n@Controller('auth')\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n\n  @ApiOperation({ summary: 'Register' })\n  @ApiOkResponse({\n    description: 'token response',\n    type: AuthDto,\n  })\n  @ApiUnauthorizedResponse({\n    description: 'User already exists',\n    type: UnauthorizedException,\n  })\n  @ApiBody({\n    type: CreateUserDto,\n  })\n  @Post('/register')\n  async create(@Body() createUserDto: CreateUserDto) {\n    return await this.authService.register(createUserDto);\n  }\n\n  @ApiOperation({ summary: 'Login' })\n  @ApiOkResponse({\n    description: 'token response',\n    type: AuthDto,\n  })\n  @ApiUnauthorizedResponse({\n    description: 'Invalid credentials',\n    type: UnauthorizedException,\n  })\n  @ApiBody({\n    type: LoginDto,\n  })\n  @Post('/login')\n  async login(@Body() loginDto: LoginDto) {\n    const token = await this.authService.login(loginDto);\n    return new AuthDto(token);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthDto.html":{"url":"classes/AuthDto.html","title":"class - AuthDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/auth.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                token\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(token: string)\n                    \n                \n                        \n                            \n                                Defined in src/auth/dto/auth.dto.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        token\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'JWT Token', type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/auth.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nexport class AuthDto {\n  @ApiProperty({ description: 'JWT Token', type: String })\n  token: string;\n\n  constructor(token: string) {\n    this.token = token;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_exports\n\n\n\n\nMailingModule\n\nMailingModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nMailingModule->AuthModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nUsersModule \n\nUsersModule \n\nUsersModule  -->\n\nAuthModule->UsersModule \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nPayloadFromTokenPipe\n\nPayloadFromTokenPipe\n\nAuthModule -->\n\nPayloadFromTokenPipe->AuthModule\n\n\n\n\n\nUserFromTokenPipe\n\nUserFromTokenPipe\n\nAuthModule -->\n\nUserFromTokenPipe->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            PayloadFromTokenPipe\n                        \n                        \n                            UserFromTokenPipe\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            MailingModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Global, Module } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { AuthController } from './auth.controller';\nimport { UsersModule } from '../users/users.module';\nimport { JwtModule } from '@nestjs/jwt';\nimport { ConfigService } from '@nestjs/config';\nimport { IJwtConfig } from '../config/configuration';\nimport { UserFromTokenPipe } from './pipes/user-from-token.pipe';\nimport { MailingModule } from '../mailing/mailing.module';\nimport { PayloadFromTokenPipe } from './pipes/payload-from-token.pipe';\n\n@Global()\n@Module({\n  imports: [\n    UsersModule,\n    MailingModule,\n    JwtModule.registerAsync({\n      useFactory: (configService: ConfigService) => ({\n        secret: configService.get('jwt')?.secret,\n        global: true,\n        signOptions: {\n          expiresIn: configService.get('jwt')?.expirationTime,\n        },\n      }),\n      inject: [ConfigService],\n    }),\n  ],\n  controllers: [AuthController],\n  providers: [AuthService, UserFromTokenPipe, PayloadFromTokenPipe],\n  exports: [AuthService, JwtModule, UserFromTokenPipe, UsersModule],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                generateToken\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                register\n                            \n                            \n                                    Private\n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, jwtService: JwtService, mailingService: MailingService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        mailingService\n                                                  \n                                                        \n                                                                        MailingService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        generateToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateToken(user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(loginDto: LoginDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    loginDto\n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(dto: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUser(loginDto: LoginDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    loginDto\n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { CreateUserDto } from '../users/dto/create-user.dto';\nimport { UsersService } from '../users/users.service';\nimport { JwtService } from '@nestjs/jwt';\nimport * as bcrypt from 'bcrypt';\nimport { User } from '../users/entities/user.entity';\nimport { LoginDto } from './dto/login.dto';\nimport { TokenPayloadDto } from './dto/token-payload.dto';\nimport { MailingService } from '../mailing/mailing.service';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    private readonly usersService: UsersService,\n    private readonly jwtService: JwtService,\n    private readonly mailingService: MailingService,\n  ) {}\n\n  async register(dto: CreateUserDto) {\n    const alreadyExists = await this.usersService.getUserByEmail(dto.email);\n    if (alreadyExists)\n      throw new UnauthorizedException({\n        message: 'User with this email already exists',\n      });\n    const hashPassword = await bcrypt.hash(dto.password, 12);\n    dto.password = hashPassword;\n    const users = await this.usersService.create(dto);\n    //await this.mailingService.sendEmailConfirm(dto, 'token');\n    return this.generateToken(users);\n  }\n\n  async login(loginDto: LoginDto) {\n    const user = await this.validateUser(loginDto);\n    return this.generateToken(user);\n  }\n\n  private async validateUser(loginDto: LoginDto) {\n    const user = await this.usersService.getUserByEmail(loginDto.email);\n    if (!user)\n      throw new UnauthorizedException({\n        message: 'No users with this email found',\n      });\n    if (!user.isEmailConfirmed)\n      throw new UnauthorizedException({\n        message: 'Email is not confirmed',\n      });\n    const passwordEquals = await bcrypt.compare(\n      loginDto.password,\n      user.password,\n    );\n    if (!passwordEquals)\n      throw new UnauthorizedException({ message: 'Incorrect password' });\n    return user;\n  }\n\n  private generateToken(user: User) {\n    const payload: TokenPayloadDto = {\n      email: user.email,\n      id: user.id,\n      roles: user.roles,\n    };\n    return this.jwtService.sign(payload);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Comment.html":{"url":"entities/Comment.html","title":"entity - Comment","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Comment\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/comments/entities/comment.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                canManage\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                place\n                            \n                            \n                                    \n                                text\n                            \n                            \n                                    \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        canManage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/comments/entities/comment.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: () => CURRENT_TIMESTAMP})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/comments/entities/comment.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/comments/entities/comment.entity.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        place\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Place\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, place => place.comments, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/comments/entities/comment.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        text\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 1000})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/comments/entities/comment.entity.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.comments)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/comments/entities/comment.entity.ts:17\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Entity, PrimaryGeneratedColumn, ManyToOne, Column } from 'typeorm';\nimport { Place } from '../../places/entities/place.entity';\nimport { User } from '../../users/entities/user.entity';\n\n@Entity()\nexport class Comment {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ type: 'varchar', length: 1000 })\n  text: string;\n\n  @Column({ default: () => 'CURRENT_TIMESTAMP' })\n  createdAt: Date;\n\n  @ManyToOne(() => User, (user) => user.comments)\n  user: User;\n\n  @ManyToOne(() => Place, (place) => place.comments, { onDelete: 'CASCADE' })\n  place: Place;\n\n  // calculated field\n  canManage: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CommentDto.html":{"url":"classes/CommentDto.html","title":"class - CommentDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CommentDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/comments/dto/comment.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                canManage\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                text\n                            \n                            \n                                    \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    authorUsername\n                                \n                                \n                                    authorId\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(partial: Partial)\n                    \n                \n                        \n                            \n                                Defined in src/comments/dto/comment.dto.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        partial\n                                                  \n                                                        \n                                                                        Partial\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        canManage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({title: 'Can manage', type: Boolean})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/comments/dto/comment.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({title: 'Created at', type: Date})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/comments/dto/comment.dto.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({title: 'Id', type: Number})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/comments/dto/comment.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        text\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({title: 'Text', type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/comments/dto/comment.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Partial\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/comments/dto/comment.dto.ts:30\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        authorUsername\n                    \n                \n\n                \n                    \n                        getauthorUsername()\n                    \n                \n                            \n                                \n                                    Defined in src/comments/dto/comment.dto.ts:16\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        authorId\n                    \n                \n\n                \n                    \n                        getauthorId()\n                    \n                \n                            \n                                \n                                    Defined in src/comments/dto/comment.dto.ts:22\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { Comment } from '../entities/comment.entity';\nimport { Exclude, Expose } from 'class-transformer';\nimport { User } from '../../users/entities/user.entity';\n\nexport class CommentDto {\n  constructor(partial: Partial) {\n    Object.assign(this, partial);\n  }\n\n  @ApiProperty({ title: 'Id', type: Number })\n  id: number;\n\n  @ApiProperty({ title: 'Author username', type: String })\n  @Expose()\n  get authorUsername(): string {\n    return `${this.user?.firstName} ${this.user?.lastName}`;\n  }\n\n  @ApiProperty({ title: 'Author id', type: Number })\n  @Expose()\n  get authorId(): number | null {\n    return this.user?.id || null;\n  }\n\n  @ApiProperty({ title: 'Can manage', type: Boolean })\n  canManage: boolean;\n\n  @Exclude()\n  user: Partial;\n\n  @ApiProperty({ title: 'Text', type: String })\n  text: string;\n\n  @ApiProperty({ title: 'Created at', type: Date })\n  createdAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CommentsModule.html":{"url":"modules/CommentsModule.html","title":"module - CommentsModule","body":"\n                   \n\n\n\n\n    Modules\n    CommentsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CommentsModule\n\n\n\ncluster_CommentsModule_providers\n\n\n\ncluster_CommentsModule_exports\n\n\n\n\nCommentsService \n\nCommentsService \n\n\n\nCommentsModule\n\nCommentsModule\n\nCommentsService  -->\n\nCommentsModule->CommentsService \n\n\n\n\n\nCommentsService\n\nCommentsService\n\nCommentsModule -->\n\nCommentsService->CommentsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/comments/comments.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CommentsService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CommentsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { CommentsService } from './comments.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Comment } from './entities/comment.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Comment])],\n  providers: [CommentsService],\n  exports: [CommentsService],\n})\nexport class CommentsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CommentsService.html":{"url":"injectables/CommentsService.html","title":"injectable - CommentsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CommentsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/comments/comments.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                checkCanManage\n                            \n                            \n                                    Async\n                                createPlaceComment\n                            \n                            \n                                    Async\n                                deleteComment\n                            \n                            \n                                    Async\n                                findAllPlaceComments\n                            \n                            \n                                    Private\n                                    Async\n                                findOnePlaceComment\n                            \n                            \n                                    Async\n                                updatePlaceComment\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(commentsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/comments/comments.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        commentsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        checkCanManage\n                        \n                    \n                \n            \n            \n                \n                    \n                    checkCanManage(userId: number, commentId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/comments/comments.service.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    commentId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createPlaceComment\n                        \n                    \n                \n            \n            \n                \n                    \n                    createPlaceComment(placeId: number, userId: number, createCommentDto: CreateCommentDto)\n                \n            \n\n\n            \n                \n                    Defined in src/comments/comments.service.ts:78\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    placeId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createCommentDto\n                                    \n                                                CreateCommentDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteComment\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteComment(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/comments/comments.service.ts:106\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllPlaceComments\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllPlaceComments(placeId: number, userId?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/comments/comments.service.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    placeId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        findOnePlaceComment\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOnePlaceComment(commentId: number, canManage: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/comments/comments.service.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    commentId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    canManage\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updatePlaceComment\n                        \n                    \n                \n            \n            \n                \n                    \n                    updatePlaceComment(commentId: number, updateCommentDto: UpdateCommentDto)\n                \n            \n\n\n            \n                \n                    Defined in src/comments/comments.service.ts:93\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    commentId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateCommentDto\n                                    \n                                                UpdateCommentDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Injectable,\n  NotFoundException,\n} from '@nestjs/common';\nimport { Equal, Repository } from 'typeorm';\nimport { Comment } from './entities/comment.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { CreateCommentDto } from './dto/create-comment.dto';\nimport { Place } from '../places/entities/place.entity';\nimport { User } from '../users/entities/user.entity';\nimport { UpdateCommentDto } from './dto/update-comment.dto';\n\n@Injectable()\nexport class CommentsService {\n  constructor(\n    @InjectRepository(Comment)\n    private readonly commentsRepository: Repository,\n  ) {}\n\n  async checkCanManage(userId: number, commentId: number) {\n    // check if user is owner of comment\n    return await this.commentsRepository.exist({\n      where: {\n        user: {\n          id: Equal(userId),\n        },\n        id: Equal(commentId),\n      },\n    });\n  }\n\n  async findAllPlaceComments(placeId: number, userId?: number) {\n    const comments = await this.commentsRepository.find({\n      relations: {\n        user: true,\n      },\n      where: {\n        place: {\n          id: Equal(placeId),\n        },\n      },\n      select: {\n        user: {\n          id: true,\n          firstName: true,\n          lastName: true,\n        },\n      },\n    });\n    return comments.map((c) => {\n      c.canManage = c.user.id === userId;\n      return c;\n    });\n  }\n\n  private async findOnePlaceComment(commentId: number, canManage: boolean) {\n    const comment = await this.commentsRepository.findOne({\n      relations: {\n        user: true,\n      },\n      where: {\n        id: Equal(commentId),\n      },\n      select: {\n        user: {\n          id: true,\n          firstName: true,\n          lastName: true,\n        },\n      },\n    });\n    if (!comment)\n      throw new NotFoundException({ message: 'Comment was not found' });\n    return { ...comment, canManage: canManage };\n  }\n\n  async createPlaceComment(\n    placeId: number,\n    userId: number,\n    createCommentDto: CreateCommentDto,\n  ) {\n    const comment = new Comment();\n    comment.place = new Place();\n    comment.place.id = placeId;\n    comment.user = new User();\n    comment.user.id = userId;\n    comment.text = createCommentDto.text;\n    const saved = await this.commentsRepository.save(comment);\n    return this.findOnePlaceComment(saved.id, true);\n  }\n\n  async updatePlaceComment(\n    commentId: number,\n    updateCommentDto: UpdateCommentDto,\n  ) {\n    const comment = await this.commentsRepository.findOne({\n      where: { id: Equal(commentId) },\n    });\n    if (!comment) throw new NotFoundException({ message: 'Comment not found' });\n    comment.text = updateCommentDto.text;\n    const saved = await this.commentsRepository.save(comment);\n    return this.findOnePlaceComment(saved.id, true);\n  }\n\n  async deleteComment(id: number) {\n    const result = await this.commentsRepository.delete({ id: Equal(id) });\n    if (typeof result.affected === 'number' && result.affected > 0) return true;\n    throw new BadRequestException({ message: 'Comment not found' });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateCommentDto.html":{"url":"classes/CreateCommentDto.html","title":"class - CreateCommentDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateCommentDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/comments/dto/create-comment.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                text\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        text\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({title: 'Text', type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/comments/dto/create-comment.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nexport class CreateCommentDto {\n  @ApiProperty({ title: 'Text', type: String })\n  text: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateFileDto.html":{"url":"classes/CreateFileDto.html","title":"class - CreateFileDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateFileDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/storage/dto/create-file.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                file\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        file\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Express.Multer.File\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, format: 'binary', required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/storage/dto/create-file.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nexport class CreateFileDto {\n  @ApiProperty({ type: String, format: 'binary', required: true })\n  file: Express.Multer.File;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateImageDto.html":{"url":"classes/CreateImageDto.html","title":"class - CreateImageDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateImageDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/images/dto/create-image.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        CreateFileDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                file\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        file\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Express.Multer.File\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, format: 'binary', required: true})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         CreateFileDto\n\n                            \n                        \n                    \n                        \n                                Defined in         CreateFileDto:5\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CreateFileDto } from '../../storage/dto/create-file.dto';\n\nexport class CreateImageDto extends CreateFileDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateLanguageDto.html":{"url":"classes/CreateLanguageDto.html","title":"class - CreateLanguageDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateLanguageDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/languages/dto/create-language.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                code\n                            \n                            \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({title: 'Language code', type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/languages/dto/create-language.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({title: 'Language title', type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/languages/dto/create-language.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nexport class CreateLanguageDto {\n  @ApiProperty({ title: 'Language title', type: String })\n  title: string;\n\n  @ApiProperty({ title: 'Language code', type: String })\n  code: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePlaceCategoryDto.html":{"url":"classes/CreatePlaceCategoryDto.html","title":"class - CreatePlaceCategoryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePlaceCategoryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/place-categories/dto/create-place-category.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                imageId\n                            \n                            \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        imageId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({title: 'Place category image', type: Number, required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/place-categories/dto/create-place-category.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({title: 'Place category title', type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/place-categories/dto/create-place-category.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nexport class CreatePlaceCategoryDto {\n  @ApiProperty({ title: 'Place category title', type: String })\n  title: string;\n\n  @ApiProperty({ title: 'Place category image', type: Number, required: false })\n  imageId?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePlaceDto.html":{"url":"classes/CreatePlaceDto.html","title":"class - CreatePlaceDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePlaceDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/places/dto/create-place.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                address\n                            \n                            \n                                    \n                                categoriesIds\n                            \n                            \n                                    \n                                coordinates\n                            \n                            \n                                    \n                                description\n                            \n                            \n                                    \n                                imagesIds\n                            \n                            \n                                    \n                                placeTypeId\n                            \n                            \n                                    \n                                slug\n                            \n                            \n                                    \n                                title\n                            \n                            \n                                    \n                                    Optional\n                                website\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'Place address'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/places/dto/create-place.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        categoriesIds\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: Number, description: 'Place categories ids', isArray: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/places/dto/create-place.dto.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        coordinates\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'Place coordinates [lat;lng]'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/places/dto/create-place.dto.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'Place description'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/places/dto/create-place.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        imagesIds\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: Number, description: 'Place images ids', isArray: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/places/dto/create-place.dto.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        placeTypeId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: Number, description: 'Place type id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/places/dto/create-place.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'Place url path'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/places/dto/create-place.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'Place title'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/places/dto/create-place.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        website\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'Place website url', required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/places/dto/create-place.dto.ts:41\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nexport class CreatePlaceDto {\n  @ApiProperty({ type: String, description: 'Place url path' })\n  slug: string;\n\n  @ApiProperty({ type: String, description: 'Place title' })\n  title: string;\n\n  @ApiProperty({ type: String, description: 'Place description' })\n  description: string;\n\n  @ApiProperty({ type: String, description: 'Place address' })\n  address: string;\n\n  @ApiProperty({ type: Number, description: 'Place type id' })\n  placeTypeId: number;\n\n  @ApiProperty({\n    type: Number,\n    description: 'Place categories ids',\n    isArray: true,\n  })\n  categoriesIds: number[];\n\n  @ApiProperty({\n    type: Number,\n    description: 'Place images ids',\n    isArray: true,\n  })\n  imagesIds: number[];\n\n  @ApiProperty({ type: String, description: 'Place coordinates [lat;lng]' })\n  coordinates: string;\n\n  @ApiProperty({\n    type: String,\n    description: 'Place website url',\n    required: false,\n  })\n  website?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePlaceTypeDto.html":{"url":"classes/CreatePlaceTypeDto.html","title":"class - CreatePlaceTypeDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePlaceTypeDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/place-types/dto/create-place-type.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                commercial\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                imageId\n                            \n                            \n                                    \n                                    \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        commercial\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({title: 'Place type is commercial', type: Boolean, default: false})@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/place-types/dto/create-place-type.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        imageId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({title: 'Place type image', type: Number, required: false})@IsNumber()@ValidateIf((object, value) => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/place-types/dto/create-place-type.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({title: 'Place type title', type: String})@IsString()@MaxLength(100)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/place-types/dto/create-place-type.dto.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsBoolean,\n  IsNumber,\n  IsString,\n  MaxLength,\n  ValidateIf,\n} from 'class-validator';\n\nexport class CreatePlaceTypeDto {\n  @ApiProperty({ title: 'Place type title', type: String })\n  @IsString()\n  @MaxLength(100)\n  title: string;\n\n  @ApiProperty({\n    title: 'Place type is commercial',\n    type: Boolean,\n    default: false,\n  })\n  @IsBoolean()\n  commercial: boolean;\n\n  @ApiProperty({ title: 'Place type image', type: Number, required: false })\n  @IsNumber()\n  @ValidateIf((object, value) => Boolean(value))\n  imageId?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateRoleDto.html":{"url":"classes/CreateRoleDto.html","title":"class - CreateRoleDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateRoleDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/roles/dto/create-role.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         RoleNamesEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({title: 'Role name', default: undefined, enum: RoleNamesEnum})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/roles/dto/create-role.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { RoleNamesEnum } from '../enums/role-names.enum';\n\nexport class CreateRoleDto {\n  @ApiProperty({\n    title: 'Role name',\n    default: RoleNamesEnum.USER,\n    enum: RoleNamesEnum,\n  })\n  name: RoleNamesEnum;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTranslationDto.html":{"url":"classes/CreateTranslationDto.html","title":"class - CreateTranslationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTranslationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/translations/dto/create-translation.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                langId\n                            \n                            \n                                    \n                                original\n                            \n                            \n                                    \n                                text\n                            \n                            \n                                    \n                                textId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        langId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({title: 'Language id', type: Number})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/translations/dto/create-translation.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        original\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({title: 'Original language', type: Boolean, default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/translations/dto/create-translation.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        text\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({title: 'Text', type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/translations/dto/create-translation.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        textId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({title: 'Text id', type: Number})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/translations/dto/create-translation.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nexport class CreateTranslationDto {\n  @ApiProperty({ title: 'Text id', type: Number })\n  textId: number;\n\n  @ApiProperty({ title: 'Text', type: String })\n  text: string;\n\n  @ApiProperty({\n    title: 'Original language',\n    type: Boolean,\n    default: false,\n  })\n  original: boolean;\n\n  @ApiProperty({ title: 'Language id', type: Number })\n  langId: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                firstName\n                            \n                            \n                                    \n                                lastName\n                            \n                            \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({title: 'Email', type: String, default: 'johndoe@gmail.com'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({title: 'First Name', type: String, default: 'John'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({title: 'Last Name', type: String, default: 'Doe'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({title: 'Password', type: String, default: 'password'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nexport class CreateUserDto {\n  @ApiProperty({ title: 'First Name', type: String, default: 'John' })\n  firstName: string;\n\n  @ApiProperty({ title: 'Last Name', type: String, default: 'Doe' })\n  lastName: string;\n\n  @ApiProperty({ title: 'Email', type: String, default: 'johndoe@gmail.com' })\n  email: string;\n\n  @ApiProperty({ title: 'Password', type: String, default: 'password' })\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DatabaseModule.html":{"url":"modules/DatabaseModule.html","title":"module - DatabaseModule","body":"\n                   \n\n\n\n\n    Modules\n    DatabaseModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/database/database.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { IDatabaseConfig } from '../config/configuration';\n\n@Module({\n  imports: [\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      useFactory: (configService: ConfigService) => ({\n        type: 'mssql',\n        host: configService.get('database')?.host,\n        username: configService.get('database')?.user,\n        password: configService.get('database')?.password,\n        database: configService.get('database')?.name,\n        entities: [__dirname + '/../**/*.entity{.ts,.js}'],\n        synchronize: true,\n        autoLoadEntities: true,\n        extra: {\n          trustServerCertificate: true,\n        },\n      }),\n      inject: [ConfigService],\n    }),\n  ],\n})\nexport class DatabaseModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FileDto.html":{"url":"classes/FileDto.html","title":"class - FileDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FileDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/storage/dto/file.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                publicUrl\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        publicUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/storage/dto/file.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nexport class FileDto {\n  @ApiProperty({ type: String })\n  publicUrl: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IDatabaseConfig.html":{"url":"interfaces/IDatabaseConfig.html","title":"interface - IDatabaseConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IDatabaseConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/config/configuration.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            host\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            password\n                                        \n                                \n                                \n                                        \n                                            user\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        host\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        host:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        password\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        password:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        user\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        user:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export default () => {\n  return {\n    port: parseInt(process.env.PORT ?? '', 10) || 3000,\n    googleCloud: {\n      projectId: process.env['GOOGLE_PROJECT_ID'],\n      apiKey: process.env['GOOGLE_API_KEY'],\n      bucketName: process.env['GOOGLE_BUCKET_NAME'],\n      keyFilename: process.env['GOOGLE_CLOUD_KEY_NAME'],\n    },\n    database: {\n      host: process.env['DATABASE_HOST'],\n      name: process.env['DATABASE_NAME'],\n      user: process.env['DATABASE_USER'],\n      password: process.env['DATABASE_PASSWORD'],\n    },\n    jwt: {\n      secret: process.env['JWT_SECRET'],\n      expirationTime: process.env['JWT_EXPIRATION'],\n    },\n    emailConfig: {\n      email: process.env['EMAIL'],\n      emailPw: process.env['EMAIL_PW'],\n    },\n  };\n};\n\nexport interface IGoogleCloudConfig {\n  keyFilename: string;\n  bucketName: string;\n  projectId: string;\n  apiKey: string;\n}\n\nexport interface IDatabaseConfig {\n  host: string;\n  name: string;\n  user: string;\n  password: string;\n}\n\nexport interface IJwtConfig {\n  secret: string;\n  expirationTime: string;\n}\n\nexport interface IMailerConfig {\n  email: string;\n  emailPw: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IGoogleCloudConfig.html":{"url":"interfaces/IGoogleCloudConfig.html","title":"interface - IGoogleCloudConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IGoogleCloudConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/config/configuration.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            apiKey\n                                        \n                                \n                                \n                                        \n                                            bucketName\n                                        \n                                \n                                \n                                        \n                                            keyFilename\n                                        \n                                \n                                \n                                        \n                                            projectId\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        apiKey\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        apiKey:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        bucketName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        bucketName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        keyFilename\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        keyFilename:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        projectId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        projectId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export default () => {\n  return {\n    port: parseInt(process.env.PORT ?? '', 10) || 3000,\n    googleCloud: {\n      projectId: process.env['GOOGLE_PROJECT_ID'],\n      apiKey: process.env['GOOGLE_API_KEY'],\n      bucketName: process.env['GOOGLE_BUCKET_NAME'],\n      keyFilename: process.env['GOOGLE_CLOUD_KEY_NAME'],\n    },\n    database: {\n      host: process.env['DATABASE_HOST'],\n      name: process.env['DATABASE_NAME'],\n      user: process.env['DATABASE_USER'],\n      password: process.env['DATABASE_PASSWORD'],\n    },\n    jwt: {\n      secret: process.env['JWT_SECRET'],\n      expirationTime: process.env['JWT_EXPIRATION'],\n    },\n    emailConfig: {\n      email: process.env['EMAIL'],\n      emailPw: process.env['EMAIL_PW'],\n    },\n  };\n};\n\nexport interface IGoogleCloudConfig {\n  keyFilename: string;\n  bucketName: string;\n  projectId: string;\n  apiKey: string;\n}\n\nexport interface IDatabaseConfig {\n  host: string;\n  name: string;\n  user: string;\n  password: string;\n}\n\nexport interface IJwtConfig {\n  secret: string;\n  expirationTime: string;\n}\n\nexport interface IMailerConfig {\n  email: string;\n  emailPw: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IJwtConfig.html":{"url":"interfaces/IJwtConfig.html","title":"interface - IJwtConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IJwtConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/config/configuration.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            expirationTime\n                                        \n                                \n                                \n                                        \n                                            secret\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        expirationTime\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        expirationTime:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        secret\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        secret:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export default () => {\n  return {\n    port: parseInt(process.env.PORT ?? '', 10) || 3000,\n    googleCloud: {\n      projectId: process.env['GOOGLE_PROJECT_ID'],\n      apiKey: process.env['GOOGLE_API_KEY'],\n      bucketName: process.env['GOOGLE_BUCKET_NAME'],\n      keyFilename: process.env['GOOGLE_CLOUD_KEY_NAME'],\n    },\n    database: {\n      host: process.env['DATABASE_HOST'],\n      name: process.env['DATABASE_NAME'],\n      user: process.env['DATABASE_USER'],\n      password: process.env['DATABASE_PASSWORD'],\n    },\n    jwt: {\n      secret: process.env['JWT_SECRET'],\n      expirationTime: process.env['JWT_EXPIRATION'],\n    },\n    emailConfig: {\n      email: process.env['EMAIL'],\n      emailPw: process.env['EMAIL_PW'],\n    },\n  };\n};\n\nexport interface IGoogleCloudConfig {\n  keyFilename: string;\n  bucketName: string;\n  projectId: string;\n  apiKey: string;\n}\n\nexport interface IDatabaseConfig {\n  host: string;\n  name: string;\n  user: string;\n  password: string;\n}\n\nexport interface IJwtConfig {\n  secret: string;\n  expirationTime: string;\n}\n\nexport interface IMailerConfig {\n  email: string;\n  emailPw: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IMailerConfig.html":{"url":"interfaces/IMailerConfig.html","title":"interface - IMailerConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IMailerConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/config/configuration.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            emailPw\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        emailPw\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        emailPw:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export default () => {\n  return {\n    port: parseInt(process.env.PORT ?? '', 10) || 3000,\n    googleCloud: {\n      projectId: process.env['GOOGLE_PROJECT_ID'],\n      apiKey: process.env['GOOGLE_API_KEY'],\n      bucketName: process.env['GOOGLE_BUCKET_NAME'],\n      keyFilename: process.env['GOOGLE_CLOUD_KEY_NAME'],\n    },\n    database: {\n      host: process.env['DATABASE_HOST'],\n      name: process.env['DATABASE_NAME'],\n      user: process.env['DATABASE_USER'],\n      password: process.env['DATABASE_PASSWORD'],\n    },\n    jwt: {\n      secret: process.env['JWT_SECRET'],\n      expirationTime: process.env['JWT_EXPIRATION'],\n    },\n    emailConfig: {\n      email: process.env['EMAIL'],\n      emailPw: process.env['EMAIL_PW'],\n    },\n  };\n};\n\nexport interface IGoogleCloudConfig {\n  keyFilename: string;\n  bucketName: string;\n  projectId: string;\n  apiKey: string;\n}\n\nexport interface IDatabaseConfig {\n  host: string;\n  name: string;\n  user: string;\n  password: string;\n}\n\nexport interface IJwtConfig {\n  secret: string;\n  expirationTime: string;\n}\n\nexport interface IMailerConfig {\n  email: string;\n  emailPw: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Image.html":{"url":"entities/Image.html","title":"entity - Image","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Image\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/images/entities/image.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                place\n                            \n                            \n                                    \n                                placeCategory\n                            \n                            \n                                    \n                                placeType\n                            \n                            \n                                    \n                                position\n                            \n                            \n                                    \n                                url\n                            \n                            \n                                    \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: () => CURRENT_TIMESTAMP})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/images/entities/image.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/images/entities/image.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        place\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Place\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, place => place.images, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/images/entities/image.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        placeCategory\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PlaceCategory\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, placeCategory => placeCategory.image)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/images/entities/image.entity.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        placeType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PlaceType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, placeType => placeType.image)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/images/entities/image.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        position\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'tinyint', default: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/images/entities/image.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/images/entities/image.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.images)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/images/entities/image.entity.ts:31\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  Column,\n  PrimaryGeneratedColumn,\n  ManyToOne,\n  OneToOne,\n} from 'typeorm';\nimport { Place } from '../../places/entities/place.entity';\nimport { PlaceType } from '../../place-types/entities/place-type.entity';\nimport { PlaceCategory } from '../../place-categories/entities/place-category.entity';\nimport { User } from '../../users/entities/user.entity';\n\n@Entity()\nexport class Image {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  url: string;\n\n  @Column({ type: 'tinyint', default: 0 })\n  position: number;\n\n  @Column({ default: () => 'CURRENT_TIMESTAMP' })\n  createdAt: Date;\n\n  @ManyToOne(() => Place, (place) => place.images, { onDelete: 'CASCADE' })\n  place: Place;\n\n  @ManyToOne(() => User, (user) => user.images)\n  user: User;\n\n  @OneToOne(() => PlaceType, (placeType) => placeType.image)\n  placeType: PlaceType;\n\n  @OneToOne(() => PlaceCategory, (placeCategory) => placeCategory.image)\n  placeCategory: PlaceCategory;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ImageDto.html":{"url":"classes/ImageDto.html","title":"class - ImageDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ImageDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/images/dto/image.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                position\n                            \n                            \n                                    \n                                url\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(partial: Partial)\n                    \n                \n                        \n                            \n                                Defined in src/images/dto/image.dto.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        partial\n                                                  \n                                                        \n                                                                        Partial\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({title: 'Created at', type: Date})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/images/dto/image.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({title: 'Image id', type: Number})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/images/dto/image.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        position\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({title: 'Image position', type: Number})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/images/dto/image.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({title: 'Image url', type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/images/dto/image.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { Image } from '../entities/image.entity';\n\nexport class ImageDto {\n  @ApiProperty({ title: 'Image id', type: Number })\n  id: number;\n\n  @ApiProperty({ title: 'Image url', type: String })\n  url: string;\n\n  @ApiProperty({ title: 'Image position', type: Number })\n  position: number;\n\n  @ApiProperty({ title: 'Created at', type: Date })\n  createdAt: Date;\n\n  constructor(partial: Partial) {\n    Object.assign(this, partial);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ImagesController.html":{"url":"controllers/ImagesController.html","title":"controller - ImagesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ImagesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/images/images.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                images\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                findAll\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                remove\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(fileDto: CreateImageDto, image: Express.Multer.File, tokenPayload: TokenPayloadDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Create new image'})@ApiOkResponse({type: ImageDto})@ApiConsumes('multipart/form-data')@UseInterceptors(undefined)@UseInterceptors(ClassSerializerInterceptor)@Auth()@Post()\n                \n            \n\n            \n                \n                    Defined in src/images/images.controller.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    fileDto\n                                    \n                                                CreateImageDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    image\n                                    \n                                            Express.Multer.File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    tokenPayload\n                                    \n                                                TokenPayloadDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get all images'})@ApiOkResponse({type: ImageDto, isArray: true})@Get()\n                \n            \n\n            \n                \n                    Defined in src/images/images.controller.ts:82\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Delete image by id'})@ApiParam({name: 'id', description: 'image id'})@Auth(RoleNamesEnum.OWNER, RoleNamesEnum.ADMIN)@Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/images/images.controller.ts:93\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  BadRequestException,\n  Body,\n  ClassSerializerInterceptor,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  ParseIntPipe,\n  Post,\n  UploadedFile,\n  UseInterceptors,\n} from '@nestjs/common';\nimport { ImagesService } from './images.service';\nimport { CreateImageDto } from './dto/create-image.dto';\nimport {\n  ApiConsumes,\n  ApiOkResponse,\n  ApiOperation,\n  ApiParam,\n  ApiTags,\n} from '@nestjs/swagger';\nimport { FileInterceptor } from '@nestjs/platform-express';\nimport { memoryStorage } from 'multer';\nimport { StorageService } from '../storage/storage.service';\nimport { ImageDto } from './dto/image.dto';\nimport { Auth } from '../auth/decorators/auth.decorator';\nimport { TokenPayload } from '../auth/decorators/token-payload.decorator';\nimport { TokenPayloadDto } from '../auth/dto/token-payload.dto';\nimport { RoleNamesEnum } from '../roles/enums/role-names.enum';\n\n@ApiTags('Images')\n@Controller('images')\nexport class ImagesController {\n  constructor(\n    private readonly imagesService: ImagesService,\n    private readonly storageService: StorageService,\n  ) {}\n\n  @ApiOperation({ summary: 'Create new image' })\n  @ApiOkResponse({ type: ImageDto })\n  @ApiConsumes('multipart/form-data')\n  @UseInterceptors(\n    FileInterceptor('file', {\n      storage: memoryStorage(),\n      limits: { fileSize: 15728640 }, // 15MB --- 15*2^20\n      fileFilter: (req, file, callback) => {\n        return file.mimetype.match(/image\\/(jpg|jpeg|png|gif|webp)$/)\n          ? callback(null, true)\n          : callback(\n              new BadRequestException(\n                'Invalid file type or maximum size limit exceeded',\n              ),\n              false,\n            );\n      },\n    }),\n  )\n  @UseInterceptors(ClassSerializerInterceptor)\n  @Auth()\n  @Post()\n  async create(\n    @Body()\n    fileDto: CreateImageDto,\n    @UploadedFile()\n    image: Express.Multer.File,\n    @TokenPayload()\n    tokenPayload: TokenPayloadDto,\n  ): Promise {\n    if (!image) throw new BadRequestException('No file provided');\n    const uploaded = await this.storageService.uploadFile(image, 'images');\n    const savedImage = await this.imagesService.create(\n      uploaded.publicUrl,\n      tokenPayload,\n    );\n    return new ImageDto(savedImage);\n  }\n\n  @ApiOperation({ summary: 'Get all images' })\n  @ApiOkResponse({ type: ImageDto, isArray: true })\n  @Get()\n  async findAll() {\n    return await this.imagesService.findAll();\n  }\n\n  @ApiOperation({ summary: 'Delete image by id' })\n  @ApiParam({\n    name: 'id',\n    description: 'image id',\n  })\n  @Auth(RoleNamesEnum.OWNER, RoleNamesEnum.ADMIN)\n  @Delete(':id')\n  async remove(@Param('id', ParseIntPipe) id: number) {\n    return await this.imagesService.remove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ImagesModule.html":{"url":"modules/ImagesModule.html","title":"module - ImagesModule","body":"\n                   \n\n\n\n\n    Modules\n    ImagesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ImagesModule\n\n\n\ncluster_ImagesModule_providers\n\n\n\ncluster_ImagesModule_exports\n\n\n\ncluster_ImagesModule_imports\n\n\n\n\nStorageModule\n\nStorageModule\n\n\n\nImagesModule\n\nImagesModule\n\nImagesModule -->\n\nStorageModule->ImagesModule\n\n\n\n\n\nImagesService \n\nImagesService \n\nImagesService  -->\n\nImagesModule->ImagesService \n\n\n\n\n\nImagesService\n\nImagesService\n\nImagesModule -->\n\nImagesService->ImagesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/images/images.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ImagesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ImagesController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            StorageModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ImagesService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ImagesService } from './images.service';\nimport { ImagesController } from './images.controller';\nimport { StorageModule } from '../storage/storage.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Image } from './entities/image.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Image]), StorageModule],\n  controllers: [ImagesController],\n  providers: [ImagesService],\n  exports: [ImagesService],\n})\nexport class ImagesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ImagesService.html":{"url":"injectables/ImagesService.html","title":"injectable - ImagesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ImagesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/images/images.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                updatePositions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(imagesRepository: Repository, storageService: StorageService)\n                    \n                \n                        \n                            \n                                Defined in src/images/images.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        imagesRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        storageService\n                                                  \n                                                        \n                                                                        StorageService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(imageUrl: string, tokenPayload: TokenPayloadDto)\n                \n            \n\n\n            \n                \n                    Defined in src/images/images.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    imageUrl\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    tokenPayload\n                                    \n                                                TokenPayloadDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in src/images/images.service.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/images/images.service.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updatePositions\n                        \n                    \n                \n            \n            \n                \n                    \n                    updatePositions(imageIds: number[])\n                \n            \n\n\n            \n                \n                    Defined in src/images/images.service.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    imageIds\n                                    \n                                            number[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { In, Repository } from 'typeorm';\nimport { Image } from './entities/image.entity';\nimport { StorageService } from '../storage/storage.service';\nimport { User } from '../users/entities/user.entity';\nimport { TokenPayloadDto } from '../auth/dto/token-payload.dto';\n\n@Injectable()\nexport class ImagesService {\n  constructor(\n    @InjectRepository(Image)\n    private readonly imagesRepository: Repository,\n    private readonly storageService: StorageService,\n  ) {}\n\n  async create(imageUrl: string, tokenPayload: TokenPayloadDto) {\n    const image = this.imagesRepository.create();\n    image.url = imageUrl;\n    image.user = new User();\n    image.user.id = tokenPayload.id;\n    return await this.imagesRepository.save(image);\n  }\n\n  async findAll() {\n    return await this.imagesRepository.find();\n  }\n\n  async updatePositions(imageIds: number[]): Promise {\n    const images = await this.imagesRepository.findBy({\n      id: In(imageIds),\n    });\n\n    return await this.imagesRepository.save(\n      images.map((image) => {\n        const newPosition = imageIds.findIndex((i) => i === image.id);\n        return {\n          ...image,\n          position: newPosition,\n        };\n      }),\n    );\n  }\n\n  async remove(id: number) {\n    const image = await this.imagesRepository.findOne({\n      where: {\n        id: id,\n      },\n      select: ['id', 'url'],\n    });\n    if (!image) throw new NotFoundException();\n    await this.storageService.removeFile(image.url);\n    await this.imagesRepository.delete({ id: image.id });\n    return;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/JwtAuthGuard.html":{"url":"guards/JwtAuthGuard.html","title":"guard - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guards/jwt-auth.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guards/jwt-auth.guard.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/guards/jwt-auth.guard.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     boolean | Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  CanActivate,\n  ExecutionContext,\n  Injectable,\n  Logger,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { TokenPayloadDto } from '../dto/token-payload.dto';\nimport { RequestWithTokenPayload } from '../../shared/types';\n\n@Injectable()\nexport class JwtAuthGuard implements CanActivate {\n  constructor(private readonly jwtService: JwtService) {}\n\n  protected logger = new Logger('JWT-Guard');\n\n  canActivate(context: ExecutionContext): boolean | Promise {\n    const req = context.switchToHttp().getRequest();\n    try {\n      const authHeader = req.headers.authorization;\n      const bearer = authHeader?.split(' ')[0];\n      const token = authHeader?.split(' ')[1];\n      if (bearer !== 'Bearer' || !token)\n        throw new UnauthorizedException({ message: 'No token provided' });\n      const tokenPayload = this.jwtService.verify(token);\n      req.tokenPayload = tokenPayload;\n      return true;\n    } catch (error) {\n      this.logger.error(error);\n      if (error instanceof UnauthorizedException) {\n        throw error;\n      }\n      throw new UnauthorizedException({ message: 'Invalid token' });\n    }\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Language.html":{"url":"entities/Language.html","title":"entity - Language","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Language\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/languages/entities/language.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                code\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                title\n                            \n                            \n                                    \n                                translation\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 10})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/languages/entities/language.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/languages/entities/language.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 25})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/languages/entities/language.entity.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        translation\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Translation\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, translation => translation.language)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/languages/entities/language.entity.ts:16\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Entity, Column, PrimaryGeneratedColumn, OneToMany } from 'typeorm';\nimport { Translation } from '../../translations/entities/translation.entity';\n\n@Entity()\nexport class Language {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ type: 'varchar', length: 25 })\n  title: string;\n\n  @Column({ type: 'varchar', length: 10 })\n  code: string;\n\n  @OneToMany(() => Translation, (translation) => translation.language)\n  translation: Translation;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LanguageDto.html":{"url":"classes/LanguageDto.html","title":"class - LanguageDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LanguageDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/languages/dto/language.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        CreateLanguageDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                code\n                            \n                            \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({title: 'Language id', type: Number})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/languages/dto/language.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({title: 'Language code', type: String})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         CreateLanguageDto\n\n                            \n                        \n                    \n                        \n                                Defined in         CreateLanguageDto:8\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({title: 'Language title', type: String})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         CreateLanguageDto\n\n                            \n                        \n                    \n                        \n                                Defined in         CreateLanguageDto:5\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { CreateLanguageDto } from './create-language.dto';\n\nexport class LanguageDto extends CreateLanguageDto {\n  @ApiProperty({ title: 'Language id', type: Number })\n  id: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/LanguagesController.html":{"url":"controllers/LanguagesController.html","title":"controller - LanguagesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  LanguagesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/languages/languages.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                languages\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                findAll\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                findOne\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                remove\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createLanguageDto: CreateLanguageDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOkResponse({description: 'OK', type: LanguageDto})@ApiOperation({summary: 'Create language'})@ApiBody({type: CreateLanguageDto})@Post()\n                \n            \n\n            \n                \n                    Defined in src/languages/languages.controller.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createLanguageDto\n                                    \n                                                CreateLanguageDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOkResponse({description: 'OK', type: LanguageDto, isArray: true})@ApiOperation({summary: 'Get all languages'})@Get()\n                \n            \n\n            \n                \n                    Defined in src/languages/languages.controller.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOkResponse({description: 'OK', type: LanguageDto})@ApiNotFoundResponse({type: NotFoundException, description: 'No language was found'})@ApiParam({name: 'id', type: Number, description: 'The ID of the language'})@ApiOperation({summary: 'Get language by id'})@Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/languages/languages.controller.ts:72\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOkResponse({description: 'OK', type: undefined})@ApiNotFoundResponse({type: NotFoundException, description: 'No language was found'})@ApiParam({name: 'id', type: Number, description: 'The ID of the language'})@ApiOperation({summary: 'Delete language by id'})@Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/languages/languages.controller.ts:113\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, updateLanguageDto: UpdateLanguageDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOkResponse({description: 'OK', type: LanguageDto})@ApiNotFoundResponse({type: NotFoundException, description: 'No language was found'})@ApiParam({name: 'id', type: Number, description: 'The ID of the language'})@ApiOperation({summary: 'Update language by id'})@Patch(':id')\n                \n            \n\n            \n                \n                    Defined in src/languages/languages.controller.ts:91\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateLanguageDto\n                                    \n                                                UpdateLanguageDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  NotFoundException,\n  Param,\n  ParseIntPipe,\n  Patch,\n  Post,\n} from '@nestjs/common';\nimport { LanguagesService } from './languages.service';\nimport { CreateLanguageDto } from './dto/create-language.dto';\nimport { UpdateLanguageDto } from './dto/update-language.dto';\nimport {\n  ApiBody,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiParam,\n  ApiTags,\n  PickType,\n} from '@nestjs/swagger';\nimport { LanguageDto } from './dto/language.dto';\n\n@ApiTags('Languages')\n@Controller('languages')\nexport class LanguagesController {\n  constructor(private readonly languagesService: LanguagesService) {}\n\n  @ApiOkResponse({\n    description: 'OK',\n    type: LanguageDto,\n  })\n  @ApiOperation({ summary: 'Create language' })\n  @ApiBody({\n    type: CreateLanguageDto,\n  })\n  @Post()\n  async create(\n    @Body() createLanguageDto: CreateLanguageDto,\n  ): Promise {\n    return await this.languagesService.create(createLanguageDto);\n  }\n\n  @ApiOkResponse({\n    description: 'OK',\n    type: LanguageDto,\n    isArray: true,\n  })\n  @ApiOperation({ summary: 'Get all languages' })\n  @Get()\n  async findAll() {\n    return await this.languagesService.findAll();\n  }\n\n  @ApiOkResponse({\n    description: 'OK',\n    type: LanguageDto,\n  })\n  @ApiNotFoundResponse({\n    type: NotFoundException,\n    description: 'No language was found',\n  })\n  @ApiParam({\n    name: 'id',\n    type: Number,\n    description: 'The ID of the language',\n  })\n  @ApiOperation({ summary: 'Get language by id' })\n  @Get(':id')\n  async findOne(@Param('id', ParseIntPipe) id: number) {\n    return await this.languagesService.findOne(id);\n  }\n\n  @ApiOkResponse({\n    description: 'OK',\n    type: LanguageDto,\n  })\n  @ApiNotFoundResponse({\n    type: NotFoundException,\n    description: 'No language was found',\n  })\n  @ApiParam({\n    name: 'id',\n    type: Number,\n    description: 'The ID of the language',\n  })\n  @ApiOperation({ summary: 'Update language by id' })\n  @Patch(':id')\n  async update(\n    @Param('id', ParseIntPipe) id: number,\n    @Body() updateLanguageDto: UpdateLanguageDto,\n  ): Promise {\n    return await this.languagesService.update(id, updateLanguageDto);\n  }\n\n  @ApiOkResponse({\n    description: 'OK',\n    type: PickType(LanguageDto, ['id']),\n  })\n  @ApiNotFoundResponse({\n    type: NotFoundException,\n    description: 'No language was found',\n  })\n  @ApiParam({\n    name: 'id',\n    type: Number,\n    description: 'The ID of the language',\n  })\n  @ApiOperation({ summary: 'Delete language by id' })\n  @Delete(':id')\n  async remove(@Param('id', ParseIntPipe) id: number) {\n    const deletedId = await this.languagesService.remove(id);\n    return {\n      id: deletedId,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/LanguagesModule.html":{"url":"modules/LanguagesModule.html","title":"module - LanguagesModule","body":"\n                   \n\n\n\n\n    Modules\n    LanguagesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_LanguagesModule\n\n\n\ncluster_LanguagesModule_exports\n\n\n\ncluster_LanguagesModule_providers\n\n\n\n\nLanguagesService \n\nLanguagesService \n\n\n\nLanguagesModule\n\nLanguagesModule\n\nLanguagesService  -->\n\nLanguagesModule->LanguagesService \n\n\n\n\n\nLanguagesService\n\nLanguagesService\n\nLanguagesModule -->\n\nLanguagesService->LanguagesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/languages/languages.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            LanguagesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            LanguagesController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            LanguagesService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { LanguagesService } from './languages.service';\nimport { LanguagesController } from './languages.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Language } from './entities/language.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Language])],\n  controllers: [LanguagesController],\n  providers: [LanguagesService],\n  exports: [LanguagesService],\n})\nexport class LanguagesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LanguagesService.html":{"url":"injectables/LanguagesService.html","title":"injectable - LanguagesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LanguagesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/languages/languages.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(languagesRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/languages/languages.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        languagesRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createLanguageDto: CreateLanguageDto)\n                \n            \n\n\n            \n                \n                    Defined in src/languages/languages.service.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createLanguageDto\n                                    \n                                                CreateLanguageDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in src/languages/languages.service.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/languages/languages.service.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/languages/languages.service.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, updateLanguageDto: UpdateLanguageDto)\n                \n            \n\n\n            \n                \n                    Defined in src/languages/languages.service.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateLanguageDto\n                                    \n                                                UpdateLanguageDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { CreateLanguageDto } from './dto/create-language.dto';\nimport { UpdateLanguageDto } from './dto/update-language.dto';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { Language } from './entities/language.entity';\n\n@Injectable()\nexport class LanguagesService {\n  constructor(\n    @InjectRepository(Language)\n    private languagesRepository: Repository,\n  ) {}\n\n  // This action adds a new language\n  async create(createLanguageDto: CreateLanguageDto) {\n    const language = this.languagesRepository.create({\n      title: createLanguageDto.title,\n      code: createLanguageDto.code,\n    });\n    return this.languagesRepository.save(language);\n  }\n\n  // This action returns all languages\n  async findAll() {\n    return this.languagesRepository.find();\n  }\n\n  // This action returns a #id language\n  async findOne(id: number) {\n    try {\n      return await this.languagesRepository.findOneOrFail({\n        where: {\n          id: id,\n        },\n      });\n    } catch (e) {\n      throw new NotFoundException('No language was found');\n    }\n  }\n\n  // This action updates a #id language\n  async update(id: number, updateLanguageDto: UpdateLanguageDto) {\n    const language = await this.languagesRepository.findOneBy({ id: id });\n    if (!language) throw new NotFoundException('No language was found');\n    return this.languagesRepository.save({\n      ...language,\n      ...updateLanguageDto,\n    } as Language);\n  }\n\n  // This action removes a #id language\n  async remove(id: number) {\n    const result = await this.languagesRepository.delete(id);\n    if (!result.affected) throw new NotFoundException('No language was found');\n    return id;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Like.html":{"url":"entities/Like.html","title":"entity - Like","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Like\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/places/entities/like.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                place\n                            \n                            \n                                    \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/places/entities/like.entity.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        place\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Place\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, place => place.likes, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/places/entities/like.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.likes)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/places/entities/like.entity.ts:11\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Entity, ManyToOne, PrimaryGeneratedColumn } from 'typeorm';\nimport { Place } from './place.entity';\nimport { User } from '../../users/entities/user.entity';\n\n@Entity()\nexport class Like {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @ManyToOne(() => User, (user) => user.likes)\n  user: User;\n\n  @ManyToOne(() => Place, (place) => place.likes, { onDelete: 'CASCADE' })\n  place: Place;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginDto.html":{"url":"classes/LoginDto.html","title":"class - LoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/login.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({title: 'Email', type: String, default: 'johndoe@gmail.com'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({title: 'Password', type: String, default: 'password'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nexport class LoginDto {\n  @ApiProperty({ title: 'Email', type: String, default: 'johndoe@gmail.com' })\n  email: string;\n\n  @ApiProperty({ title: 'Password', type: String, default: 'password' })\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MailingModule.html":{"url":"modules/MailingModule.html","title":"module - MailingModule","body":"\n                   \n\n\n\n\n    Modules\n    MailingModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_MailingModule\n\n\n\ncluster_MailingModule_providers\n\n\n\ncluster_MailingModule_exports\n\n\n\n\nMailingService \n\nMailingService \n\n\n\nMailingModule\n\nMailingModule\n\nMailingService  -->\n\nMailingModule->MailingService \n\n\n\n\n\nMailingService\n\nMailingService\n\nMailingModule -->\n\nMailingService->MailingModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/mailing/mailing.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MailingService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            MailingService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MailerModule } from '@nestjs-modules/mailer';\nimport { EjsAdapter } from '@nestjs-modules/mailer/dist/adapters/ejs.adapter';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { IMailerConfig } from '../config/configuration';\nimport { MailingService } from './mailing.service';\n\n@Module({\n  imports: [\n    MailerModule.forRootAsync({\n      imports: [ConfigModule],\n      useFactory: (configService: ConfigService) => ({\n        transport: `smtps://${\n          configService.get('emailConfig')?.email\n        }:${\n          configService.get('emailConfig')?.emailPw\n        }@smtp.gmail.com`,\n        defaults: {\n          from: `My-Places Support ('emailConfig')?.email\n          }>`,\n        },\n        template: {\n          dir: process.cwd() + '/templates',\n          adapter: new EjsAdapter(),\n        },\n      }),\n      inject: [ConfigService],\n    }),\n  ],\n  providers: [MailingService],\n  exports: [MailingService],\n})\nexport class MailingModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MailingService.html":{"url":"injectables/MailingService.html","title":"injectable - MailingService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MailingService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/mailing/mailing.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                sendEmailConfirm\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(mailerService: MailerService)\n                    \n                \n                        \n                            \n                                Defined in src/mailing/mailing.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        mailerService\n                                                  \n                                                        \n                                                                    MailerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        sendEmailConfirm\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendEmailConfirm(userDto: CreateUserDto, feedbackToken: string)\n                \n            \n\n\n            \n                \n                    Defined in src/mailing/mailing.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    feedbackToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { MailerService } from '@nestjs-modules/mailer';\nimport { CreateUserDto } from '../users/dto/create-user.dto';\nimport { join, resolve } from 'path';\n\nexport const MAIL_TEMPLATES_PATH = join(process.cwd(), 'templates/');\n\n// a helper function which generates the full path to the mail template\nexport const getFullTemplatePath = (templatePath: string): string => {\n  return resolve(MAIL_TEMPLATES_PATH, ...templatePath.split('/'));\n};\n\n@Injectable()\nexport class MailingService {\n  constructor(private readonly mailerService: MailerService) {}\n\n  async sendEmailConfirm(userDto: CreateUserDto, feedbackToken: string) {\n    await this.mailerService.sendMail({\n      to: [userDto.email], // list of receivers\n      subject: 'Email confirm', // Subject line\n      template: getFullTemplatePath('users/confirm-email'),\n      context: {\n        user_firstname: userDto.firstName,\n        confirm_link: 'https://my-client-domain/auth/confirm=' + feedbackToken,\n      },\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PayloadFromTokenPipe.html":{"url":"injectables/PayloadFromTokenPipe.html","title":"injectable - PayloadFromTokenPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PayloadFromTokenPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/pipes/payload-from-token.pipe.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/pipes/payload-from-token.pipe.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        transform\n                        \n                    \n                \n            \n            \n                \n                    \n                    transform(token: string | null, _metadata: ArgumentMetadata)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/pipes/payload-from-token.pipe.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                            string | null\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    _metadata\n                                    \n                                            ArgumentMetadata\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ArgumentMetadata, Injectable, PipeTransform } from '@nestjs/common';\nimport { TokenPayloadDto } from '../dto/token-payload.dto';\nimport { JwtService } from '@nestjs/jwt';\n\n@Injectable()\nexport class PayloadFromTokenPipe implements PipeTransform {\n  constructor(private readonly jwtService: JwtService) {}\n\n  async transform(token: string | null, _metadata: ArgumentMetadata) {\n    try {\n      if (!token) return null;\n\n      const tokenPayload = this.jwtService.verify(token);\n\n      return tokenPayload;\n    } catch (error) {\n      return null;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Place.html":{"url":"entities/Place.html","title":"entity - Place","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Place\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/places/entities/place.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                address\n                            \n                            \n                                    \n                                admin\n                            \n                            \n                                    \n                                advEndDate\n                            \n                            \n                                    \n                                advertisement\n                            \n                            \n                                    \n                                author\n                            \n                            \n                                    \n                                    \n                                categories\n                            \n                            \n                                    \n                                comments\n                            \n                            \n                                    \n                                coordinates\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                description\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                images\n                            \n                            \n                                    \n                                likes\n                            \n                            \n                                    \n                                likesCount\n                            \n                            \n                                    \n                                moderation\n                            \n                            \n                                    \n                                    \n                                slug\n                            \n                            \n                                    \n                                title\n                            \n                            \n                                    \n                                type\n                            \n                            \n                                    \n                                viewsCount\n                            \n                            \n                                    \n                                website\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'int', unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/places/entities/place.entity.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        admin\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Admin\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, admin => admin.places)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/places/entities/place.entity.ts:66\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        advEndDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/places/entities/place.entity.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        advertisement\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/places/entities/place.entity.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.places)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/places/entities/place.entity.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        categories\n                        \n                    \n                \n            \n                \n                    \n                        Type :     PlaceCategory[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, placeCategory => placeCategory.places)@JoinTable()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/places/entities/place.entity.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        comments\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Comment[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, comment => comment.place, {cascade: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/places/entities/place.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        coordinates\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/places/entities/place.entity.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: () => CURRENT_TIMESTAMP})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/places/entities/place.entity.ts:81\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'int', unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/places/entities/place.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/places/entities/place.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        images\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Image[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, image => image.place, {cascade: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/places/entities/place.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        likes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Like[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, like => like.place, {cascade: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/places/entities/place.entity.ts:75\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        likesCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/places/entities/place.entity.ts:69\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        moderation\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/places/entities/place.entity.ts:78\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Index({unique: true})@Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/places/entities/place.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'int', unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/places/entities/place.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PlaceType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, type => type.places)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/places/entities/place.entity.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        viewsCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/places/entities/place.entity.ts:72\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        website\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/places/entities/place.entity.ts:44\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  Column,\n  PrimaryGeneratedColumn,\n  ManyToOne,\n  OneToMany,\n  ManyToMany,\n  JoinTable,\n  Index,\n} from 'typeorm';\nimport { User } from '../../users/entities/user.entity';\nimport { PlaceType } from '../../place-types/entities/place-type.entity';\nimport { Admin } from '../../entities/admin.entity';\nimport { Image } from '../../images/entities/image.entity';\nimport { Like } from './like.entity';\nimport { Comment } from '../../comments/entities/comment.entity';\nimport { PlaceCategory } from '../../place-categories/entities/place-category.entity';\n\n@Entity()\nexport class Place {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Index({ unique: true })\n  @Column({ unique: true })\n  slug: string;\n\n  @Column({ type: 'int', unique: true })\n  title: number;\n\n  @Column({ type: 'int', unique: true })\n  description: number;\n\n  @OneToMany(() => Image, (image) => image.place, { cascade: true })\n  images: Image[];\n\n  @OneToMany(() => Comment, (comment) => comment.place, { cascade: true })\n  comments: Comment[];\n\n  @Column({ type: 'int', unique: true })\n  address: number;\n\n  @Column({ nullable: true })\n  website: string;\n\n  @ManyToOne(() => PlaceType, (type) => type.places)\n  type: PlaceType;\n\n  @ManyToMany(() => PlaceCategory, (placeCategory) => placeCategory.places)\n  @JoinTable()\n  categories: PlaceCategory[];\n\n  @Column()\n  coordinates: string;\n\n  @Column({ default: false })\n  advertisement: boolean;\n\n  @Column({ nullable: true })\n  advEndDate: Date;\n\n  @ManyToOne(() => User, (user) => user.places)\n  author: User;\n\n  @ManyToOne(() => Admin, (admin) => admin.places)\n  admin: Admin;\n\n  @Column({ default: 0 })\n  likesCount: number;\n\n  @Column({ default: 0 })\n  viewsCount: number;\n\n  @OneToMany(() => Like, (like) => like.place, { cascade: true })\n  likes: Like[];\n\n  @Column({ default: true })\n  moderation: boolean;\n\n  @Column({ default: () => 'CURRENT_TIMESTAMP' })\n  createdAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PlaceCategoriesController.html":{"url":"controllers/PlaceCategoriesController.html","title":"controller - PlaceCategoriesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PlaceCategoriesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/place-categories/place-categories.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                placeCategories\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                findAll\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                findOne\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(langId: number, createPlaceCategoryDto: CreatePlaceCategoryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Create Place category'})@ApiOkResponse({description: 'OK', type: PlaceCategoryDto})@ApiQuery({name: 'lang', type: Number, description: 'The ID of the language'})@ApiBody({type: CreatePlaceCategoryDto})@Post()\n                \n            \n\n            \n                \n                    Defined in src/place-categories/place-categories.controller.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    langId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createPlaceCategoryDto\n                                    \n                                                CreatePlaceCategoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(langId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get all place categories by language id'})@ApiOkResponse({description: 'OK', type: PlaceCategoryDto, isArray: true})@ApiQuery({name: 'lang', type: Number, description: 'The ID of the language'})@UseInterceptors(ClassSerializerInterceptor)@Get()\n                \n            \n\n            \n                \n                    Defined in src/place-categories/place-categories.controller.ts:70\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    langId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: number, langId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get place category by id and language id'})@ApiOkResponse({description: 'OK', type: PlaceCategoryDto})@ApiNotFoundResponse({type: NotFoundException})@ApiParam({name: 'id', type: Number, description: 'The ID of Place Category'})@ApiQuery({name: 'lang', type: Number, description: 'The ID of the language'})@UseInterceptors(ClassSerializerInterceptor)@Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/place-categories/place-categories.controller.ts:97\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    langId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Param,\n  Query,\n  ParseIntPipe,\n  UseInterceptors,\n  ClassSerializerInterceptor,\n  NotFoundException,\n} from '@nestjs/common';\nimport { PlaceCategoriesService } from './place-categories.service';\nimport { CreatePlaceCategoryDto } from './dto/create-place-category.dto';\nimport {\n  ApiBody,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiParam,\n  ApiQuery,\n  ApiTags,\n} from '@nestjs/swagger';\nimport { PlaceCategoryDto } from './dto/place-category.dto';\n\n@ApiTags('Place categories')\n@Controller('placeCategories')\nexport class PlaceCategoriesController {\n  constructor(\n    private readonly placeCategoriesService: PlaceCategoriesService,\n  ) {}\n\n  @ApiOperation({ summary: 'Create Place category' })\n  @ApiOkResponse({\n    description: 'OK',\n    type: PlaceCategoryDto,\n  })\n  @ApiQuery({\n    name: 'lang',\n    type: Number,\n    description: 'The ID of the language',\n  })\n  @ApiBody({\n    type: CreatePlaceCategoryDto,\n  })\n  @Post()\n  async create(\n    @Query('lang', ParseIntPipe) langId: number,\n    @Body() createPlaceCategoryDto: CreatePlaceCategoryDto,\n  ) {\n    return await this.placeCategoriesService.create(\n      langId,\n      createPlaceCategoryDto,\n    );\n  }\n\n  @ApiOperation({ summary: 'Get all place categories by language id' })\n  @ApiOkResponse({\n    description: 'OK',\n    type: PlaceCategoryDto,\n    isArray: true,\n  })\n  @ApiQuery({\n    name: 'lang',\n    type: Number,\n    description: 'The ID of the language',\n  })\n  @UseInterceptors(ClassSerializerInterceptor)\n  @Get()\n  async findAll(\n    @Query('lang', ParseIntPipe) langId: number,\n  ): Promise {\n    const placeCategories = await this.placeCategoriesService.findAll(langId);\n    return placeCategories.map((pc) => new PlaceCategoryDto(pc));\n  }\n\n  @ApiOperation({ summary: 'Get place category by id and language id' })\n  @ApiOkResponse({\n    description: 'OK',\n    type: PlaceCategoryDto,\n  })\n  @ApiNotFoundResponse({\n    type: NotFoundException,\n  })\n  @ApiParam({\n    name: 'id',\n    type: Number,\n    description: 'The ID of Place Category',\n  })\n  @ApiQuery({\n    name: 'lang',\n    type: Number,\n    description: 'The ID of the language',\n  })\n  @UseInterceptors(ClassSerializerInterceptor)\n  @Get(':id')\n  async findOne(\n    @Param('id', ParseIntPipe) id: number,\n    @Query('lang', ParseIntPipe) langId: number,\n  ) {\n    const placeCategory = await this.placeCategoriesService.findOne(id, langId);\n    return new PlaceCategoryDto(placeCategory);\n  }\n\n  // @Patch(':id')\n  // update(\n  //   @Param('id') id: string,\n  //   @Body() updatePlaceCategoryDto: UpdatePlaceCategoryDto,\n  // ) {\n  //   return this.placeCategoriesService.update(+id, updatePlaceCategoryDto);\n  // }\n  //\n  // @Delete(':id')\n  // remove(@Param('id') id: string) {\n  //   return this.placeCategoriesService.remove(+id);\n  // }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PlaceCategoriesModule.html":{"url":"modules/PlaceCategoriesModule.html","title":"module - PlaceCategoriesModule","body":"\n                   \n\n\n\n\n    Modules\n    PlaceCategoriesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PlaceCategoriesModule\n\n\n\ncluster_PlaceCategoriesModule_imports\n\n\n\ncluster_PlaceCategoriesModule_providers\n\n\n\n\nTranslationsModule\n\nTranslationsModule\n\n\n\nPlaceCategoriesModule\n\nPlaceCategoriesModule\n\nPlaceCategoriesModule -->\n\nTranslationsModule->PlaceCategoriesModule\n\n\n\n\n\nPlaceCategoriesService\n\nPlaceCategoriesService\n\nPlaceCategoriesModule -->\n\nPlaceCategoriesService->PlaceCategoriesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/place-categories/place-categories.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PlaceCategoriesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PlaceCategoriesController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            TranslationsModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PlaceCategoriesService } from './place-categories.service';\nimport { PlaceCategoriesController } from './place-categories.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { TranslationsModule } from '../translations/translations.module';\nimport { PlaceCategory } from './entities/place-category.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([PlaceCategory]), TranslationsModule],\n  controllers: [PlaceCategoriesController],\n  providers: [PlaceCategoriesService],\n})\nexport class PlaceCategoriesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PlaceCategoriesService.html":{"url":"injectables/PlaceCategoriesService.html","title":"injectable - PlaceCategoriesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PlaceCategoriesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/place-categories/place-categories.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(placeCategoriesRepository: Repository, translationsService: TranslationsService)\n                    \n                \n                        \n                            \n                                Defined in src/place-categories/place-categories.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        placeCategoriesRepository\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        translationsService\n                                                  \n                                                        \n                                                                        TranslationsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(langId: number, createPlaceCategoryDto: CreatePlaceCategoryDto)\n                \n            \n\n\n            \n                \n                    Defined in src/place-categories/place-categories.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    langId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createPlaceCategoryDto\n                                    \n                                                CreatePlaceCategoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(langId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/place-categories/place-categories.service.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    langId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: number, langId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/place-categories/place-categories.service.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    langId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { CreatePlaceCategoryDto } from './dto/create-place-category.dto';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { TranslationsService } from '../translations/translations.service';\nimport { PlaceCategory } from './entities/place-category.entity';\nimport { PlaceCategoryDto } from './dto/place-category.dto';\nimport { Image } from '../images/entities/image.entity';\n\n@Injectable()\nexport class PlaceCategoriesService {\n  constructor(\n    @InjectRepository(PlaceCategory)\n    private placeCategoriesRepository: Repository,\n    private translationsService: TranslationsService,\n  ) {}\n\n  async create(langId: number, createPlaceCategoryDto: CreatePlaceCategoryDto) {\n    const titleTranslation = await this.translationsService.createTranslation(\n      langId,\n      createPlaceCategoryDto.title,\n      true,\n    );\n    const placeCategory = this.placeCategoriesRepository.create({\n      title: titleTranslation.textId,\n    });\n    if (createPlaceCategoryDto.imageId) {\n      placeCategory.image = new Image();\n      placeCategory.image.id = createPlaceCategoryDto.imageId;\n    }\n\n    await this.placeCategoriesRepository.save(placeCategory);\n    await this.translationsService.translateAll(\n      titleTranslation.text,\n      titleTranslation.textId,\n      langId,\n    );\n    const placeCategoryDto = new PlaceCategoryDto(placeCategory);\n    placeCategoryDto.title = titleTranslation.text;\n    return placeCategoryDto;\n  }\n\n  async findAll(langId: number) {\n    return await this.placeCategoriesRepository\n      .createQueryBuilder('pc')\n      .leftJoinAndSelect('pc.image', 'image')\n      .innerJoinAndMapOne(\n        'pc.title',\n        'translation',\n        't',\n        'pc.title = t.textId AND t.language = :langId',\n        { langId },\n      )\n      .getMany();\n  }\n\n  async findOne(id: number, langId: number) {\n    const placeCategory = await this.placeCategoriesRepository\n      .createQueryBuilder('pc')\n      .leftJoinAndSelect('pc.image', 'image')\n      .innerJoinAndMapOne(\n        'pc.title',\n        'translation',\n        't',\n        'pc.title = t.textId AND t.language = :langId',\n        { langId },\n      )\n      .where('pc.id = :id', { id })\n      .getOne();\n    if (!placeCategory)\n      throw new NotFoundException(\n        `Place category with id ${id} by language id ${langId} was not found`,\n      );\n    return placeCategory;\n  }\n\n  // update(id: number, updatePlaceCategoryDto: UpdatePlaceCategoryDto) {\n  //   return `This action updates a #${id} placeCategory`;\n  // }\n  //\n  // remove(id: number) {\n  //   return `This action removes a #${id} placeCategory`;\n  // }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/PlaceCategory.html":{"url":"entities/PlaceCategory.html","title":"entity - PlaceCategory","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  PlaceCategory\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/place-categories/entities/place-category.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                image\n                            \n                            \n                                    \n                                places\n                            \n                            \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/place-categories/entities/place-category.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Image\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, image => image.id)@JoinColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/place-categories/entities/place-category.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        places\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Place[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, place => place.categories)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/place-categories/entities/place-category.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'int', unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/place-categories/entities/place-category.entity.ts:19\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  PrimaryGeneratedColumn,\n  PrimaryColumn,\n  OneToOne,\n  JoinColumn,\n  ManyToMany,\n  Column,\n} from 'typeorm';\nimport { Place } from '../../places/entities/place.entity';\nimport { Image } from '../../images/entities/image.entity';\n\n@Entity()\nexport class PlaceCategory {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ type: 'int', unique: true })\n  title: number;\n\n  @OneToOne(() => Image, (image) => image.id)\n  @JoinColumn()\n  image: Image;\n\n  @ManyToMany(() => Place, (place) => place.categories)\n  places: Place[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PlaceCategoryDto.html":{"url":"classes/PlaceCategoryDto.html","title":"class - PlaceCategoryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PlaceCategoryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/place-categories/dto/place-category.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                image\n                            \n                            \n                                    \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(partial: Partial)\n                    \n                \n                        \n                            \n                                Defined in src/place-categories/dto/place-category.dto.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        partial\n                                                  \n                                                        \n                                                                    Partial\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({title: 'Place category id', type: Number})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/place-categories/dto/place-category.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({title: 'Image url', type: String, nullable: true})@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/place-categories/dto/place-category.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({title: 'Place category title', type: String})@Transform( => value.text)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/place-categories/dto/place-category.dto.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { Transform } from 'class-transformer';\nimport { TranslationDto } from '../../translations/dto/translation.dto';\nimport { Image } from '../../images/entities/image.entity';\nimport { PlaceCategory } from '../entities/place-category.entity';\n\nexport class PlaceCategoryDto {\n  @ApiProperty({ title: 'Place category id', type: Number })\n  id: number;\n\n  @ApiProperty({ title: 'Place category title', type: String })\n  @Transform(({ value }: { value: Partial }) => value.text)\n  title: string;\n\n  @ApiProperty({ title: 'Image url', type: String, nullable: true })\n  @Transform(\n    ({ value }: { value: Partial | null }) => value?.url || null,\n  )\n  image: string;\n\n  constructor(partial: Partial) {\n    Object.assign(this, partial);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PlaceDto.html":{"url":"classes/PlaceDto.html","title":"class - PlaceDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PlaceDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/places/dto/place.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                address\n                            \n                            \n                                    \n                                advEndDate\n                            \n                            \n                                    \n                                advertisement\n                            \n                            \n                                    \n                                    \n                                categories\n                            \n                            \n                                    \n                                comments\n                            \n                            \n                                    \n                                coordinates\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                    \n                                description\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                images\n                            \n                            \n                                    \n                                isLiked\n                            \n                            \n                                    \n                                likes\n                            \n                            \n                                    \n                                likesCount\n                            \n                            \n                                    \n                                moderation\n                            \n                            \n                                    \n                                slug\n                            \n                            \n                                    \n                                    \n                                title\n                            \n                            \n                                    \n                                    \n                                type\n                            \n                            \n                                    \n                                viewsCount\n                            \n                            \n                                    \n                                    Optional\n                                website\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(partial: Partial)\n                    \n                \n                        \n                            \n                                Defined in src/places/dto/place.dto.ts:108\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        partial\n                                                  \n                                                        \n                                                                        Partial\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'Place address'})@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/places/dto/place.dto.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        advEndDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Date | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: Date, description: 'advertisement end date', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/places/dto/place.dto.ts:99\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        advertisement\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: Boolean, description: 'is place an advertisement'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/places/dto/place.dto.ts:92\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        categories\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PlaceCategoryDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: PlaceCategoryDto, description: 'Place categories', isArray: true})@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/places/dto/place.dto.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        comments\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Comment[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/places/dto/place.dto.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        coordinates\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'Place coordinates [lat;lng]'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/places/dto/place.dto.ts:79\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: Date, description: 'created at'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/places/dto/place.dto.ts:108\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'Place description'})@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/places/dto/place.dto.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({title: 'Place id', type: Number})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/places/dto/place.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        images\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'Place image'})@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/places/dto/place.dto.ts:76\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        isLiked\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: Boolean, description: 'Is liked by user'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/places/dto/place.dto.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        likes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Like[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/places/dto/place.dto.ts:66\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        likesCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: Number, description: 'Likes count'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/places/dto/place.dto.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        moderation\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/places/dto/place.dto.ts:102\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'Place url path'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/places/dto/place.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'Place title'})@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/places/dto/place.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PlaceTypeDto\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: PlaceTypeDto, description: 'Place type'})@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/places/dto/place.dto.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        viewsCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: Number, description: 'Views count'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/places/dto/place.dto.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        website\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'Place website url', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/places/dto/place.dto.ts:86\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { Exclude, Transform } from 'class-transformer';\nimport { Translation } from '../../translations/entities/translation.entity';\nimport { PlaceTypeDto } from '../../place-types/dto/place-type.dto';\nimport { PlaceType } from '../../place-types/entities/place-type.entity';\nimport { PlaceCategoryDto } from '../../place-categories/dto/place-category.dto';\nimport { PlaceCategory } from '../../place-categories/entities/place-category.entity';\nimport { Image } from '../../images/entities/image.entity';\nimport { Place } from '../entities/place.entity';\nimport { Like } from '../entities/like.entity';\n\nexport class PlaceDto {\n  @ApiProperty({ title: 'Place id', type: Number })\n  id: number;\n\n  @ApiProperty({ type: String, description: 'Place url path' })\n  slug: string;\n\n  @ApiProperty({ type: String, description: 'Place title' })\n  @Transform(\n    ({ value }: { value: Partial }) => value?.text ?? null,\n  )\n  title: string;\n\n  @ApiProperty({ type: String, description: 'Place description' })\n  @Transform(\n    ({ value }: { value: Partial }) => value?.text ?? null,\n  )\n  description: string;\n\n  @ApiProperty({ type: String, description: 'Place address' })\n  @Transform(\n    ({ value }: { value: Partial }) => value?.text ?? null,\n  )\n  address: string;\n\n  @ApiProperty({ type: PlaceTypeDto, description: 'Place type' })\n  @Transform(\n    ({ value }: { value: Partial }) => new PlaceTypeDto(value),\n  )\n  type: PlaceTypeDto;\n\n  @ApiProperty({ type: Number, description: 'Likes count' })\n  likesCount: number;\n\n  @ApiProperty({ type: Number, description: 'Views count' })\n  viewsCount: number;\n\n  @ApiProperty({ type: Boolean, description: 'Is liked by user' })\n  isLiked: boolean;\n\n  @ApiProperty({\n    type: PlaceCategoryDto,\n    description: 'Place categories',\n    isArray: true,\n  })\n  @Transform(({ value }: { value: Partial[] }) =>\n    value.map((category) => new PlaceCategoryDto(category)),\n  )\n  categories: PlaceCategoryDto[];\n\n  @Exclude()\n  comments: Comment[];\n\n  @Exclude()\n  likes: Like[];\n\n  @ApiProperty({\n    type: String,\n    description: 'Place image',\n  })\n  @Transform(\n    ({ value }: { value: Partial[] }) =>\n      value?.filter((v) => Boolean(v.url)).map((v) => v.url) ?? [],\n  )\n  images: string[];\n\n  @ApiProperty({ type: String, description: 'Place coordinates [lat;lng]' })\n  coordinates: string;\n\n  @ApiProperty({\n    type: String,\n    description: 'Place website url',\n    nullable: true,\n  })\n  website?: string;\n\n  @ApiProperty({\n    type: Boolean,\n    description: 'is place an advertisement',\n  })\n  advertisement: boolean;\n\n  @ApiProperty({\n    type: Date,\n    description: 'advertisement end date',\n    nullable: true,\n  })\n  advEndDate: Date | null;\n\n  @Exclude()\n  moderation: boolean;\n\n  @ApiProperty({\n    type: Date,\n    description: 'created at',\n  })\n  createdAt: Date;\n\n  constructor(partial: Partial) {\n    Object.assign(this, partial);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PlaceSlugDto.html":{"url":"classes/PlaceSlugDto.html","title":"class - PlaceSlugDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PlaceSlugDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/places/dto/place-slug.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                slug\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({title: 'Place id', type: Number})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/places/dto/place-slug.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'Place url path'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/places/dto/place-slug.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nexport class PlaceSlugDto {\n  @ApiProperty({ title: 'Place id', type: Number })\n  id: number;\n\n  @ApiProperty({ type: String, description: 'Place url path' })\n  slug: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/PlaceType.html":{"url":"entities/PlaceType.html","title":"entity - PlaceType","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  PlaceType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/place-types/entities/place-type.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                commercial\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                image\n                            \n                            \n                                    \n                                places\n                            \n                            \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        commercial\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/place-types/entities/place-type.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/place-types/entities/place-type.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Image\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, image => image.id)@JoinColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/place-types/entities/place-type.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        places\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Place[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, place => place.type)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/place-types/entities/place-type.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'int', unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/place-types/entities/place-type.entity.ts:19\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  Column,\n  PrimaryGeneratedColumn,\n  OneToMany,\n  PrimaryColumn,\n  OneToOne,\n  JoinColumn,\n} from 'typeorm';\nimport { Place } from '../../places/entities/place.entity';\nimport { Image } from '../../images/entities/image.entity';\n\n@Entity()\nexport class PlaceType {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ type: 'int', unique: true })\n  title: number;\n\n  @Column({ default: false })\n  commercial: boolean;\n\n  @OneToOne(() => Image, (image) => image.id)\n  @JoinColumn()\n  image: Image;\n\n  @OneToMany(() => Place, (place) => place.type)\n  places: Place[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PlaceTypeDto.html":{"url":"classes/PlaceTypeDto.html","title":"class - PlaceTypeDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PlaceTypeDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/place-types/dto/place-type.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                commercial\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                image\n                            \n                            \n                                    \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(partial: Partial)\n                    \n                \n                        \n                            \n                                Defined in src/place-types/dto/place-type.dto.ts:26\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        partial\n                                                  \n                                                        \n                                                                    Partial\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        commercial\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({title: 'Place type is commercial', type: Boolean, default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/place-types/dto/place-type.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({title: 'Place type id', type: Number})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/place-types/dto/place-type.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({title: 'Image url', type: String, nullable: true})@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/place-types/dto/place-type.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({title: 'Place type title', type: String})@Transform( => value.text)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/place-types/dto/place-type.dto.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Transform } from 'class-transformer';\nimport { PlaceType } from '../entities/place-type.entity';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { Image } from '../../images/entities/image.entity';\nimport { Translation } from '../../translations/entities/translation.entity';\n\nexport class PlaceTypeDto {\n  @ApiProperty({ title: 'Place type id', type: Number })\n  id: number;\n\n  @ApiProperty({ title: 'Place type title', type: String })\n  @Transform(({ value }: { value: Partial }) => value?.text)\n  title: string;\n\n  @ApiProperty({\n    title: 'Place type is commercial',\n    type: Boolean,\n    default: false,\n  })\n  commercial: boolean;\n\n  @ApiProperty({ title: 'Image url', type: String, nullable: true })\n  @Transform(\n    ({ value }: { value: Partial | null }) => value?.url || null,\n  )\n  image: string;\n\n  constructor(partial: Partial) {\n    Object.assign(this, partial);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PlaceTypesController.html":{"url":"controllers/PlaceTypesController.html","title":"controller - PlaceTypesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PlaceTypesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/place-types/place-types.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                placeTypes\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                findAll\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                findOne\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        \n                        \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(langId: number, createPlaceTypeDto: CreatePlaceTypeDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Create Place type'})@ApiOkResponse({description: 'OK', type: PlaceTypeDto})@ApiBadRequestResponse({description: 'Validation failed', type: ValidationExceptionDto})@ApiQuery({name: 'lang', type: Number, description: 'The ID of the language'})@ApiBody({type: CreatePlaceTypeDto})@Post()\n                \n            \n\n            \n                \n                    Defined in src/place-types/place-types.controller.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    langId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createPlaceTypeDto\n                                    \n                                                CreatePlaceTypeDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(langId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get all place types by language id'})@ApiOkResponse({description: 'OK', type: PlaceTypeDto, isArray: true})@ApiQuery({name: 'lang', type: Number, description: 'The ID of the language'})@UseInterceptors(ClassSerializerInterceptor)@Get()\n                \n            \n\n            \n                \n                    Defined in src/place-types/place-types.controller.ts:71\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    langId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: number, langId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get place type by id and language id'})@ApiOkResponse({description: 'OK', type: PlaceTypeDto})@ApiNotFoundResponse({type: NotFoundException})@ApiParam({name: 'id', type: Number, description: 'The ID of Place Type'})@ApiQuery({name: 'lang', type: Number, description: 'The ID of the language'})@UseInterceptors(ClassSerializerInterceptor)@Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/place-types/place-types.controller.ts:98\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    langId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  ClassSerializerInterceptor,\n  Controller,\n  Get,\n  NotFoundException,\n  Param,\n  ParseIntPipe,\n  Post,\n  Query,\n  UseInterceptors,\n} from '@nestjs/common';\nimport { PlaceTypesService } from './place-types.service';\nimport { CreatePlaceTypeDto } from './dto/create-place-type.dto';\nimport {\n  ApiBadRequestResponse,\n  ApiBody,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiParam,\n  ApiQuery,\n  ApiTags,\n} from '@nestjs/swagger';\nimport { PlaceTypeDto } from './dto/place-type.dto';\nimport { ValidationExceptionDto } from '../shared/validation/validation-exception.dto';\n\n@ApiTags('Place types')\n@Controller('placeTypes')\nexport class PlaceTypesController {\n  constructor(private readonly placeTypesService: PlaceTypesService) {}\n\n  @ApiOperation({ summary: 'Create Place type' })\n  @ApiOkResponse({\n    description: 'OK',\n    type: PlaceTypeDto,\n  })\n  @ApiBadRequestResponse({\n    description: 'Validation failed',\n    type: ValidationExceptionDto,\n  })\n  @ApiQuery({\n    name: 'lang',\n    type: Number,\n    description: 'The ID of the language',\n  })\n  @ApiBody({\n    type: CreatePlaceTypeDto,\n  })\n  @Post()\n  async create(\n    @Query('lang', ParseIntPipe) langId: number,\n    @Body() createPlaceTypeDto: CreatePlaceTypeDto,\n  ) {\n    return await this.placeTypesService.create(langId, createPlaceTypeDto);\n  }\n\n  @ApiOperation({ summary: 'Get all place types by language id' })\n  @ApiOkResponse({\n    description: 'OK',\n    type: PlaceTypeDto,\n    isArray: true,\n  })\n  @ApiQuery({\n    name: 'lang',\n    type: Number,\n    description: 'The ID of the language',\n  })\n  @UseInterceptors(ClassSerializerInterceptor)\n  @Get()\n  async findAll(\n    @Query('lang', ParseIntPipe) langId: number,\n  ): Promise {\n    const types = await this.placeTypesService.findAll(langId);\n    return types.map((t) => new PlaceTypeDto(t));\n  }\n\n  @ApiOperation({ summary: 'Get place type by id and language id' })\n  @ApiOkResponse({\n    description: 'OK',\n    type: PlaceTypeDto,\n  })\n  @ApiNotFoundResponse({\n    type: NotFoundException,\n  })\n  @ApiParam({\n    name: 'id',\n    type: Number,\n    description: 'The ID of Place Type',\n  })\n  @ApiQuery({\n    name: 'lang',\n    type: Number,\n    description: 'The ID of the language',\n  })\n  @UseInterceptors(ClassSerializerInterceptor)\n  @Get(':id')\n  async findOne(\n    @Param('id', ParseIntPipe) id: number,\n    @Query('lang', ParseIntPipe) langId: number,\n  ) {\n    const placeType = await this.placeTypesService.findOne(id, langId);\n    return new PlaceTypeDto(placeType);\n  }\n\n  // @Patch(':id')\n  // update(\n  //   @Param('id', ParseIntPipe) id: number,\n  //   @Query('lang', ParseIntPipe) langId: number,\n  //   @Body() updatePlaceTypeDto: UpdatePlaceTypeDto,\n  // ) {\n  //   return this.placeTypesService.update(id, langId, updatePlaceTypeDto);\n  // }\n  //\n  // @Delete(':id')\n  // remove(@Param('id', ParseIntPipe) id: number) {\n  //   return this.placeTypesService.remove(id);\n  // }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PlaceTypesModule.html":{"url":"modules/PlaceTypesModule.html","title":"module - PlaceTypesModule","body":"\n                   \n\n\n\n\n    Modules\n    PlaceTypesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PlaceTypesModule\n\n\n\ncluster_PlaceTypesModule_providers\n\n\n\ncluster_PlaceTypesModule_imports\n\n\n\n\nTranslationsModule\n\nTranslationsModule\n\n\n\nPlaceTypesModule\n\nPlaceTypesModule\n\nPlaceTypesModule -->\n\nTranslationsModule->PlaceTypesModule\n\n\n\n\n\nPlaceTypesService\n\nPlaceTypesService\n\nPlaceTypesModule -->\n\nPlaceTypesService->PlaceTypesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/place-types/place-types.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PlaceTypesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PlaceTypesController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            TranslationsModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PlaceTypesService } from './place-types.service';\nimport { PlaceTypesController } from './place-types.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { PlaceType } from './entities/place-type.entity';\nimport { TranslationsModule } from '../translations/translations.module';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([PlaceType]), TranslationsModule],\n  controllers: [PlaceTypesController],\n  providers: [PlaceTypesService],\n})\nexport class PlaceTypesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PlaceTypesService.html":{"url":"injectables/PlaceTypesService.html","title":"injectable - PlaceTypesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PlaceTypesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/place-types/place-types.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(placeTypesRepository: Repository, translationsService: TranslationsService)\n                    \n                \n                        \n                            \n                                Defined in src/place-types/place-types.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        placeTypesRepository\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        translationsService\n                                                  \n                                                        \n                                                                        TranslationsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(langId: number, createPlaceTypeDto: CreatePlaceTypeDto)\n                \n            \n\n\n            \n                \n                    Defined in src/place-types/place-types.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    langId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createPlaceTypeDto\n                                    \n                                                CreatePlaceTypeDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(langId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/place-types/place-types.service.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    langId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: number, langId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/place-types/place-types.service.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    langId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { CreatePlaceTypeDto } from './dto/create-place-type.dto';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { PlaceType } from './entities/place-type.entity';\nimport { TranslationsService } from '../translations/translations.service';\nimport { PlaceTypeDto } from './dto/place-type.dto';\nimport { Image } from '../images/entities/image.entity';\n\n@Injectable()\nexport class PlaceTypesService {\n  constructor(\n    @InjectRepository(PlaceType)\n    private placeTypesRepository: Repository,\n    private translationsService: TranslationsService,\n  ) {}\n\n  // This action adds a new placeType\n  async create(langId: number, createPlaceTypeDto: CreatePlaceTypeDto) {\n    const titleTranslation = await this.translationsService.createTranslation(\n      langId,\n      createPlaceTypeDto.title,\n      true,\n    );\n    // create non origin translation\n    const placeType = this.placeTypesRepository.create({\n      title: titleTranslation.textId,\n      commercial: createPlaceTypeDto.commercial,\n    });\n    if (createPlaceTypeDto.imageId) {\n      placeType.image = new Image();\n      placeType.image.id = createPlaceTypeDto.imageId;\n    }\n    await this.placeTypesRepository.save(placeType);\n    await this.translationsService.translateAll(\n      titleTranslation.text,\n      titleTranslation.textId,\n      langId,\n    );\n    const placeTypeDto = new PlaceTypeDto(placeType);\n    placeTypeDto.title = titleTranslation.text;\n    return placeTypeDto;\n  }\n\n  // This action finds all placeTypes by language id\n  async findAll(langId: number) {\n    return await this.placeTypesRepository\n      .createQueryBuilder('pt')\n      .leftJoinAndSelect('pt.image', 'image')\n      .innerJoinAndMapOne(\n        'pt.title',\n        'translation',\n        't',\n        'pt.title = t.textId AND t.language = :langId',\n        { langId },\n      )\n      .getMany();\n  }\n\n  async findOne(id: number, langId: number) {\n    const placeType = await this.placeTypesRepository\n      .createQueryBuilder('pt')\n      .leftJoinAndSelect('pt.image', 'image')\n      .innerJoinAndMapOne(\n        'pt.title',\n        'translation',\n        't',\n        'pt.title = t.textId AND t.language = :langId',\n        { langId },\n      )\n      .where('pt.id = :id', { id })\n      .getOne();\n    if (!placeType)\n      throw new NotFoundException(\n        `Place type with id ${id} by language id ${langId} was not found`,\n      );\n    return placeType;\n  }\n\n  // update(id: number, langId: number, updatePlaceTypeDto: UpdatePlaceTypeDto) {\n  //   return `This action updates a #${id} placeType`;\n  // }\n\n  // remove(id: number) {\n  //   return `This action removes a #${id} placeType`;\n  // }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PlacesController.html":{"url":"controllers/PlacesController.html","title":"controller - PlacesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PlacesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/places/places.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                /places\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                administrationDeleteComment\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                administrationUpdateComment\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                changeLike\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                createComment\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                deleteComment\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getAll\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getAllComments\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getById\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                getPlacesSlugs\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                update\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                updateComment\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        \n                        \n                        Async\n                        administrationDeleteComment\n                        \n                    \n                \n            \n            \n                \n                    \n                    administrationDeleteComment(commentId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Administration - Delete comment'})@ApiOkResponse({description: 'OK'})@ApiBadRequestResponse({type: BadRequestException})@ApiParam({name: 'commentId', type: Number, description: 'The ID of the comment'})@Auth(RoleNamesEnum.OWNER, RoleNamesEnum.ADMIN)@Delete('comments/:commentId/administration')\n                \n            \n\n            \n                \n                    Defined in src/places/places.controller.ts:349\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    commentId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        \n                        \n                        Async\n                        administrationUpdateComment\n                        \n                    \n                \n            \n            \n                \n                    \n                    administrationUpdateComment(commentId: number, updateCommentDto: UpdateCommentDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Administration - Update comment'})@ApiOkResponse({description: 'OK', type: CommentDto})@ApiParam({name: 'commentId', type: Number, description: 'The ID of the comment'})@UseInterceptors(ClassSerializerInterceptor)@Auth(RoleNamesEnum.OWNER, RoleNamesEnum.ADMIN)@Put('comments/:commentId/administration')\n                \n            \n\n            \n                \n                    Defined in src/places/places.controller.ts:293\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    commentId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateCommentDto\n                                    \n                                                UpdateCommentDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        \n                        Async\n                        changeLike\n                        \n                    \n                \n            \n            \n                \n                    \n                    changeLike(id: number, tokenPayload: TokenPayloadDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Change like'})@ApiOkResponse({description: 'OK'})@ApiParam({name: 'id', type: Number, description: 'The ID of the place'})@Auth()@Put(':id/likes')\n                \n            \n\n            \n                \n                    Defined in src/places/places.controller.ts:188\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    tokenPayload\n                                    \n                                                TokenPayloadDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        \n                        \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(langId: number, user: User, createPlaceDto: CreatePlaceDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Create Place'})@ApiOkResponse({description: 'OK', type: undefined})@ApiQuery({name: 'lang', type: Number, description: 'The ID of the language'})@ApiBody({type: CreatePlaceDto})@Auth()@Post()\n                \n            \n\n            \n                \n                    Defined in src/places/places.controller.ts:71\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    langId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createPlaceDto\n                                    \n                                                CreatePlaceDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        \n                        \n                        Async\n                        createComment\n                        \n                    \n                \n            \n            \n                \n                    \n                    createComment(id: number, tokenPayload: TokenPayloadDto, createCommentDto: CreateCommentDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Create comment'})@ApiOkResponse({description: 'OK', type: CommentDto})@ApiParam({name: 'id', type: Number, description: 'The ID of the place'})@UseInterceptors(ClassSerializerInterceptor)@Auth()@Post(':id/comments')\n                \n            \n\n            \n                \n                    Defined in src/places/places.controller.ts:233\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    tokenPayload\n                                    \n                                                TokenPayloadDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createCommentDto\n                                    \n                                                CreateCommentDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        Async\n                        deleteComment\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteComment(commentId: number, tokenPayload: TokenPayloadDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Delete your comment'})@ApiOkResponse({description: 'OK'})@ApiForbiddenResponse({type: ForbiddenException})@ApiBadRequestResponse({type: BadRequestException})@ApiParam({name: 'commentId', type: Number, description: 'The ID of the comment'})@Auth()@Delete('comments/:commentId')\n                \n            \n\n            \n                \n                    Defined in src/places/places.controller.ts:321\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    commentId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    tokenPayload\n                                    \n                                                TokenPayloadDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        \n                        Async\n                        getAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAll(langId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get all places by language id'})@ApiOkResponse({description: 'OK', type: SearchPlaceDto, isArray: true})@ApiQuery({name: 'lang', type: Number, description: 'The ID of the language'})@UseInterceptors(ClassSerializerInterceptor)@Get()\n                \n            \n\n            \n                \n                    Defined in src/places/places.controller.ts:92\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    langId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        \n                        \n                        Async\n                        getAllComments\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllComments(id: number, tokenPayload: TokenPayloadDto | null)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get comments'})@ApiBearerAuth('access-token')@ApiOkResponse({description: 'OK', type: CommentDto, isArray: true})@ApiParam({name: 'id', type: Number, description: 'The ID of the place'})@UseInterceptors(ClassSerializerInterceptor)@Get(':id/comments')\n                \n            \n\n            \n                \n                    Defined in src/places/places.controller.ts:209\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    tokenPayload\n                                    \n                                                TokenPayloadDto | null\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        Async\n                        getById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getById(slug: string, langId: number, tokenPayload: TokenPayloadDto | null)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get place by slug and language id'})@ApiBearerAuth('access-token')@ApiOkResponse({description: 'OK', type: PlaceDto})@ApiParam({name: 'slug', type: String, description: 'The slug of the place'})@ApiQuery({name: 'lang', type: Number, description: 'The ID of the language'})@UseInterceptors(ClassSerializerInterceptor)@Get(':slug')\n                \n            \n\n            \n                \n                    Defined in src/places/places.controller.ts:127\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    slug\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    langId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    tokenPayload\n                                    \n                                                TokenPayloadDto | null\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        Async\n                        getPlacesSlugs\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPlacesSlugs()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get all places slugs'})@ApiOkResponse({description: 'OK', type: PlaceSlugDto, isArray: true})@Get('slugs')\n                \n            \n\n            \n                \n                    Defined in src/places/places.controller.ts:104\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, langId: number, tokenPayload: TokenPayloadDto, updatePlaceDto: UpdatePlaceDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Update Place'})@ApiOkResponse({description: 'OK', type: undefined})@ApiParam({name: 'id', type: Number, description: 'The ID of the place'})@ApiQuery({name: 'lang', type: Number, description: 'The ID of the language'})@ApiBody({type: UpdatePlaceDto})@Auth()@Put(':id')\n                \n            \n\n            \n                \n                    Defined in src/places/places.controller.ts:160\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    langId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    tokenPayload\n                                    \n                                                TokenPayloadDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updatePlaceDto\n                                    \n                                                UpdatePlaceDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        Async\n                        updateComment\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateComment(commentId: number, tokenPayload: TokenPayloadDto, updateCommentDto: UpdateCommentDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Update your comment'})@ApiOkResponse({description: 'OK', type: CommentDto})@ApiForbiddenResponse({type: ForbiddenException})@ApiParam({name: 'commentId', type: Number, description: 'The ID of the comment'})@UseInterceptors(ClassSerializerInterceptor)@Auth()@Put('comments/:commentId')\n                \n            \n\n            \n                \n                    Defined in src/places/places.controller.ts:262\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    commentId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    tokenPayload\n                                    \n                                                TokenPayloadDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateCommentDto\n                                    \n                                                UpdateCommentDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  BadRequestException,\n  Body,\n  ClassSerializerInterceptor,\n  Controller,\n  Delete,\n  ForbiddenException,\n  Get,\n  Param,\n  ParseIntPipe,\n  Post,\n  Put,\n  Query,\n  UseInterceptors,\n} from '@nestjs/common';\nimport { PlacesService } from './places.service';\nimport {\n  ApiBadRequestResponse,\n  ApiBearerAuth,\n  ApiBody,\n  ApiForbiddenResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiParam,\n  ApiQuery,\n  ApiTags,\n  PickType,\n} from '@nestjs/swagger';\nimport { SearchPlaceDto } from './dto/search-place.dto';\nimport { CreatePlaceDto } from './dto/create-place.dto';\nimport { UserFromTokenPipe } from '../auth/pipes/user-from-token.pipe';\nimport { User } from '../users/entities/user.entity';\nimport { TokenPayload } from '../auth/decorators/token-payload.decorator';\nimport { Auth } from '../auth/decorators/auth.decorator';\nimport { PlaceDto } from './dto/place.dto';\nimport { TokenPayloadDto } from '../auth/dto/token-payload.dto';\nimport { Token } from '../auth/decorators/token.decorator';\nimport { PayloadFromTokenPipe } from '../auth/pipes/payload-from-token.pipe';\nimport { Place } from './entities/place.entity';\nimport { UpdatePlaceDto } from './dto/update-place.dto';\nimport { CommentsService } from '../comments/comments.service';\nimport { CommentDto } from '../comments/dto/comment.dto';\nimport { CreateCommentDto } from '../comments/dto/create-comment.dto';\nimport { UpdateCommentDto } from '../comments/dto/update-comment.dto';\nimport { RoleNamesEnum } from '../roles/enums/role-names.enum';\nimport { PlaceSlugDto } from './dto/place-slug.dto';\n\n@ApiTags('Places')\n@Controller('/places')\nexport class PlacesController {\n  constructor(\n    private readonly placesService: PlacesService,\n    private readonly commentsService: CommentsService,\n  ) {}\n\n  @ApiOperation({ summary: 'Create Place' })\n  @ApiOkResponse({\n    description: 'OK',\n    type: PickType(Place, ['id']),\n  })\n  @ApiQuery({\n    name: 'lang',\n    type: Number,\n    description: 'The ID of the language',\n  })\n  @ApiBody({\n    type: CreatePlaceDto,\n  })\n  @Auth()\n  @Post()\n  async create(\n    @Query('lang', ParseIntPipe) langId: number,\n    @TokenPayload(UserFromTokenPipe) user: User,\n    @Body() createPlaceDto: CreatePlaceDto,\n  ) {\n    return await this.placesService.create(langId, user, createPlaceDto);\n  }\n\n  @ApiOperation({ summary: 'Get all places by language id' })\n  @ApiOkResponse({\n    description: 'OK',\n    type: SearchPlaceDto,\n    isArray: true,\n  })\n  @ApiQuery({\n    name: 'lang',\n    type: Number,\n    description: 'The ID of the language',\n  })\n  @UseInterceptors(ClassSerializerInterceptor)\n  @Get()\n  async getAll(@Query('lang', ParseIntPipe) langId: number) {\n    const places = await this.placesService.findAll(langId);\n    return places.map((p) => new SearchPlaceDto(p));\n  }\n\n  @ApiOperation({ summary: 'Get all places slugs' })\n  @ApiOkResponse({\n    description: 'OK',\n    type: PlaceSlugDto,\n    isArray: true,\n  })\n  @Get('slugs')\n  async getPlacesSlugs() {\n    const slugs = await this.placesService.getPlacesSlugs();\n    return slugs;\n  }\n\n  @ApiOperation({ summary: 'Get place by slug and language id' })\n  @ApiBearerAuth('access-token')\n  @ApiOkResponse({\n    description: 'OK',\n    type: PlaceDto,\n  })\n  @ApiParam({\n    name: 'slug',\n    type: String,\n    description: 'The slug of the place',\n  })\n  @ApiQuery({\n    name: 'lang',\n    type: Number,\n    description: 'The ID of the language',\n  })\n  @UseInterceptors(ClassSerializerInterceptor)\n  @Get(':slug')\n  async getById(\n    @Param('slug') slug: string,\n    @Query('lang', ParseIntPipe) langId: number,\n    @Token(PayloadFromTokenPipe) tokenPayload: TokenPayloadDto | null,\n  ) {\n    const place = await this.placesService.findOneBySlug(\n      slug,\n      langId,\n      tokenPayload,\n    );\n    return new PlaceDto(place);\n  }\n\n  @ApiOperation({ summary: 'Update Place' })\n  @ApiOkResponse({\n    description: 'OK',\n    type: PickType(Place, ['id']),\n  })\n  @ApiParam({\n    name: 'id',\n    type: Number,\n    description: 'The ID of the place',\n  })\n  @ApiQuery({\n    name: 'lang',\n    type: Number,\n    description: 'The ID of the language',\n  })\n  @ApiBody({\n    type: UpdatePlaceDto,\n  })\n  @Auth()\n  @Put(':id')\n  async update(\n    @Param('id', ParseIntPipe) id: number,\n    @Query('lang', ParseIntPipe) langId: number,\n    @TokenPayload() tokenPayload: TokenPayloadDto,\n    @Body() updatePlaceDto: UpdatePlaceDto,\n  ) {\n    const userIsPlaceAuthor = await this.placesService.checkUserRelation(\n      tokenPayload.id,\n      id,\n    );\n    if (!userIsPlaceAuthor)\n      throw new ForbiddenException({\n        message: 'Forbidden, user is not author',\n      });\n    return await this.placesService.updatePlace(id, langId, updatePlaceDto);\n  }\n\n  @ApiOperation({ summary: 'Change like' })\n  @ApiOkResponse({\n    description: 'OK',\n  })\n  @ApiParam({\n    name: 'id',\n    type: Number,\n    description: 'The ID of the place',\n  })\n  @Auth()\n  @Put(':id/likes')\n  async changeLike(\n    @Param('id', ParseIntPipe) id: number,\n    @TokenPayload() tokenPayload: TokenPayloadDto,\n  ) {\n    return await this.placesService.changeLike(tokenPayload.id, id);\n  }\n\n  @ApiOperation({ summary: 'Get comments' })\n  @ApiBearerAuth('access-token')\n  @ApiOkResponse({\n    description: 'OK',\n    type: CommentDto,\n    isArray: true,\n  })\n  @ApiParam({\n    name: 'id',\n    type: Number,\n    description: 'The ID of the place',\n  })\n  @UseInterceptors(ClassSerializerInterceptor)\n  @Get(':id/comments')\n  async getAllComments(\n    @Param('id', ParseIntPipe) id: number,\n    @Token(PayloadFromTokenPipe) tokenPayload: TokenPayloadDto | null,\n  ) {\n    const comments = await this.commentsService.findAllPlaceComments(\n      id,\n      tokenPayload?.id,\n    );\n    return comments.map((c) => new CommentDto(c));\n  }\n\n  @ApiOperation({ summary: 'Create comment' })\n  @ApiOkResponse({\n    description: 'OK',\n    type: CommentDto,\n  })\n  @ApiParam({\n    name: 'id',\n    type: Number,\n    description: 'The ID of the place',\n  })\n  @UseInterceptors(ClassSerializerInterceptor)\n  @Auth()\n  @Post(':id/comments')\n  async createComment(\n    @Param('id', ParseIntPipe) id: number,\n    @TokenPayload() tokenPayload: TokenPayloadDto,\n    @Body() createCommentDto: CreateCommentDto,\n  ) {\n    const comment = await this.commentsService.createPlaceComment(\n      id,\n      tokenPayload.id,\n      createCommentDto,\n    );\n    return new CommentDto(comment);\n  }\n\n  @ApiOperation({ summary: 'Update your comment' })\n  @ApiOkResponse({\n    description: 'OK',\n    type: CommentDto,\n  })\n  @ApiForbiddenResponse({\n    type: ForbiddenException,\n  })\n  @ApiParam({\n    name: 'commentId',\n    type: Number,\n    description: 'The ID of the comment',\n  })\n  @UseInterceptors(ClassSerializerInterceptor)\n  @Auth()\n  @Put('comments/:commentId')\n  async updateComment(\n    @Param('commentId', ParseIntPipe) commentId: number,\n    @TokenPayload() tokenPayload: TokenPayloadDto,\n    @Body() updateCommentDto: UpdateCommentDto,\n  ) {\n    const userIsCommentOwner = await this.commentsService.checkCanManage(\n      tokenPayload.id,\n      commentId,\n    );\n    if (!userIsCommentOwner)\n      throw new ForbiddenException({ message: 'Access forbidden' });\n    const comment = await this.commentsService.updatePlaceComment(\n      commentId,\n      updateCommentDto,\n    );\n    return new CommentDto(comment);\n  }\n\n  @ApiOperation({ summary: 'Administration - Update comment' })\n  @ApiOkResponse({\n    description: 'OK',\n    type: CommentDto,\n  })\n  @ApiParam({\n    name: 'commentId',\n    type: Number,\n    description: 'The ID of the comment',\n  })\n  @UseInterceptors(ClassSerializerInterceptor)\n  @Auth(RoleNamesEnum.OWNER, RoleNamesEnum.ADMIN)\n  @Put('comments/:commentId/administration')\n  async administrationUpdateComment(\n    @Param('commentId', ParseIntPipe) commentId: number,\n    @Body() updateCommentDto: UpdateCommentDto,\n  ) {\n    const comment = await this.commentsService.updatePlaceComment(\n      commentId,\n      updateCommentDto,\n    );\n    return new CommentDto(comment);\n  }\n\n  @ApiOperation({ summary: 'Delete your comment' })\n  @ApiOkResponse({\n    description: 'OK',\n  })\n  @ApiForbiddenResponse({\n    type: ForbiddenException,\n  })\n  @ApiBadRequestResponse({\n    type: BadRequestException,\n  })\n  @ApiParam({\n    name: 'commentId',\n    type: Number,\n    description: 'The ID of the comment',\n  })\n  @Auth()\n  @Delete('comments/:commentId')\n  async deleteComment(\n    @Param('commentId', ParseIntPipe) commentId: number,\n    @TokenPayload() tokenPayload: TokenPayloadDto,\n  ) {\n    const userIsCommentOwner = await this.commentsService.checkCanManage(\n      tokenPayload.id,\n      commentId,\n    );\n    if (!userIsCommentOwner)\n      throw new ForbiddenException({ message: 'Access forbidden' });\n    await this.commentsService.deleteComment(commentId);\n    return;\n  }\n\n  @ApiOperation({ summary: 'Administration - Delete comment' })\n  @ApiOkResponse({\n    description: 'OK',\n  })\n  @ApiBadRequestResponse({\n    type: BadRequestException,\n  })\n  @ApiParam({\n    name: 'commentId',\n    type: Number,\n    description: 'The ID of the comment',\n  })\n  @Auth(RoleNamesEnum.OWNER, RoleNamesEnum.ADMIN)\n  @Delete('comments/:commentId/administration')\n  async administrationDeleteComment(\n    @Param('commentId', ParseIntPipe) commentId: number,\n  ) {\n    await this.commentsService.deleteComment(commentId);\n    return;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PlacesModule.html":{"url":"modules/PlacesModule.html","title":"module - PlacesModule","body":"\n                   \n\n\n\n\n    Modules\n    PlacesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PlacesModule\n\n\n\ncluster_PlacesModule_providers\n\n\n\ncluster_PlacesModule_imports\n\n\n\n\nCommentsModule\n\nCommentsModule\n\n\n\nPlacesModule\n\nPlacesModule\n\nPlacesModule -->\n\nCommentsModule->PlacesModule\n\n\n\n\n\nImagesModule\n\nImagesModule\n\nPlacesModule -->\n\nImagesModule->PlacesModule\n\n\n\n\n\nTranslationsModule\n\nTranslationsModule\n\nPlacesModule -->\n\nTranslationsModule->PlacesModule\n\n\n\n\n\nPlacesService\n\nPlacesService\n\nPlacesModule -->\n\nPlacesService->PlacesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/places/places.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PlacesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PlacesController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CommentsModule\n                        \n                        \n                            ImagesModule\n                        \n                        \n                            TranslationsModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PlacesController } from './places.controller';\nimport { PlacesService } from './places.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Place } from './entities/place.entity';\nimport { TranslationsModule } from '../translations/translations.module';\nimport { PlaceType } from '../place-types/entities/place-type.entity';\nimport { PlaceCategory } from '../place-categories/entities/place-category.entity';\nimport { ImagesModule } from '../images/images.module';\nimport { Like } from './entities/like.entity';\nimport { CommentsModule } from '../comments/comments.module';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([Place, PlaceType, PlaceCategory, Like]),\n    ImagesModule,\n    TranslationsModule,\n    CommentsModule,\n  ],\n  controllers: [PlacesController],\n  providers: [PlacesService],\n})\nexport class PlacesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PlacesService.html":{"url":"injectables/PlacesService.html","title":"injectable - PlacesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PlacesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/places/places.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                addView\n                            \n                            \n                                    Async\n                                changeLike\n                            \n                            \n                                    Private\n                                    Async\n                                checkExist\n                            \n                            \n                                    Async\n                                checkUserRelation\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Private\n                                createLike\n                            \n                            \n                                    Private\n                                    Async\n                                createTranslations\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOneBySlug\n                            \n                            \n                                    Async\n                                getPlacesSlugs\n                            \n                            \n                                    Private\n                                isLikedByUser\n                            \n                            \n                                    Async\n                                updatePlace\n                            \n                            \n                                    Private\n                                    Async\n                                validatePlaceCategories\n                            \n                            \n                                    Private\n                                    Async\n                                validatePlaceType\n                            \n                            \n                                    Private\n                                    Async\n                                validateSlugExists\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(placesRepository: Repository, likesRepository: Repository, placeTypesRepository: Repository, placeCategoriesRepository: Repository, imagesService: ImagesService, translationsService: TranslationsService)\n                    \n                \n                        \n                            \n                                Defined in src/places/places.service.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        placesRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        likesRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        placeTypesRepository\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        placeCategoriesRepository\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        imagesService\n                                                  \n                                                        \n                                                                        ImagesService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        translationsService\n                                                  \n                                                        \n                                                                        TranslationsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        addView\n                        \n                    \n                \n            \n            \n                \n                    \n                    addView(placeId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/places/places.service.ts:205\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    placeId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        changeLike\n                        \n                    \n                \n            \n            \n                \n                    \n                    changeLike(userId: number, placeId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/places/places.service.ts:323\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    placeId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        checkExist\n                        \n                    \n                \n            \n            \n                \n                    \n                    checkExist(placeId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/places/places.service.ts:218\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    placeId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        checkUserRelation\n                        \n                    \n                \n            \n            \n                \n                    \n                    checkUserRelation(userId: number, placeId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/places/places.service.ts:298\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    placeId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(langId: number, author: User, createPlaceDto: CreatePlaceDto)\n                \n            \n\n\n            \n                \n                    Defined in src/places/places.service.ts:114\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    langId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    author\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createPlaceDto\n                                    \n                                                CreatePlaceDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        createLike\n                        \n                    \n                \n            \n            \n                \n                    \n                    createLike()\n                \n            \n\n\n            \n                \n                    Defined in src/places/places.service.ts:316\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        createTranslations\n                        \n                    \n                \n            \n            \n                \n                    \n                    createTranslations(langId: number, dto: CreatePlaceDto | UpdatePlaceDto, translateAll)\n                \n            \n\n\n            \n                \n                    Defined in src/places/places.service.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    langId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    dto\n                                    \n                                                CreatePlaceDto | UpdatePlaceDto\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    translateAll\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        true\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(langId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/places/places.service.ts:145\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    langId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneBySlug\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneBySlug(slug: string, langId: number, tokenPayload: TokenPayloadDto | null)\n                \n            \n\n\n            \n                \n                    Defined in src/places/places.service.ts:226\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    slug\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    langId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    tokenPayload\n                                    \n                                                TokenPayloadDto | null\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        null\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getPlacesSlugs\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPlacesSlugs()\n                \n            \n\n\n            \n                \n                    Defined in src/places/places.service.ts:309\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        isLikedByUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    isLikedByUser(placeLikes: Like[], userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/places/places.service.ts:214\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    placeLikes\n                                    \n                                                Like[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updatePlace\n                        \n                    \n                \n            \n            \n                \n                    \n                    updatePlace(placeId: number, langId: number, updatePlaceDto: UpdatePlaceDto, admin?: Admin)\n                \n            \n\n\n            \n                \n                    Defined in src/places/places.service.ts:371\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    placeId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    langId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updatePlaceDto\n                                    \n                                                UpdatePlaceDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    admin\n                                    \n                                                Admin\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        validatePlaceCategories\n                        \n                    \n                \n            \n            \n                \n                    \n                    validatePlaceCategories(dto: CreatePlaceDto | UpdatePlaceDto)\n                \n            \n\n\n            \n                \n                    Defined in src/places/places.service.ts:99\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                CreatePlaceDto | UpdatePlaceDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        validatePlaceType\n                        \n                    \n                \n            \n            \n                \n                    \n                    validatePlaceType(dto: CreatePlaceDto | UpdatePlaceDto)\n                \n            \n\n\n            \n                \n                    Defined in src/places/places.service.ts:86\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                CreatePlaceDto | UpdatePlaceDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        validateSlugExists\n                        \n                    \n                \n            \n            \n                \n                    \n                    validateSlugExists(slug: string)\n                \n            \n\n\n            \n                \n                    Defined in src/places/places.service.ts:106\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    slug\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Injectable,\n  NotFoundException,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Place } from './entities/place.entity';\nimport { Equal, In, Repository } from 'typeorm';\nimport { CreatePlaceDto } from './dto/create-place.dto';\nimport { TranslationsService } from '../translations/translations.service';\nimport { PlaceType } from '../place-types/entities/place-type.entity';\nimport { PlaceCategory } from '../place-categories/entities/place-category.entity';\nimport { ImagesService } from '../images/images.service';\nimport { User } from '../users/entities/user.entity';\nimport { TokenPayloadDto } from '../auth/dto/token-payload.dto';\nimport { Like } from './entities/like.entity';\nimport { UpdatePlaceDto } from './dto/update-place.dto';\nimport { Admin } from '../entities/admin.entity';\n\n@Injectable()\nexport class PlacesService {\n  constructor(\n    @InjectRepository(Place)\n    private placesRepository: Repository,\n    @InjectRepository(Like)\n    private likesRepository: Repository,\n    @InjectRepository(PlaceType)\n    private placeTypesRepository: Repository,\n    @InjectRepository(PlaceCategory)\n    private placeCategoriesRepository: Repository,\n    private imagesService: ImagesService,\n    private translationsService: TranslationsService,\n  ) {}\n\n  private async createTranslations(\n    langId: number,\n    dto: CreatePlaceDto | UpdatePlaceDto,\n    translateAll = true,\n  ) {\n    const titleTranslation = await this.translationsService.createTranslation(\n      langId,\n      dto.title,\n      true,\n    );\n\n    const descriptionTranslation =\n      await this.translationsService.createTranslation(\n        langId,\n        dto.description,\n        true,\n      );\n\n    const addressTranslation = await this.translationsService.createTranslation(\n      langId,\n      dto.address,\n      true,\n    );\n    if (!titleTranslation || !descriptionTranslation || !addressTranslation)\n      throw new BadRequestException({ message: 'Invalid text data' });\n\n    if (translateAll) {\n      await this.translationsService.translateAll(\n        titleTranslation.text,\n        titleTranslation.textId,\n        langId,\n      );\n      await this.translationsService.translateAll(\n        descriptionTranslation.text,\n        descriptionTranslation.textId,\n        langId,\n      );\n      await this.translationsService.translateAll(\n        addressTranslation.text,\n        addressTranslation.textId,\n        langId,\n      );\n    }\n\n    return {\n      titleTranslation,\n      descriptionTranslation,\n      addressTranslation,\n    };\n  }\n\n  private async validatePlaceType(dto: CreatePlaceDto | UpdatePlaceDto) {\n    const placeType = await this.placeTypesRepository.findOne({\n      where: {\n        id: Equal(dto.placeTypeId),\n      },\n    });\n    if (!placeType)\n      throw new BadRequestException({\n        message: `No place type with id: ${dto.placeTypeId} found`,\n      });\n    return placeType;\n  }\n\n  private async validatePlaceCategories(dto: CreatePlaceDto | UpdatePlaceDto) {\n    const placeCategories = await this.placeCategoriesRepository.findBy({\n      id: In(dto.categoriesIds),\n    });\n    return placeCategories ?? [];\n  }\n\n  private async validateSlugExists(slug: string) {\n    return this.placesRepository.exist({\n      where: {\n        slug: Equal(slug),\n      },\n    });\n  }\n\n  async create(langId: number, author: User, createPlaceDto: CreatePlaceDto) {\n    const slugExists = await this.validateSlugExists(createPlaceDto.slug);\n    if (slugExists)\n      throw new BadRequestException({\n        message: `Slug ${createPlaceDto.slug} already exists!`,\n      });\n    const placeType = await this.validatePlaceType(createPlaceDto);\n    const placeCategories = await this.validatePlaceCategories(createPlaceDto);\n\n    const placeImages = await this.imagesService.updatePositions(\n      createPlaceDto.imagesIds,\n    );\n\n    const translations = await this.createTranslations(langId, createPlaceDto);\n\n    const place = this.placesRepository.create();\n    place.slug = createPlaceDto.slug;\n    place.title = translations.titleTranslation.textId;\n    place.description = translations.descriptionTranslation.textId;\n    place.address = translations.addressTranslation.textId;\n    place.type = placeType;\n    place.coordinates = createPlaceDto.coordinates;\n    place.categories = placeCategories;\n    place.images = placeImages;\n    if (createPlaceDto.website) place.website = createPlaceDto.website;\n    place.author = author;\n\n    const { id } = await this.placesRepository.save(place);\n    return { id: id };\n  }\n\n  async findAll(langId: number) {\n    return this.placesRepository\n      .createQueryBuilder('place')\n      .leftJoinAndSelect('place.categories', 'categories')\n      .leftJoinAndSelect('place.type', 'type')\n      .leftJoinAndMapOne(\n        'place.images',\n        'image',\n        'place_image',\n        'place_image.place = place.id AND place_image.position = :position',\n        { position: 0 },\n      )\n      .leftJoinAndMapOne(\n        'type.image',\n        'image',\n        'type_image',\n        'type.image = type_image.id',\n      )\n      .leftJoinAndMapOne(\n        'categories.image',\n        'image',\n        'categories_image',\n        'categories.image = categories_image.id',\n      )\n      .leftJoinAndMapOne(\n        'type.title',\n        'translation',\n        'type_t',\n        'type.title = type_t.textId AND type_t.language = :langId',\n        { langId },\n      )\n      .leftJoinAndMapOne(\n        'categories.title',\n        'translation',\n        'categories_t',\n        'categories.title = categories_t.textId AND categories_t.language = :langId',\n        { langId },\n      )\n      .leftJoinAndMapOne(\n        'place.title',\n        'translation',\n        'title_t',\n        'place.title = title_t.textId AND title_t.language = :langId',\n        { langId },\n      )\n      .leftJoinAndMapOne(\n        'place.address',\n        'translation',\n        'address_t',\n        'place.address = address_t.textId AND address_t.language = :langId',\n        { langId },\n      )\n      .orderBy({\n        'place.likesCount': 'DESC',\n        'place.viewsCount': 'DESC',\n        'place.createdAt': 'DESC',\n      })\n      .getMany();\n  }\n\n  private async addView(placeId: number) {\n    return this.placesRepository\n      .createQueryBuilder()\n      .update()\n      .set({ viewsCount: () => 'viewsCount + 1' })\n      .where({ id: Equal(placeId) })\n      .execute();\n  }\n\n  private isLikedByUser(placeLikes: Like[], userId: number): boolean {\n    return placeLikes.findIndex((pl) => pl.user?.id === userId) !== -1;\n  }\n\n  private async checkExist(placeId: number): Promise {\n    return this.placesRepository.exist({\n      where: {\n        id: Equal(placeId),\n      },\n    });\n  }\n\n  async findOneBySlug(\n    slug: string,\n    langId: number,\n    tokenPayload: TokenPayloadDto | null = null,\n  ) {\n    const place = await this.placesRepository\n      .createQueryBuilder('place')\n      .where('place.slug = :slug', { slug })\n      .leftJoinAndSelect('place.categories', 'categories')\n      .leftJoinAndSelect('place.type', 'type')\n      .leftJoinAndSelect('place.images', 'image')\n      .addOrderBy('image.position')\n      .leftJoinAndSelect('place.likes', 'like')\n      .leftJoinAndSelect('like.user', 'likeUser')\n      .leftJoinAndMapOne(\n        'type.image',\n        'image',\n        'type_image',\n        'type.image = type_image.id',\n      )\n      .leftJoinAndMapOne(\n        'categories.image',\n        'image',\n        'categories_image',\n        'categories.image = categories_image.id',\n      )\n      .leftJoinAndMapOne(\n        'type.title',\n        'translation',\n        'type_t',\n        'type.title = type_t.textId AND type_t.language = :langId',\n        { langId },\n      )\n      .leftJoinAndMapOne(\n        'categories.title',\n        'translation',\n        'categories_t',\n        'categories.title = categories_t.textId AND categories_t.language = :langId',\n        { langId },\n      )\n      .leftJoinAndMapOne(\n        'place.title',\n        'translation',\n        'title_t',\n        'place.title = title_t.textId AND title_t.language = :langId',\n        { langId },\n      )\n      .leftJoinAndMapOne(\n        'place.description',\n        'translation',\n        'description_t',\n        'place.description = description_t.textId AND description_t.language = :langId',\n        { langId },\n      )\n      .leftJoinAndMapOne(\n        'place.address',\n        'translation',\n        'address_t',\n        'place.address = address_t.textId AND address_t.language = :langId',\n        { langId },\n      )\n      .getOne();\n    if (!place) throw new NotFoundException({ message: 'Place not found' });\n    this.addView(place.id);\n    return {\n      ...place,\n      isLiked: Boolean(\n        tokenPayload?.id && this.isLikedByUser(place.likes, tokenPayload.id),\n      ),\n    };\n  }\n\n  async checkUserRelation(userId: number, placeId: number) {\n    return await this.placesRepository.exist({\n      where: {\n        author: {\n          id: Equal(userId),\n        },\n        id: Equal(placeId),\n      },\n    });\n  }\n\n  async getPlacesSlugs() {\n    return this.placesRepository\n      .createQueryBuilder('place')\n      .select(['place.id', 'place.slug'])\n      .getMany();\n  }\n\n  private createLike() {\n    const like = this.likesRepository.create();\n    like.place = new Place();\n    like.user = new User();\n    return like;\n  }\n\n  async changeLike(userId: number, placeId: number) {\n    const place = await this.placesRepository.findOne({\n      where: { id: Equal(placeId) },\n      relations: {\n        likes: true,\n      },\n      select: {\n        id: true,\n        likes: true,\n        likesCount: true,\n      },\n    });\n    if (!place) throw new NotFoundException({ message: 'Place not found' });\n    const likeExists = await this.likesRepository.exist({\n      where: {\n        user: {\n          id: Equal(userId),\n        },\n        place: {\n          id: Equal(placeId),\n        },\n      },\n    });\n    if (likeExists) {\n      place.likesCount = --place.likesCount;\n      await this.placesRepository.save(place);\n      await this.likesRepository.delete({\n        place: {\n          id: Equal(placeId),\n        },\n        user: {\n          id: Equal(userId),\n        },\n      });\n      await this.placesRepository.save(place);\n      return;\n    } else {\n      place.likesCount = ++place.likesCount;\n      const like = this.createLike();\n      like.place.id = placeId;\n      like.user.id = userId;\n      const savedLike = await this.likesRepository.save(like);\n      place.likes.push(savedLike);\n      await this.placesRepository.save(place);\n      return;\n    }\n  }\n\n  async updatePlace(\n    placeId: number,\n    langId: number,\n    updatePlaceDto: UpdatePlaceDto,\n    admin?: Admin,\n  ) {\n    try {\n      const exist = await this.checkExist(placeId);\n      if (!exist) throw new BadRequestException({ message: 'Not exits' });\n\n      const placeType = await this.validatePlaceType(updatePlaceDto);\n      const placeCategories = await this.validatePlaceCategories(\n        updatePlaceDto,\n      );\n\n      const placeImages = await this.imagesService.updatePositions(\n        updatePlaceDto.imagesIds,\n      );\n\n      const translations = await this.createTranslations(\n        langId,\n        updatePlaceDto,\n        updatePlaceDto.shouldTranslate,\n      );\n\n      await this.placesRepository.save({\n        id: placeId,\n        slug: updatePlaceDto.slug,\n        images: placeImages,\n        title: translations.titleTranslation.textId,\n        description: translations.descriptionTranslation.textId,\n        address: translations.addressTranslation.textId,\n        type: placeType,\n        coordinates: updatePlaceDto.coordinates,\n        categories: placeCategories,\n        website: updatePlaceDto.website,\n        moderation: !admin,\n        admin: admin,\n      });\n\n      return { id: placeId };\n    } catch (e) {\n      if (e instanceof BadRequestException) {\n        throw e;\n      }\n      throw new BadRequestException({ message: 'Incorrect details' });\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Role.html":{"url":"entities/Role.html","title":"entity - Role","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Role\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/roles/entities/role.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                users\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/roles/entities/role.entity.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         RoleNamesEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 50, unique: true, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/roles/entities/role.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        users\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, user => user.roles)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/roles/entities/role.entity.ts:19\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Entity, PrimaryGeneratedColumn, ManyToMany, Column } from 'typeorm';\nimport { User } from '../../users/entities/user.entity';\nimport { RoleNamesEnum } from '../enums/role-names.enum';\n\n@Entity()\nexport class Role {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({\n    type: 'varchar',\n    length: 50,\n    unique: true,\n    nullable: false,\n  })\n  name: RoleNamesEnum;\n\n  @ManyToMany(() => User, (user) => user.roles)\n  users: User[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RoleDto.html":{"url":"classes/RoleDto.html","title":"class - RoleDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RoleDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/roles/dto/role.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(partial: Partial)\n                    \n                \n                        \n                            \n                                Defined in src/roles/dto/role.dto.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        partial\n                                                  \n                                                        \n                                                                        Partial\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({title: 'Role id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/roles/dto/role.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         RoleNamesEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({title: 'Role name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/roles/dto/role.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { Role } from '../entities/role.entity';\nimport { RoleNamesEnum } from '../enums/role-names.enum';\n\nexport class RoleDto {\n  @ApiProperty({ title: 'Role id' })\n  id: number;\n\n  @ApiProperty({ title: 'Role name' })\n  name: RoleNamesEnum;\n\n  constructor(partial: Partial) {\n    Object.assign(this, partial);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RolesController.html":{"url":"controllers/RolesController.html","title":"controller - RolesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RolesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/roles/roles.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                roles\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                create\n                            \n                            \n                                    \n                                findAll\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getRoleByName\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        \n                        \n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createRoleDto: CreateRoleDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Create Role'})@ApiOkResponse({description: 'OK', type: RoleDto})@ApiBadRequestResponse({description: 'Role already exists'})@ApiBody({type: CreateRoleDto})@Auth(RoleNamesEnum.OWNER)@Post()\n                \n            \n\n            \n                \n                    Defined in src/roles/roles.controller.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createRoleDto\n                                    \n                                                CreateRoleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/roles/roles.controller.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        \n                        Async\n                        getRoleByName\n                        \n                    \n                \n            \n            \n                \n                    \n                    getRoleByName(name: RoleNamesEnum)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get role by name'})@ApiOkResponse({description: 'OK', type: RoleDto})@ApiNotFoundResponse({type: NotFoundException})@ApiParam({name: 'name', enum: RoleNamesEnum, description: 'Name of the role'})@Get(':name')\n                \n            \n\n            \n                \n                    Defined in src/roles/roles.controller.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                RoleNamesEnum\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Get,\n  NotFoundException,\n  Param,\n  Post,\n} from '@nestjs/common';\nimport { RolesService } from './roles.service';\nimport { CreateRoleDto } from './dto/create-role.dto';\nimport {\n  ApiBadRequestResponse,\n  ApiBody,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiParam,\n  ApiTags,\n} from '@nestjs/swagger';\nimport { RoleDto } from './dto/role.dto';\nimport { RoleNamesEnum } from './enums/role-names.enum';\nimport { Auth } from '../auth/decorators/auth.decorator';\n\n@ApiTags('Roles')\n@Controller('roles')\nexport class RolesController {\n  constructor(private readonly rolesService: RolesService) {}\n\n  @ApiOperation({ summary: 'Create Role' })\n  @ApiOkResponse({\n    description: 'OK',\n    type: RoleDto,\n  })\n  @ApiBadRequestResponse({ description: 'Role already exists' })\n  @ApiBody({ type: CreateRoleDto })\n  @Auth(RoleNamesEnum.OWNER)\n  @Post()\n  create(@Body() createRoleDto: CreateRoleDto) {\n    return this.rolesService.create(createRoleDto);\n  }\n\n  @Get()\n  findAll() {\n    return this.rolesService.findAll();\n  }\n\n  @ApiOperation({ summary: 'Get role by name' })\n  @ApiOkResponse({\n    description: 'OK',\n    type: RoleDto,\n  })\n  @ApiNotFoundResponse({\n    type: NotFoundException,\n  })\n  @ApiParam({\n    name: 'name',\n    enum: RoleNamesEnum,\n    description: 'Name of the role',\n  })\n  @Get(':name')\n  async getRoleByName(@Param('name') name: RoleNamesEnum) {\n    const role = await this.rolesService.getRoleByName(name);\n    if (!role) throw new NotFoundException();\n    return new RoleDto(role);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RolesGuard.html":{"url":"guards/RolesGuard.html","title":"guard - RolesGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    RolesGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/roles/guards/RolesGuard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/roles/guards/RolesGuard.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/roles/guards/RolesGuard.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     boolean | Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { Reflector } from '@nestjs/core';\nimport {\n  CanActivate,\n  ExecutionContext,\n  Injectable,\n  Logger,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { RequestWithTokenPayload } from '../../shared/types';\nimport { ROLES_KEY } from '../decorators/roles.decorator';\nimport { RoleNamesEnum } from '../enums/role-names.enum';\n\n@Injectable()\nexport class RolesGuard implements CanActivate {\n  constructor(private readonly reflector: Reflector) {}\n\n  protected logger = new Logger('Roles-Guard');\n\n  canActivate(context: ExecutionContext): boolean | Promise {\n    const req = context.switchToHttp().getRequest();\n    try {\n      const requiredRoles = this.reflector.getAllAndOverride(\n        ROLES_KEY,\n        [context.getHandler(), context.getClass()],\n      );\n      const tokenPayload = req?.tokenPayload;\n      if (!tokenPayload)\n        throw new UnauthorizedException({ message: 'No token provided' });\n      if (!requiredRoles || requiredRoles?.length === 0) return true;\n\n      this.logger.warn(requiredRoles);\n      const access = tokenPayload.roles?.some((role) =>\n        requiredRoles.includes(role?.name),\n      );\n      this.logger.warn(`Access: ${access}`);\n      return access;\n    } catch (error) {\n      this.logger.error(error);\n      if (error instanceof UnauthorizedException) {\n        throw error;\n      }\n      throw new UnauthorizedException({ message: 'Invalid token' });\n    }\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RolesModule.html":{"url":"modules/RolesModule.html","title":"module - RolesModule","body":"\n                   \n\n\n\n\n    Modules\n    RolesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_RolesModule\n\n\n\ncluster_RolesModule_exports\n\n\n\ncluster_RolesModule_providers\n\n\n\n\nRolesService \n\nRolesService \n\n\n\nRolesModule\n\nRolesModule\n\nRolesService  -->\n\nRolesModule->RolesService \n\n\n\n\n\nRolesService\n\nRolesService\n\nRolesModule -->\n\nRolesService->RolesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/roles/roles.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RolesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RolesController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            RolesService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { RolesService } from './roles.service';\nimport { RolesController } from './roles.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Role } from './entities/role.entity';\n\n@Module({\n  controllers: [RolesController],\n  providers: [RolesService],\n  imports: [TypeOrmModule.forFeature([Role])],\n  exports: [RolesService],\n})\nexport class RolesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RolesService.html":{"url":"injectables/RolesService.html","title":"injectable - RolesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RolesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/roles/roles.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                    Async\n                                getRoleByName\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(rolesRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/roles/roles.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        rolesRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createRoleDto: CreateRoleDto)\n                \n            \n\n\n            \n                \n                    Defined in src/roles/roles.service.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createRoleDto\n                                    \n                                                CreateRoleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n            \n                \n                    Defined in src/roles/roles.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getRoleByName\n                        \n                    \n                \n            \n            \n                \n                    \n                    getRoleByName(roleName: RoleNamesEnum)\n                \n            \n\n\n            \n                \n                    Defined in src/roles/roles.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    roleName\n                                    \n                                                RoleNamesEnum\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Injectable } from '@nestjs/common';\nimport { CreateRoleDto } from './dto/create-role.dto';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Equal, Repository } from 'typeorm';\nimport { Role } from './entities/role.entity';\nimport { RoleNamesEnum } from './enums/role-names.enum';\n\n@Injectable()\nexport class RolesService {\n  constructor(\n    @InjectRepository(Role)\n    private rolesRepository: Repository,\n  ) {}\n\n  async create(createRoleDto: CreateRoleDto) {\n    try {\n      const role = await this.rolesRepository.create(createRoleDto);\n      return await this.rolesRepository.save(role);\n    } catch (e) {\n      throw new BadRequestException({ message: 'Role already exists' });\n    }\n  }\n\n  findAll() {\n    return `This action returns all roles`;\n  }\n\n  async getRoleByName(roleName: RoleNamesEnum) {\n    return this.rolesRepository.findOne({\n      where: {\n        name: Equal(roleName),\n      },\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SearchPlaceDto.html":{"url":"classes/SearchPlaceDto.html","title":"class - SearchPlaceDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SearchPlaceDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/places/dto/search-place.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                address\n                            \n                            \n                                    \n                                advEndDate\n                            \n                            \n                                    \n                                advertisement\n                            \n                            \n                                    \n                                    \n                                categories\n                            \n                            \n                                    \n                                coordinates\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                description\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                    \n                                images\n                            \n                            \n                                    \n                                likesCount\n                            \n                            \n                                    \n                                moderation\n                            \n                            \n                                    \n                                slug\n                            \n                            \n                                    \n                                    \n                                title\n                            \n                            \n                                    \n                                    \n                                type\n                            \n                            \n                                    \n                                viewsCount\n                            \n                            \n                                    \n                                    Optional\n                                website\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(partial: Partial)\n                    \n                \n                        \n                            \n                                Defined in src/places/dto/search-place.dto.ts:93\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        partial\n                                                  \n                                                        \n                                                                        Partial\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'Place address'})@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/places/dto/search-place.dto.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        advEndDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Date | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: Date, description: 'advertisement end date', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/places/dto/search-place.dto.ts:84\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        advertisement\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: Boolean, description: 'is place an advertisement'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/places/dto/search-place.dto.ts:77\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        categories\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PlaceCategoryDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: PlaceCategoryDto, description: 'Place categories', isArray: true})@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/places/dto/search-place.dto.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        coordinates\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'Place coordinates [lat;lng]'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/places/dto/search-place.dto.ts:64\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: Date, description: 'created at'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/places/dto/search-place.dto.ts:93\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/places/dto/search-place.dto.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({title: 'Place id', type: Number})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/places/dto/search-place.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        images\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'Place image'})@Expose({name: 'image'})@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/places/dto/search-place.dto.ts:61\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        likesCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: Number, description: 'Likes count'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/places/dto/search-place.dto.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        moderation\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/places/dto/search-place.dto.ts:87\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'Place url path'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/places/dto/search-place.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'Place title'})@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/places/dto/search-place.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PlaceTypeDto\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: PlaceTypeDto, description: 'Place type'})@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/places/dto/search-place.dto.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        viewsCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: Number, description: 'Views count'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/places/dto/search-place.dto.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        website\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'Place website url', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/places/dto/search-place.dto.ts:71\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { Place } from '../entities/place.entity';\nimport { Exclude, Expose, Transform } from 'class-transformer';\nimport { PlaceTypeDto } from '../../place-types/dto/place-type.dto';\nimport { PlaceType } from '../../place-types/entities/place-type.entity';\nimport { PlaceCategoryDto } from '../../place-categories/dto/place-category.dto';\nimport { PlaceCategory } from '../../place-categories/entities/place-category.entity';\nimport { Image } from '../../images/entities/image.entity';\nimport { Translation } from '../../translations/entities/translation.entity';\n\nexport class SearchPlaceDto {\n  @ApiProperty({ title: 'Place id', type: Number })\n  id: number;\n\n  @ApiProperty({ type: String, description: 'Place url path' })\n  slug: string;\n\n  @ApiProperty({ type: String, description: 'Place title' })\n  @Transform(\n    ({ value }: { value: Partial }) => value?.text ?? null,\n  )\n  title: string;\n\n  @Exclude()\n  description: string;\n\n  @ApiProperty({ type: Number, description: 'Likes count' })\n  likesCount: number;\n\n  @ApiProperty({ type: Number, description: 'Views count' })\n  viewsCount: number;\n\n  @ApiProperty({ type: String, description: 'Place address' })\n  @Transform(\n    ({ value }: { value: Partial }) => value?.text ?? null,\n  )\n  address: string;\n\n  @ApiProperty({ type: PlaceTypeDto, description: 'Place type' })\n  @Transform(\n    ({ value }: { value: Partial }) => new PlaceTypeDto(value),\n  )\n  type: PlaceTypeDto;\n\n  @ApiProperty({\n    type: PlaceCategoryDto,\n    description: 'Place categories',\n    isArray: true,\n  })\n  @Transform(({ value }: { value: Partial[] }) =>\n    value.map((category) => new PlaceCategoryDto(category)),\n  )\n  categories: PlaceCategoryDto[];\n\n  @ApiProperty({\n    type: String,\n    description: 'Place image',\n  })\n  @Expose({ name: 'image' })\n  @Transform(({ value }: { value: Partial }) => value?.url ?? null)\n  images: string;\n\n  @ApiProperty({ type: String, description: 'Place coordinates [lat;lng]' })\n  coordinates: string;\n\n  @ApiProperty({\n    type: String,\n    description: 'Place website url',\n    nullable: true,\n  })\n  website?: string;\n\n  @ApiProperty({\n    type: Boolean,\n    description: 'is place an advertisement',\n  })\n  advertisement: boolean;\n\n  @ApiProperty({\n    type: Date,\n    description: 'advertisement end date',\n    nullable: true,\n  })\n  advEndDate: Date | null;\n\n  @Exclude()\n  moderation: boolean;\n\n  @ApiProperty({\n    type: Date,\n    description: 'created at',\n  })\n  createdAt: Date;\n\n  constructor(partial: Partial) {\n    Object.assign(this, partial);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/StorageModule.html":{"url":"modules/StorageModule.html","title":"module - StorageModule","body":"\n                   \n\n\n\n\n    Modules\n    StorageModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_StorageModule\n\n\n\ncluster_StorageModule_exports\n\n\n\ncluster_StorageModule_providers\n\n\n\n\nStorageService \n\nStorageService \n\n\n\nStorageModule\n\nStorageModule\n\nStorageService  -->\n\nStorageModule->StorageService \n\n\n\n\n\nStorageService\n\nStorageService\n\nStorageModule -->\n\nStorageService->StorageModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/storage/storage.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            StorageService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            StorageService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { StorageService } from './storage.service';\n\n@Module({\n  providers: [StorageService],\n  exports: [StorageService],\n})\nexport class StorageModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StorageService.html":{"url":"injectables/StorageService.html","title":"injectable - StorageService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  StorageService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/storage/storage.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                bucket\n                            \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                            \n                                    Private\n                                storage\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                removeFile\n                            \n                            \n                                    Private\n                                setDestination\n                            \n                            \n                                    Private\n                                setFilename\n                            \n                            \n                                    Async\n                                uploadFile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/storage/storage.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeFile\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeFile(fileName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/storage/storage.service.ts:65\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    fileName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        setDestination\n                        \n                    \n                \n            \n            \n                \n                    \n                    setDestination(destination: string)\n                \n            \n\n\n            \n                \n                    Defined in src/storage/storage.service.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    destination\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        setFilename\n                        \n                    \n                \n            \n            \n                \n                    \n                    setFilename(uploadedFile: Express.Multer.File)\n                \n            \n\n\n            \n                \n                    Defined in src/storage/storage.service.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    uploadedFile\n                                    \n                                            Express.Multer.File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        uploadFile\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadFile(uploadedFile: Express.Multer.File, destination: string)\n                \n            \n\n\n            \n                \n                    Defined in src/storage/storage.service.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    uploadedFile\n                                    \n                                            Express.Multer.File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    destination\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        bucket\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Bucket\n\n                    \n                \n                    \n                        \n                                Defined in src/storage/storage.service.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger('Storage service')\n                    \n                \n                    \n                        \n                                Defined in src/storage/storage.service.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        storage\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Storage\n\n                    \n                \n                    \n                        \n                                Defined in src/storage/storage.service.ts:11\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Bucket, Storage } from '@google-cloud/storage';\nimport { BadRequestException, Injectable, Logger } from '@nestjs/common';\nimport { parse } from 'path';\nimport { ConfigService } from '@nestjs/config';\nimport { IGoogleCloudConfig } from '../config/configuration';\nimport { FileDto } from './dto/file.dto';\n\n@Injectable()\nexport class StorageService {\n  private bucket: Bucket;\n  private storage: Storage;\n  private readonly logger = new Logger('Storage service');\n\n  constructor(private configService: ConfigService) {\n    this.storage = new Storage({\n      keyFilename:\n        this.configService.get('googleCloud')?.keyFilename,\n    });\n    this.bucket = this.storage.bucket(\n      this.configService.get('googleCloud')?.bucketName ||\n        '',\n    );\n  }\n\n  private setDestination(destination: string): string {\n    let escDestination = '';\n    escDestination += destination\n      .replace(/^\\.+/g, '')\n      .replace(/^\\/+|\\/+$/g, '');\n    if (escDestination !== '') escDestination = escDestination + '/';\n    return escDestination;\n  }\n\n  private setFilename(uploadedFile: Express.Multer.File): string {\n    const fileName = parse(uploadedFile.originalname);\n    return `${fileName.name}-${Date.now()}${fileName.ext}`\n      .replace(/^\\.+/g, '')\n      .replace(/^\\/+/g, '')\n      .replace(/[\\r\\n]/g, '_');\n  }\n\n  async uploadFile(\n    uploadedFile: Express.Multer.File,\n    destination: string,\n  ): Promise {\n    const fileName =\n      this.setDestination(destination) + this.setFilename(uploadedFile);\n    const file = this.bucket.file(fileName);\n    this.logger.log(\n      'new file',\n      `https://storage.googleapis.com/${this.bucket.name}/${file.name}`,\n    );\n    try {\n      await file.save(uploadedFile.buffer, {\n        contentType: uploadedFile.mimetype,\n      });\n    } catch (error) {\n      throw new BadRequestException(error?.message);\n    }\n    return {\n      publicUrl: `https://storage.googleapis.com/${this.bucket.name}/${file.name}`,\n    };\n  }\n\n  async removeFile(fileName: string): Promise {\n    const sanitizedFileName = fileName.replace(\n      `https://storage.googleapis.com/${this.bucket.name}/`,\n      '',\n    );\n    const file = this.bucket.file(sanitizedFileName);\n    try {\n      await file.delete();\n      this.logger.warn('file deleted');\n      return;\n    } catch (error) {\n      throw new BadRequestException(error?.message);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TokenPayloadDto.html":{"url":"classes/TokenPayloadDto.html","title":"class - TokenPayloadDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TokenPayloadDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/token-payload.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                id\n                            \n                            \n                                roles\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(partial: Partial)\n                    \n                \n                        \n                            \n                                Defined in src/auth/dto/token-payload.dto.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        partial\n                                                  \n                                                        \n                                                                        Partial\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/token-payload.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/token-payload.dto.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        roles\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Role[]\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/token-payload.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Role } from '../../roles/entities/role.entity';\n\nexport class TokenPayloadDto {\n  id: number;\n  email: string;\n  roles: Role[];\n\n  constructor(partial: Partial) {\n    Object.assign(this, partial);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Translation.html":{"url":"entities/Translation.html","title":"entity - Translation","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Translation\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/translations/entities/translation.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                language\n                            \n                            \n                                    \n                                original\n                            \n                            \n                                    \n                                text\n                            \n                            \n                                    \n                                    \n                                textId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/translations/entities/translation.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        language\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Language\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, language => language.id)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/translations/entities/translation.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        original\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/translations/entities/translation.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        text\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 3000})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/translations/entities/translation.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        textId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Index({unique: false})@Column({type: 'int'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/translations/entities/translation.entity.ts:17\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  Column,\n  PrimaryGeneratedColumn,\n  ManyToOne,\n  Index,\n} from 'typeorm';\nimport { Language } from '../../languages/entities/language.entity';\n\n@Entity()\nexport class Translation {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Index({ unique: false })\n  @Column({ type: 'int' })\n  textId: number;\n\n  @ManyToOne(() => Language, (language) => language.id)\n  language: Language;\n\n  @Column({ type: 'varchar', length: 3000 })\n  text: string;\n\n  @Column({ default: false })\n  original: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TranslationDto.html":{"url":"classes/TranslationDto.html","title":"class - TranslationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TranslationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/translations/dto/translation.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                language\n                            \n                            \n                                    \n                                original\n                            \n                            \n                                    \n                                text\n                            \n                            \n                                    \n                                textId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(partial: Partial)\n                    \n                \n                        \n                            \n                                Defined in src/translations/dto/translation.dto.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        partial\n                                                  \n                                                        \n                                                                        Partial\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({title: 'Translation id', type: Number})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/translations/dto/translation.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        language\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({title: 'Language id', type: Number})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/translations/dto/translation.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        original\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({title: 'Is original', type: Boolean})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/translations/dto/translation.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        text\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({title: 'Text', type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/translations/dto/translation.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        textId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({title: 'TextID', type: Number})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/translations/dto/translation.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Translation } from '../entities/translation.entity';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class TranslationDto {\n  @ApiProperty({ title: 'Translation id', type: Number })\n  id: number;\n\n  @ApiProperty({ title: 'TextID', type: Number })\n  textId: number;\n\n  @ApiProperty({ title: 'Text', type: String })\n  text: string;\n\n  @ApiProperty({\n    title: 'Is original',\n    type: Boolean,\n  })\n  original: boolean;\n\n  @ApiProperty({ title: 'Language id', type: Number })\n  language: number;\n\n  constructor(partial: Partial) {\n    Object.assign(this, partial);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TranslationsController.html":{"url":"controllers/TranslationsController.html","title":"controller - TranslationsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TranslationsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/translations/translations.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                translations\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                delete\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                getAll\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createTranslationDto: CreateTranslationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Create Translation'})@ApiOkResponse({description: 'OK', type: TranslationDto})@ApiBody({type: CreateTranslationDto})@UseInterceptors(ClassSerializerInterceptor)@Post()\n                \n            \n\n            \n                \n                    Defined in src/translations/translations.controller.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createTranslationDto\n                                    \n                                                CreateTranslationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Delete Translation'})@ApiOkResponse({description: 'OK', type: undefined})@ApiParam({name: 'id', description: 'translation id', type: Number})@Delete('/:id')\n                \n            \n\n            \n                \n                    Defined in src/translations/translations.controller.ts:95\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        Async\n                        getAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Find all translations'})@ApiOkResponse({description: 'OK', type: TranslationDto, isArray: true})@Get()\n                \n            \n\n            \n                \n                    Defined in src/translations/translations.controller.ts:79\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, updateTranslationDto: UpdateTranslationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Update Translation'})@ApiOkResponse({description: 'OK', type: undefined})@ApiParam({name: 'id', description: 'translation id', type: Number})@ApiBody({type: UpdateTranslationDto})@Put('/:id')\n                \n            \n\n            \n                \n                    Defined in src/translations/translations.controller.ts:65\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateTranslationDto\n                                    \n                                                UpdateTranslationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  ApiBody,\n  ApiOkResponse,\n  ApiOperation,\n  ApiParam,\n  ApiTags,\n  PickType,\n} from '@nestjs/swagger';\nimport {\n  Body,\n  ClassSerializerInterceptor,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  ParseIntPipe,\n  Post,\n  Put,\n  UseInterceptors,\n} from '@nestjs/common';\nimport { TranslationsService } from './translations.service';\nimport { CreateTranslationDto } from './dto/create-translation.dto';\nimport { UpdateTranslationDto } from './dto/update-translation.dto';\nimport { TranslationDto } from './dto/translation.dto';\n\n@ApiTags('Translations')\n@Controller('translations')\nexport class TranslationsController {\n  constructor(private readonly translationsService: TranslationsService) {}\n\n  @ApiOperation({ summary: 'Create Translation' })\n  @ApiOkResponse({\n    description: 'OK',\n    type: TranslationDto,\n  })\n  @ApiBody({\n    type: CreateTranslationDto,\n  })\n  @UseInterceptors(ClassSerializerInterceptor)\n  @Post()\n  async create(@Body() createTranslationDto: CreateTranslationDto) {\n    const translation = await this.translationsService.createTranslation(\n      createTranslationDto.langId,\n      createTranslationDto.text,\n      createTranslationDto.original,\n      createTranslationDto.textId,\n    );\n    return new TranslationDto(translation);\n  }\n\n  @ApiOperation({ summary: 'Update Translation' })\n  @ApiOkResponse({\n    description: 'OK',\n    type: PickType(TranslationDto, ['id'] as const),\n  })\n  @ApiParam({\n    name: 'id',\n    description: 'translation id',\n    type: Number,\n  })\n  @ApiBody({\n    type: UpdateTranslationDto,\n  })\n  @Put('/:id')\n  async update(\n    @Param('id', ParseIntPipe) id: number,\n    @Body() updateTranslationDto: UpdateTranslationDto,\n  ) {\n    return await this.translationsService.update(id, updateTranslationDto);\n  }\n\n  @ApiOperation({ summary: 'Find all translations' })\n  @ApiOkResponse({\n    description: 'OK',\n    type: TranslationDto,\n    isArray: true,\n  })\n  @Get()\n  async getAll() {\n    const translations = await this.translationsService.getAll();\n    return translations.map((t) => new TranslationDto(t));\n  }\n\n  @ApiOperation({ summary: 'Delete Translation' })\n  @ApiOkResponse({\n    description: 'OK',\n    type: PickType(TranslationDto, ['id'] as const),\n  })\n  @ApiParam({\n    name: 'id',\n    description: 'translation id',\n    type: Number,\n  })\n  @Delete('/:id')\n  async delete(@Param('id', ParseIntPipe) id: number) {\n    return await this.translationsService.deleteTranslation(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TranslationsModule.html":{"url":"modules/TranslationsModule.html","title":"module - TranslationsModule","body":"\n                   \n\n\n\n\n    Modules\n    TranslationsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_TranslationsModule\n\n\n\ncluster_TranslationsModule_exports\n\n\n\ncluster_TranslationsModule_providers\n\n\n\ncluster_TranslationsModule_imports\n\n\n\n\nLanguagesModule\n\nLanguagesModule\n\n\n\nTranslationsModule\n\nTranslationsModule\n\nTranslationsModule -->\n\nLanguagesModule->TranslationsModule\n\n\n\n\n\nTranslationsService \n\nTranslationsService \n\nTranslationsService  -->\n\nTranslationsModule->TranslationsService \n\n\n\n\n\nTranslationsService\n\nTranslationsService\n\nTranslationsModule -->\n\nTranslationsService->TranslationsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/translations/translations.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TranslationsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            TranslationsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            LanguagesModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            TranslationsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TranslationsService } from './translations.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Translation } from './entities/translation.entity';\nimport { Language } from '../languages/entities/language.entity';\nimport { TranslationsController } from './translations.controller';\nimport { LanguagesModule } from '../languages/languages.module';\n\n@Module({\n  controllers: [TranslationsController],\n  imports: [TypeOrmModule.forFeature([Translation, Language]), LanguagesModule],\n  providers: [TranslationsService],\n  exports: [TranslationsService],\n})\nexport class TranslationsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TranslationsService.html":{"url":"injectables/TranslationsService.html","title":"injectable - TranslationsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TranslationsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/translations/translations.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                            \n                                    Private\n                                translateClient\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createTranslation\n                            \n                            \n                                    Async\n                                deleteTranslation\n                            \n                            \n                                    Async\n                                getAll\n                            \n                            \n                                    Async\n                                getMaxTextId\n                            \n                            \n                                    Private\n                                    Async\n                                translate\n                            \n                            \n                                    Async\n                                translateAll\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(translationsRepository: Repository, languagesRepository: Repository, configService: ConfigService, languagesService: LanguagesService)\n                    \n                \n                        \n                            \n                                Defined in src/translations/translations.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        translationsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        languagesRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        languagesService\n                                                  \n                                                        \n                                                                        LanguagesService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createTranslation\n                        \n                    \n                \n            \n            \n                \n                    \n                    createTranslation(langId: number, text: string, original, textId?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/translations/translations.service.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    langId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    text\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    original\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        false\n                                    \n\n                                \n                                \n                                    textId\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteTranslation\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteTranslation(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/translations/translations.service.ts:112\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAll()\n                \n            \n\n\n            \n                \n                    Defined in src/translations/translations.service.ts:118\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getMaxTextId\n                        \n                    \n                \n            \n            \n                \n                    \n                    getMaxTextId()\n                \n            \n\n\n            \n                \n                    Defined in src/translations/translations.service.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        translate\n                        \n                    \n                \n            \n            \n                \n                    \n                    translate(text: string, targetLanguage: string, sourceLanguage?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/translations/translations.service.ts:67\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    text\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    targetLanguage\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    sourceLanguage\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        translateAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    translateAll(text: string, textId: number, originalLangId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/translations/translations.service.ts:85\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    text\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    textId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    originalLangId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, updateTranslationDto: UpdateTranslationDto)\n                \n            \n\n\n            \n                \n                    Defined in src/translations/translations.service.ts:125\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateTranslationDto\n                                    \n                                                UpdateTranslationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger('Translation service')\n                    \n                \n                    \n                        \n                                Defined in src/translations/translations.service.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        translateClient\n                        \n                    \n                \n            \n                \n                    \n                        Type :     v2.Translate\n\n                    \n                \n                    \n                        \n                                Defined in src/translations/translations.service.ts:31\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Injectable, Logger } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Translation } from './entities/translation.entity';\nimport { Repository } from 'typeorm';\nimport { Language } from '../languages/entities/language.entity';\nimport { UpdateTranslationDto } from './dto/update-translation.dto';\nimport { v2 } from '@google-cloud/translate';\nimport { ConfigService } from '@nestjs/config';\nimport { IGoogleCloudConfig } from '../config/configuration';\nimport { LanguagesService } from '../languages/languages.service';\n\n@Injectable()\nexport class TranslationsService {\n  private readonly logger = new Logger('Translation service');\n\n  constructor(\n    @InjectRepository(Translation)\n    private translationsRepository: Repository,\n    @InjectRepository(Language)\n    private languagesRepository: Repository,\n    private configService: ConfigService,\n    private languagesService: LanguagesService,\n  ) {\n    this.translateClient = new v2.Translate({\n      key: this.configService.get('googleCloud')?.apiKey,\n      projectId:\n        this.configService.get('googleCloud')?.projectId,\n    });\n  }\n\n  private translateClient: v2.Translate;\n\n  // get last max textId\n  async getMaxTextId(): Promise {\n    const result = await this.translationsRepository\n      .createQueryBuilder('t')\n      .select('MAX(textId)', 'max')\n      .distinct()\n      .getRawOne();\n    return result?.max ? result.max + 1 : 1;\n  }\n\n  // create new translation by lang id\n  async createTranslation(\n    langId: number,\n    text: string,\n    original = false,\n    textId?: number,\n  ): Promise {\n    const language = await this.languagesRepository.findOne({\n      where: {\n        id: langId,\n      },\n    });\n    if (!language) throw new BadRequestException('Invalid language id');\n    if (!textId) textId = await this.getMaxTextId();\n    const textTranslation = await this.translationsRepository.create({\n      text: text,\n      textId: textId,\n      language: language,\n      original: original,\n    });\n    return await this.translationsRepository.save(textTranslation);\n  }\n\n  // translate by google\n  private async translate(\n    text: string,\n    targetLanguage: string,\n    sourceLanguage?: string,\n  ): Promise {\n    try {\n      const [translation] = await this.translateClient.translate(text, {\n        from: sourceLanguage,\n        to: targetLanguage,\n      });\n\n      return translation;\n    } catch (e) {\n      this.logger.error('Translation failed', e.message);\n      return text;\n    }\n  }\n\n  async translateAll(text: string, textId: number, originalLangId: number) {\n    const originalLanguage = await this.languagesService.findOne(\n      originalLangId,\n    );\n    const languages = await this.languagesRepository\n      .createQueryBuilder('lang')\n      .where('lang.id <> :originalLangId', { originalLangId })\n      .getMany();\n\n    await Promise.allSettled(\n      languages.map(async (lang) => {\n        const translatedText = await this.translate(\n          text,\n          lang.code,\n          originalLanguage.code,\n        );\n        const translation = new Translation();\n        translation.text = translatedText;\n        translation.textId = textId;\n        translation.language = lang;\n        translation.original = false;\n        await this.translationsRepository.save(translation);\n      }),\n    );\n  }\n\n  // delete translation by id\n  async deleteTranslation(id: number) {\n    await this.translationsRepository.delete(id);\n    return id;\n  }\n\n  // get all translations\n  async getAll() {\n    return await this.translationsRepository.find({\n      loadRelationIds: true,\n    });\n  }\n\n  // update translation\n  async update(id: number, updateTranslationDto: UpdateTranslationDto) {\n    const result = await this.translationsRepository.update(id, {\n      language: {\n        id: updateTranslationDto.langId,\n      },\n      text: updateTranslationDto.text,\n      textId: updateTranslationDto.textId,\n      original: updateTranslationDto.original,\n    });\n    if (!result.affected) throw new BadRequestException();\n    return { id: id };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateCommentDto.html":{"url":"classes/UpdateCommentDto.html","title":"class - UpdateCommentDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateCommentDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/comments/dto/update-comment.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        CreateCommentDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                text\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        text\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({title: 'Text', type: String})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         CreateCommentDto\n\n                            \n                        \n                    \n                        \n                                Defined in         CreateCommentDto:5\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CreateCommentDto } from './create-comment.dto';\n\nexport class UpdateCommentDto extends CreateCommentDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateLanguageDto.html":{"url":"classes/UpdateLanguageDto.html","title":"class - UpdateLanguageDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateLanguageDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/languages/dto/update-language.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CreateLanguageDto } from './create-language.dto';\nimport { PartialType } from '@nestjs/swagger';\n\nexport class UpdateLanguageDto extends PartialType(CreateLanguageDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdatePlaceCategoryDto.html":{"url":"classes/UpdatePlaceCategoryDto.html","title":"class - UpdatePlaceCategoryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdatePlaceCategoryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/place-categories/dto/update-place-category.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreatePlaceCategoryDto } from './create-place-category.dto';\n\nexport class UpdatePlaceCategoryDto extends PartialType(CreatePlaceCategoryDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdatePlaceDto.html":{"url":"classes/UpdatePlaceDto.html","title":"class - UpdatePlaceDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdatePlaceDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/places/dto/update-place.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        CreatePlaceDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                shouldTranslate\n                            \n                            \n                                    \n                                address\n                            \n                            \n                                    \n                                categoriesIds\n                            \n                            \n                                    \n                                coordinates\n                            \n                            \n                                    \n                                description\n                            \n                            \n                                    \n                                imagesIds\n                            \n                            \n                                    \n                                placeTypeId\n                            \n                            \n                                    \n                                slug\n                            \n                            \n                                    \n                                title\n                            \n                            \n                                    \n                                    Optional\n                                website\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        shouldTranslate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: Boolean, default: false, description: 'Should translate again'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/places/dto/update-place.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'Place address'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         CreatePlaceDto\n\n                            \n                        \n                    \n                        \n                                Defined in         CreatePlaceDto:14\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        categoriesIds\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: Number, description: 'Place categories ids', isArray: true})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         CreatePlaceDto\n\n                            \n                        \n                    \n                        \n                                Defined in         CreatePlaceDto:24\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        coordinates\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'Place coordinates [lat;lng]'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         CreatePlaceDto\n\n                            \n                        \n                    \n                        \n                                Defined in         CreatePlaceDto:34\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'Place description'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         CreatePlaceDto\n\n                            \n                        \n                    \n                        \n                                Defined in         CreatePlaceDto:11\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        imagesIds\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: Number, description: 'Place images ids', isArray: true})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         CreatePlaceDto\n\n                            \n                        \n                    \n                        \n                                Defined in         CreatePlaceDto:31\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        placeTypeId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: Number, description: 'Place type id'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         CreatePlaceDto\n\n                            \n                        \n                    \n                        \n                                Defined in         CreatePlaceDto:17\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'Place url path'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         CreatePlaceDto\n\n                            \n                        \n                    \n                        \n                                Defined in         CreatePlaceDto:5\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'Place title'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         CreatePlaceDto\n\n                            \n                        \n                    \n                        \n                                Defined in         CreatePlaceDto:8\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        website\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, description: 'Place website url', required: false})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         CreatePlaceDto\n\n                            \n                        \n                    \n                        \n                                Defined in         CreatePlaceDto:41\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { CreatePlaceDto } from './create-place.dto';\n\nexport class UpdatePlaceDto extends CreatePlaceDto {\n  @ApiProperty({\n    type: Boolean,\n    default: false,\n    description: 'Should translate again',\n  })\n  shouldTranslate: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdatePlaceTypeDto.html":{"url":"classes/UpdatePlaceTypeDto.html","title":"class - UpdatePlaceTypeDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdatePlaceTypeDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/place-types/dto/update-place-type.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CreatePlaceTypeDto } from './create-place-type.dto';\nimport { PartialType } from '@nestjs/swagger';\n\nexport class UpdatePlaceTypeDto extends PartialType(CreatePlaceTypeDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateRoleDto.html":{"url":"classes/UpdateRoleDto.html","title":"class - UpdateRoleDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateRoleDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/roles/dto/update-role.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateRoleDto } from './create-role.dto';\n\nexport class UpdateRoleDto extends PartialType(CreateRoleDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateTranslationDto.html":{"url":"classes/UpdateTranslationDto.html","title":"class - UpdateTranslationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateTranslationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/translations/dto/update-translation.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CreateTranslationDto } from './create-translation.dto';\nimport { PartialType } from '@nestjs/swagger';\n\nexport class UpdateTranslationDto extends PartialType(CreateTranslationDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/update-user.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateUserDto } from './create-user.dto';\n\nexport class UpdateUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/entities/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                admin\n                            \n                            \n                                    \n                                comments\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                firstName\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                images\n                            \n                            \n                                    \n                                isEmailConfirmed\n                            \n                            \n                                    \n                                lastName\n                            \n                            \n                                    \n                                likes\n                            \n                            \n                                    \n                                password\n                            \n                            \n                                    \n                                places\n                            \n                            \n                                    \n                                    \n                                roles\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        admin\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Admin\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, admin => admin.user, {cascade: true})@JoinColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        comments\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Comment[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, comment => comment.user)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: () => CURRENT_TIMESTAMP})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 30})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 30})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        images\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Image[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, image => image.user)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        isEmailConfirmed\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 30})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        likes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Like[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, like => like.user)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        places\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Place[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, place => place.author)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        roles\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Role[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, role => role.users)@JoinTable()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:51\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  Column,\n  PrimaryGeneratedColumn,\n  OneToMany,\n  OneToOne,\n  JoinColumn,\n  JoinTable,\n  ManyToMany,\n} from 'typeorm';\n\nimport { Place } from '../../places/entities/place.entity';\nimport { Admin } from '../../entities/admin.entity';\nimport { Like } from '../../places/entities/like.entity';\nimport { Comment } from '../../comments/entities/comment.entity';\nimport { Role } from '../../roles/entities/role.entity';\nimport { Image } from '../../images/entities/image.entity';\n\n@Entity()\nexport class User {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ type: 'varchar', length: 30 })\n  firstName: string;\n\n  @Column({ type: 'varchar', length: 30 })\n  lastName: string;\n\n  @Column({ type: 'varchar', length: 30 })\n  email: string;\n\n  @Column({ default: false })\n  isEmailConfirmed: boolean;\n\n  @Column({ type: 'varchar' })\n  password: string;\n\n  @Column({ default: () => 'CURRENT_TIMESTAMP' })\n  createdAt: Date;\n\n  @OneToMany(() => Place, (place) => place.author)\n  places: Place[];\n\n  @OneToOne(() => Admin, (admin) => admin.user, { cascade: true })\n  @JoinColumn()\n  admin: Admin;\n\n  @ManyToMany(() => Role, (role) => role.users)\n  @JoinTable()\n  roles: Role[];\n\n  @OneToMany(() => Like, (like) => like.user)\n  likes: Like[];\n\n  @OneToMany(() => Image, (image) => image.user)\n  images: Image[];\n\n  @OneToMany(() => Comment, (comment) => comment.user)\n  comments: Comment[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserDto.html":{"url":"classes/UserDto.html","title":"class - UserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                admin\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                firstName\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                isEmailConfirmed\n                            \n                            \n                                    \n                                lastName\n                            \n                            \n                                    \n                                password\n                            \n                            \n                                    \n                                roles\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(partial: Partial)\n                    \n                \n                        \n                            \n                                Defined in src/users/dto/user.dto.ts:33\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        partial\n                                                  \n                                                        \n                                                                        Partial\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        admin\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Admin\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user.dto.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({title: 'Created at', type: Date})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({title: 'Email', type: String, default: 'johndoe@gmail.com'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({title: 'First Name', type: String, default: 'John'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({title: 'User id', type: Number, default: 1})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        isEmailConfirmed\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({title: 'Is email confirmed', type: Boolean})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({title: 'Last Name', type: String, default: 'Doe'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user.dto.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        roles\n                        \n                    \n                \n            \n                \n                    \n                        Type :         RoleDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({title: 'Roles', type: RoleDto, isArray: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user.dto.ts:33\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { Exclude } from 'class-transformer';\nimport { Admin } from '../../entities/admin.entity';\nimport { RoleDto } from '../../roles/dto/role.dto';\nimport { User } from '../entities/user.entity';\n\nexport class UserDto {\n  @ApiProperty({ title: 'User id', type: Number, default: 1 })\n  id: number;\n\n  @ApiProperty({ title: 'First Name', type: String, default: 'John' })\n  firstName: string;\n\n  @ApiProperty({ title: 'Last Name', type: String, default: 'Doe' })\n  lastName: string;\n\n  @ApiProperty({ title: 'Email', type: String, default: 'johndoe@gmail.com' })\n  email: string;\n\n  @ApiProperty({ title: 'Is email confirmed', type: Boolean })\n  isEmailConfirmed: boolean;\n\n  @Exclude()\n  password: string;\n\n  @ApiProperty({ title: 'Created at', type: Date })\n  createdAt: Date;\n\n  @Exclude()\n  admin: Admin;\n\n  @ApiProperty({ title: 'Roles', type: RoleDto, isArray: true })\n  roles: RoleDto[];\n\n  constructor(partial: Partial) {\n    Object.assign(this, partial);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserFromTokenPipe.html":{"url":"injectables/UserFromTokenPipe.html","title":"injectable - UserFromTokenPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserFromTokenPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/pipes/user-from-token.pipe.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/pipes/user-from-token.pipe.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        transform\n                        \n                    \n                \n            \n            \n                \n                    \n                    transform(tokenPayload: TokenPayloadDto, _metadata: ArgumentMetadata)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/pipes/user-from-token.pipe.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tokenPayload\n                                    \n                                                TokenPayloadDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    _metadata\n                                    \n                                            ArgumentMetadata\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  ArgumentMetadata,\n  Injectable,\n  PipeTransform,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { UsersService } from '../../users/users.service';\nimport { TokenPayloadDto } from '../dto/token-payload.dto';\n\n@Injectable()\nexport class UserFromTokenPipe implements PipeTransform {\n  public constructor(private readonly usersService: UsersService) {}\n\n  async transform(tokenPayload: TokenPayloadDto, _metadata: ArgumentMetadata) {\n    try {\n      const user = await this.usersService.findOneById(tokenPayload.id);\n\n      if (!user) {\n        throw new UnauthorizedException({ message: 'Invalid user' });\n      }\n\n      return user;\n    } catch (error) {\n      if (error instanceof UnauthorizedException) {\n        throw error;\n      }\n\n      throw new UnauthorizedException({ message: 'Invalid token' });\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                confirmEmail\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                findAll\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                userData\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        Async\n                        confirmEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    confirmEmail(tokenPayload: TokenPayloadDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Confirm user email'})@ApiOkResponse({description: 'OK'})@Auth()@Post('/confirm')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tokenPayload\n                                    \n                                                TokenPayloadDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get all users'})@ApiOkResponse({description: 'users', type: UserDto, isArray: true})@UseInterceptors(ClassSerializerInterceptor)@Auth()@Get()\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        \n                        Async\n                        userData\n                        \n                    \n                \n            \n            \n                \n                    \n                    userData(user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get user data'})@ApiOkResponse({description: 'user', type: UserDto})@UseInterceptors(ClassSerializerInterceptor)@Auth()@Get('/userData')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  ClassSerializerInterceptor,\n  Controller,\n  Get,\n  Post,\n  UseInterceptors,\n} from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { ApiOkResponse, ApiOperation, ApiTags } from '@nestjs/swagger';\nimport { UserDto } from './dto/user.dto';\nimport { Auth } from '../auth/decorators/auth.decorator';\nimport { UserFromTokenPipe } from '../auth/pipes/user-from-token.pipe';\nimport { User } from './entities/user.entity';\nimport { TokenPayload } from '../auth/decorators/token-payload.decorator';\nimport { TokenPayloadDto } from '../auth/dto/token-payload.dto';\n\n@ApiTags('Users')\n@Controller('users')\nexport class UsersController {\n  constructor(private readonly usersService: UsersService) {}\n\n  @ApiOperation({ summary: 'Get all users' })\n  @ApiOkResponse({\n    description: 'users',\n    type: UserDto,\n    isArray: true,\n  })\n  @UseInterceptors(ClassSerializerInterceptor)\n  @Auth()\n  @Get()\n  async findAll() {\n    const users = await this.usersService.findAll();\n    return users.map((u) => new UserDto(u));\n  }\n\n  @ApiOperation({ summary: 'Get user data' })\n  @ApiOkResponse({\n    description: 'user',\n    type: UserDto,\n  })\n  @UseInterceptors(ClassSerializerInterceptor)\n  @Auth()\n  @Get('/userData')\n  async userData(@TokenPayload(UserFromTokenPipe) user: User) {\n    return new UserDto(user);\n  }\n\n  @ApiOperation({ summary: 'Confirm user email' })\n  @ApiOkResponse({\n    description: 'OK',\n  })\n  @Auth()\n  @Post('/confirm')\n  async confirmEmail(@TokenPayload() tokenPayload: TokenPayloadDto) {\n    await this.usersService.confirmEmail(tokenPayload.id);\n    return;\n  }\n\n  // @Put(':id')\n  // update(@Param('id') id: string, @Body() updateUserDto: UpdateUserDto) {\n  //   return this.usersService.update(+id, updateUserDto);\n  // }\n  //\n  // @Delete(':id')\n  // remove(@Param('id') id: string) {\n  //   return this.usersService.remove(+id);\n  // }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_imports\n\n\n\n\nRolesModule\n\nRolesModule\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nRolesModule->UsersModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            RolesModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { UsersController } from './users.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from './entities/user.entity';\nimport { RolesModule } from '../roles/roles.module';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([User]), RolesModule],\n  controllers: [UsersController],\n  providers: [UsersService],\n  exports: [UsersService],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                confirmEmail\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                getUserByEmail\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: Repository, rolesService: RolesService)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        rolesService\n                                                  \n                                                        \n                                                                        RolesService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        confirmEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    confirmEmail(userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createUserDto: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserByEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserByEmail(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:70\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: number, updateUserDto: UpdateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Equal, Repository } from 'typeorm';\nimport { User } from './entities/user.entity';\nimport { RolesService } from '../roles/roles.service';\nimport { RoleNamesEnum } from '../roles/enums/role-names.enum';\n\n@Injectable()\nexport class UsersService {\n  constructor(\n    @InjectRepository(User)\n    private readonly usersRepository: Repository,\n    private readonly rolesService: RolesService,\n  ) {}\n\n  async create(createUserDto: CreateUserDto) {\n    const user = this.usersRepository.create(createUserDto);\n    const defaultRole = await this.rolesService.getRoleByName(\n      RoleNamesEnum.USER,\n    );\n    if (!defaultRole)\n      throw new UnauthorizedException({ message: 'No default role found' });\n    user.roles = [defaultRole];\n    return await this.usersRepository.save(user);\n  }\n\n  async confirmEmail(userId: number) {\n    await this.usersRepository\n      .createQueryBuilder('user')\n      .update()\n      .set({ isEmailConfirmed: true })\n      .where('id = :id', { id: userId })\n      .execute();\n    return;\n  }\n\n  async getUserByEmail(email: string) {\n    return await this.usersRepository.findOne({\n      relations: {\n        roles: true,\n      },\n      where: {\n        email: Equal(email),\n      },\n    });\n  }\n\n  async findAll() {\n    return await this.usersRepository.find({ relations: { roles: true } });\n  }\n\n  async findOneById(id: number) {\n    return await this.usersRepository.findOne({\n      relations: {\n        roles: true,\n        admin: true,\n      },\n      where: {\n        id: Equal(id),\n      },\n    });\n  }\n\n  update(id: number, updateUserDto: UpdateUserDto) {\n    return `This action updates a #${id} user`;\n  }\n\n  remove(id: number) {\n    return `This action removes a #${id} user`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ValidationExceptionDto.html":{"url":"classes/ValidationExceptionDto.html","title":"class - ValidationExceptionDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ValidationExceptionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/validation/validation-exception.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                error\n                            \n                            \n                                    \n                                message\n                            \n                            \n                                    \n                                statusCode\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        error\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Network message of response', type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/shared/validation/validation-exception.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ValidationMessageDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Info about the validation errors', type: ValidationMessageDto, isArray: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/shared/validation/validation-exception.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        statusCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Status code of response', type: Number})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/shared/validation/validation-exception.dto.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nclass ValidationMessageDto {\n  @ApiProperty({ description: 'DTO field where error occurred', type: String })\n  field: string;\n\n  @ApiProperty({ description: 'Description of the error', type: String })\n  error: string;\n}\n\nexport class ValidationExceptionDto {\n  @ApiProperty({ description: 'Status code of response', type: Number })\n  statusCode: number;\n\n  @ApiProperty({\n    description: 'Info about the validation errors',\n    type: ValidationMessageDto,\n    isArray: true,\n  })\n  message: ValidationMessageDto[];\n\n  @ApiProperty({ description: 'Network message of response', type: String })\n  error: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ValidationMessageDto.html":{"url":"classes/ValidationMessageDto.html","title":"class - ValidationMessageDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ValidationMessageDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/validation/validation-exception.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                error\n                            \n                            \n                                    \n                                field\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        error\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Description of the error', type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/shared/validation/validation-exception.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        field\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'DTO field where error occurred', type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/shared/validation/validation-exception.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nclass ValidationMessageDto {\n  @ApiProperty({ description: 'DTO field where error occurred', type: String })\n  field: string;\n\n  @ApiProperty({ description: 'Description of the error', type: String })\n  error: string;\n}\n\nexport class ValidationExceptionDto {\n  @ApiProperty({ description: 'Status code of response', type: Number })\n  statusCode: number;\n\n  @ApiProperty({\n    description: 'Info about the validation errors',\n    type: ValidationMessageDto,\n    isArray: true,\n  })\n  message: ValidationMessageDto[];\n\n  @ApiProperty({ description: 'Network message of response', type: String })\n  error: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/auth/decorators/auth.decorator.ts\n            \n            function\n            Auth\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/decorators/token-payload.decorator.ts\n            \n            variable\n            TokenPayload\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/decorators/token.decorator.ts\n            \n            variable\n            Token\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/dto/auth.dto.ts\n            \n            class\n            AuthDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/dto/login.dto.ts\n            \n            class\n            LoginDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/dto/token-payload.dto.ts\n            \n            class\n            TokenPayloadDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auth/guards/jwt-auth.guard.ts\n            \n            guard\n            JwtAuthGuard\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/pipes/payload-from-token.pipe.ts\n            \n            injectable\n            PayloadFromTokenPipe\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/pipes/user-from-token.pipe.ts\n            \n            injectable\n            UserFromTokenPipe\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/comments/comments.service.ts\n            \n            injectable\n            CommentsService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/comments/dto/comment.dto.ts\n            \n            class\n            CommentDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/comments/dto/create-comment.dto.ts\n            \n            class\n            CreateCommentDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/comments/dto/update-comment.dto.ts\n            \n            class\n            UpdateCommentDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/comments/entities/comment.entity.ts\n            \n            entity\n            Comment\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/configuration.ts\n            \n            interface\n            IDatabaseConfig\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/config/configuration.ts\n            \n            interface\n            IGoogleCloudConfig\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/config/configuration.ts\n            \n            interface\n            IJwtConfig\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/config/configuration.ts\n            \n            interface\n            IMailerConfig\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/config/cors.config.ts\n            \n            variable\n            corsConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/swagger.config.ts\n            \n            variable\n            swaggerConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/entities/admin.entity.ts\n            \n            entity\n            Admin\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/images/dto/create-image.dto.ts\n            \n            class\n            CreateImageDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/images/dto/image.dto.ts\n            \n            class\n            ImageDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/images/entities/image.entity.ts\n            \n            entity\n            Image\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/images/images.controller.ts\n            \n            controller\n            ImagesController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/images/images.service.ts\n            \n            injectable\n            ImagesService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/languages/dto/create-language.dto.ts\n            \n            class\n            CreateLanguageDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/languages/dto/language.dto.ts\n            \n            class\n            LanguageDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/languages/dto/update-language.dto.ts\n            \n            class\n            UpdateLanguageDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/languages/entities/language.entity.ts\n            \n            entity\n            Language\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/languages/languages.controller.ts\n            \n            controller\n            LanguagesController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/languages/languages.service.ts\n            \n            injectable\n            LanguagesService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/mailing/mailing.service.ts\n            \n            injectable\n            MailingService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/mailing/mailing.service.ts\n            \n            variable\n            getFullTemplatePath\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/mailing/mailing.service.ts\n            \n            variable\n            MAIL_TEMPLATES_PATH\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/place-categories/dto/create-place-category.dto.ts\n            \n            class\n            CreatePlaceCategoryDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/place-categories/dto/place-category.dto.ts\n            \n            class\n            PlaceCategoryDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/place-categories/dto/update-place-category.dto.ts\n            \n            class\n            UpdatePlaceCategoryDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/place-categories/entities/place-category.entity.ts\n            \n            entity\n            PlaceCategory\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/place-categories/place-categories.controller.ts\n            \n            controller\n            PlaceCategoriesController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/place-categories/place-categories.service.ts\n            \n            injectable\n            PlaceCategoriesService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/place-types/dto/create-place-type.dto.ts\n            \n            class\n            CreatePlaceTypeDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/place-types/dto/place-type.dto.ts\n            \n            class\n            PlaceTypeDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/place-types/dto/update-place-type.dto.ts\n            \n            class\n            UpdatePlaceTypeDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/place-types/entities/place-type.entity.ts\n            \n            entity\n            PlaceType\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/place-types/place-types.controller.ts\n            \n            controller\n            PlaceTypesController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/place-types/place-types.service.ts\n            \n            injectable\n            PlaceTypesService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/places/dto/create-place.dto.ts\n            \n            class\n            CreatePlaceDto\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/places/dto/place-slug.dto.ts\n            \n            class\n            PlaceSlugDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/places/dto/place.dto.ts\n            \n            class\n            PlaceDto\n            \n                0 %\n                (0/21)\n            \n        \n        \n            \n                \n                src/places/dto/search-place.dto.ts\n            \n            class\n            SearchPlaceDto\n            \n                0 %\n                (0/18)\n            \n        \n        \n            \n                \n                src/places/dto/update-place.dto.ts\n            \n            class\n            UpdatePlaceDto\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/places/entities/like.entity.ts\n            \n            entity\n            Like\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/places/entities/place.entity.ts\n            \n            entity\n            Place\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/places/places.controller.ts\n            \n            controller\n            PlacesController\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/places/places.service.ts\n            \n            injectable\n            PlacesService\n            \n                0 %\n                (0/17)\n            \n        \n        \n            \n                \n                src/roles/decorators/roles.decorator.ts\n            \n            variable\n            Roles\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/roles/decorators/roles.decorator.ts\n            \n            variable\n            ROLES_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/roles/dto/create-role.dto.ts\n            \n            class\n            CreateRoleDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/roles/dto/role.dto.ts\n            \n            class\n            RoleDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/roles/dto/update-role.dto.ts\n            \n            class\n            UpdateRoleDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/roles/entities/role.entity.ts\n            \n            entity\n            Role\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/roles/guards/RolesGuard.ts\n            \n            guard\n            RolesGuard\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/roles/roles.controller.ts\n            \n            controller\n            RolesController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/roles/roles.service.ts\n            \n            injectable\n            RolesService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/shared/validation/exception-factory.ts\n            \n            variable\n            exceptionFactory\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/shared/validation/validation-exception.dto.ts\n            \n            class\n            ValidationExceptionDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/shared/validation/validation-exception.dto.ts\n            \n            class\n            ValidationMessageDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/storage/dto/create-file.dto.ts\n            \n            class\n            CreateFileDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/storage/dto/file.dto.ts\n            \n            class\n            FileDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/storage/storage.service.ts\n            \n            injectable\n            StorageService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/translations/dto/create-translation.dto.ts\n            \n            class\n            CreateTranslationDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/translations/dto/translation.dto.ts\n            \n            class\n            TranslationDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/translations/dto/update-translation.dto.ts\n            \n            class\n            UpdateTranslationDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/translations/entities/translation.entity.ts\n            \n            entity\n            Translation\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/translations/translations.controller.ts\n            \n            controller\n            TranslationsController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/translations/translations.service.ts\n            \n            injectable\n            TranslationsService\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/users/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/dto/user.dto.ts\n            \n            class\n            UserDto\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/users/entities/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/9)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @google-cloud/storage : ^6.10.0\n        \n            @google-cloud/translate : ^7.2.1\n        \n            @nestjs-modules/mailer : ^1.8.1\n        \n            @nestjs/common : ^9.0.0\n        \n            @nestjs/config : ^2.3.1\n        \n            @nestjs/core : ^9.0.0\n        \n            @nestjs/jwt : ^10.0.3\n        \n            @nestjs/platform-express : ^9.0.0\n        \n            @nestjs/swagger : ^6.3.0\n        \n            @nestjs/typeorm : ^9.0.1\n        \n            bcrypt : ^5.1.0\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.0\n        \n            ejs : ^3.1.9\n        \n            mssql : ^9.1.1\n        \n            nodemailer : ^6.9.2\n        \n            reflect-metadata : ^0.1.13\n        \n            rxjs : ^7.2.0\n        \n            typeorm : ^0.3.15\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            RoleNamesEnum   (src/.../role-names.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/roles/enums/role-names.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        RoleNamesEnum\n                    \n                \n                        \n                            \n                                 USER\n                            \n                        \n                        \n                            \n                                Value : USER\n                            \n                        \n                        \n                            \n                                 ADMIN\n                            \n                        \n                        \n                            \n                                Value : ADMIN\n                            \n                        \n                        \n                            \n                                 OWNER\n                            \n                        \n                        \n                            \n                                Value : OWNER\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Auth   (src/.../auth.decorator.ts)\n                        \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/decorators/auth.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Auth\n                        \n                    \n                \n            \n            \n                \nAuth(...roles: undefined)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    roles\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CommentsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DatabaseModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ImagesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        LanguagesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MailingModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PlaceCategoriesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PlacesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PlaceTypesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RolesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        StorageModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TranslationsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_CommentsModule\n\n\n\ncluster_CommentsModule_exports\n\n\n\ncluster_CommentsModule_providers\n\n\n\ncluster_ImagesModule\n\n\n\ncluster_ImagesModule_exports\n\n\n\ncluster_ImagesModule_providers\n\n\n\ncluster_LanguagesModule\n\n\n\ncluster_LanguagesModule_exports\n\n\n\ncluster_LanguagesModule_providers\n\n\n\ncluster_MailingModule\n\n\n\ncluster_MailingModule_exports\n\n\n\ncluster_MailingModule_providers\n\n\n\ncluster_PlaceCategoriesModule\n\n\n\ncluster_PlaceCategoriesModule_providers\n\n\n\ncluster_PlacesModule\n\n\n\ncluster_PlacesModule_providers\n\n\n\ncluster_PlaceTypesModule\n\n\n\ncluster_PlaceTypesModule_providers\n\n\n\ncluster_RolesModule\n\n\n\ncluster_RolesModule_exports\n\n\n\ncluster_RolesModule_providers\n\n\n\ncluster_StorageModule\n\n\n\ncluster_StorageModule_exports\n\n\n\ncluster_StorageModule_providers\n\n\n\ncluster_TranslationsModule\n\n\n\ncluster_TranslationsModule_exports\n\n\n\ncluster_TranslationsModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nUsersModule \n\nUsersModule \n\nUsersModule  -->\n\nAuthModule->UsersModule \n\n\n\n\n\nCommentsModule\n\nCommentsModule\n\n\n\nPlacesModule\n\nPlacesModule\n\nPlacesModule -->\n\nCommentsModule->PlacesModule\n\n\n\nAppModule -->\n\nCommentsModule->AppModule\n\n\n\n\n\nCommentsService \n\nCommentsService \n\nCommentsService  -->\n\nCommentsModule->CommentsService \n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nImagesModule\n\nImagesModule\n\nPlacesModule -->\n\nImagesModule->PlacesModule\n\n\n\nAppModule -->\n\nImagesModule->AppModule\n\n\n\n\n\nImagesService \n\nImagesService \n\nImagesService  -->\n\nImagesModule->ImagesService \n\n\n\n\n\nLanguagesModule\n\nLanguagesModule\n\n\n\nTranslationsModule\n\nTranslationsModule\n\nTranslationsModule -->\n\nLanguagesModule->TranslationsModule\n\n\n\nAppModule -->\n\nLanguagesModule->AppModule\n\n\n\n\n\nLanguagesService \n\nLanguagesService \n\nLanguagesService  -->\n\nLanguagesModule->LanguagesService \n\n\n\n\n\nMailingModule\n\nMailingModule\n\nAuthModule -->\n\nMailingModule->AuthModule\n\n\n\nAppModule -->\n\nMailingModule->AppModule\n\n\n\n\n\nMailingService \n\nMailingService \n\nMailingService  -->\n\nMailingModule->MailingService \n\n\n\n\n\nPlaceCategoriesModule\n\nPlaceCategoriesModule\n\nAppModule -->\n\nPlaceCategoriesModule->AppModule\n\n\n\n\n\nPlaceTypesModule\n\nPlaceTypesModule\n\nAppModule -->\n\nPlaceTypesModule->AppModule\n\n\n\nAppModule -->\n\nPlacesModule->AppModule\n\n\n\n\n\nRolesModule\n\nRolesModule\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nRolesModule->UsersModule\n\n\n\nAppModule -->\n\nRolesModule->AppModule\n\n\n\n\n\nRolesService \n\nRolesService \n\nRolesService  -->\n\nRolesModule->RolesService \n\n\n\n\n\nStorageModule\n\nStorageModule\n\nImagesModule -->\n\nStorageModule->ImagesModule\n\n\n\nAppModule -->\n\nStorageModule->AppModule\n\n\n\n\n\nStorageService \n\nStorageService \n\nStorageService  -->\n\nStorageModule->StorageService \n\n\n\nPlaceCategoriesModule -->\n\nTranslationsModule->PlaceCategoriesModule\n\n\n\nPlaceTypesModule -->\n\nTranslationsModule->PlaceTypesModule\n\n\n\nPlacesModule -->\n\nTranslationsModule->PlacesModule\n\n\n\nAppModule -->\n\nTranslationsModule->AppModule\n\n\n\n\n\nTranslationsService \n\nTranslationsService \n\nTranslationsService  -->\n\nTranslationsModule->TranslationsService \n\n\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nPayloadFromTokenPipe\n\nPayloadFromTokenPipe\n\nAuthModule -->\n\nPayloadFromTokenPipe->AuthModule\n\n\n\n\n\nUserFromTokenPipe\n\nUserFromTokenPipe\n\nAuthModule -->\n\nUserFromTokenPipe->AuthModule\n\n\n\n\n\nCommentsService\n\nCommentsService\n\nCommentsModule -->\n\nCommentsService->CommentsModule\n\n\n\n\n\nImagesService\n\nImagesService\n\nImagesModule -->\n\nImagesService->ImagesModule\n\n\n\n\n\nLanguagesService\n\nLanguagesService\n\nLanguagesModule -->\n\nLanguagesService->LanguagesModule\n\n\n\n\n\nMailingService\n\nMailingService\n\nMailingModule -->\n\nMailingService->MailingModule\n\n\n\n\n\nPlaceCategoriesService\n\nPlaceCategoriesService\n\nPlaceCategoriesModule -->\n\nPlaceCategoriesService->PlaceCategoriesModule\n\n\n\n\n\nPlacesService\n\nPlacesService\n\nPlacesModule -->\n\nPlacesService->PlacesModule\n\n\n\n\n\nPlaceTypesService\n\nPlaceTypesService\n\nPlaceTypesModule -->\n\nPlaceTypesService->PlaceTypesModule\n\n\n\n\n\nRolesService\n\nRolesService\n\nRolesModule -->\n\nRolesService->RolesModule\n\n\n\n\n\nStorageService\n\nStorageService\n\nStorageModule -->\n\nStorageService->StorageModule\n\n\n\n\n\nTranslationsService\n\nTranslationsService\n\nTranslationsModule -->\n\nTranslationsService->TranslationsModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        14 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    10 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    11 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    14 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    35 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    2 Guards\n                \n            \n        \n        \n            \n                \n                    \n                    4 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            RequestWithTokenPayload   (src/.../types.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/shared/types.ts\n    \n    \n        \n            \n                \n                    \n                    RequestWithTokenPayload\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            corsConfig   (src/.../cors.config.ts)\n                        \n                        \n                            exceptionFactory   (src/.../exception-factory.ts)\n                        \n                        \n                            getFullTemplatePath   (src/.../mailing.service.ts)\n                        \n                        \n                            MAIL_TEMPLATES_PATH   (src/.../mailing.service.ts)\n                        \n                        \n                            Roles   (src/.../roles.decorator.ts)\n                        \n                        \n                            ROLES_KEY   (src/.../roles.decorator.ts)\n                        \n                        \n                            swaggerConfig   (src/.../swagger.config.ts)\n                        \n                        \n                            Token   (src/.../token.decorator.ts)\n                        \n                        \n                            TokenPayload   (src/.../token-payload.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/config/cors.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        corsConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  origin: '*',\n  allowedHeaders: '*',\n  methods: 'GET,HEAD,PUT,PATCH,POST,DELETE',\n  preflightContinue: false,\n  optionsSuccessStatus: 200,\n}\n                    \n                \n\n\n        \n    \n\n    src/shared/validation/exception-factory.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        exceptionFactory\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (validationErrors: ValidationError[] = []) => {\n  throw new BadRequestException(\n    validationErrors.map((error) => ({\n      field: error.property,\n      error: Object.values(error.constraints ?? []).join(', '),\n    })),\n  );\n}\n                    \n                \n\n\n        \n    \n\n    src/mailing/mailing.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        getFullTemplatePath\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (templatePath: string): string => {\n  return resolve(MAIL_TEMPLATES_PATH, ...templatePath.split('/'));\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        MAIL_TEMPLATES_PATH\n                        \n                    \n                \n            \n                \n                    \n                        Default value : join(process.cwd(), 'templates/')\n                    \n                \n\n\n        \n    \n\n    src/roles/decorators/roles.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Roles\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...roles: RoleNamesEnum[]) =>\n  SetMetadata(ROLES_KEY, roles)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ROLES_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'roles'\n                    \n                \n\n\n        \n    \n\n    src/config/swagger.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        swaggerConfig\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new DocumentBuilder()\n  .setTitle('My-Places API')\n  .setDescription('The My-Places API description')\n  .setVersion('1.0')\n  .addBearerAuth(\n    {\n      description: 'Please enter token in following format: Bearer ',\n      name: 'Authorization',\n      scheme: 'Bearer',\n      type: 'http',\n      in: 'Header',\n    },\n    'access-token',\n  )\n  .build()\n                    \n                \n\n\n        \n    \n\n    src/auth/decorators/token.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Token\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (data: unknown, ctx: ExecutionContext) => {\n    const req = ctx.switchToHttp().getRequest();\n    const authHeader = req.headers.authorization;\n    const token = authHeader?.split(' ')[1];\n    if (typeof token === 'string') return token;\n    return null;\n  },\n)\n                    \n                \n\n\n        \n    \n\n    src/auth/decorators/token-payload.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        TokenPayload\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (data: unknown, ctx: ExecutionContext) => {\n    const request = ctx.switchToHttp().getRequest();\n    if (!request.tokenPayload)\n      throw new UnauthorizedException({ message: 'No token payload found' });\n    return request.tokenPayload;\n  },\n)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
